<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>CNCF - 博客</title><link>https://www.cncf.io/blog/</link><description>CNCF - 博客 - RSSHub 用爱制作(https://github.com/DIYgod/RSSHub)</description><lastBuildDate>Tue, 21 May 2024 16:04:28 GMT</lastBuildDate><generator>rfeed v1.1.1</generator><docs>https://github.com/svpino/rfeed/blob/master/README.md</docs><item><title>【Love, hate, and policy languages: an introduction to decision-making engines】爱、恨和政策语言：决策引擎简介</title><link>https://www.cncf.io/blog/2024/05/21/love-hate-and-policy-languages-an-introduction-to-decision-making-engines/</link><description>&lt;p&gt;&lt;em&gt;Permit.io DevRel 总监 Gabriel L. Manor 的社区帖子&lt;/em&gt;&lt;/p&gt;&lt;p&gt;自早期以来，特定领域的声明性语言一直是软件开发的重要组成部分。它们的创建是为了解决通用编程语言难以有效管理的复杂性和特殊要求，现在它们已成为每个开发人员工具包中不可或缺的一部分。&lt;/p&gt;&lt;p&gt;近年来，在 IAM 领域，授权变得越来越具有挑战性——应用程序变得越来越复杂，用户需求也越来越复杂。结果？专注于授权的特定领域声明性语言的激增。从 Open Policy Agent 的 Rego 等旧语言通过即将推出的 V1 进行了改版，到 OpenFGA 等新语言以及最近创建的 AWS Cedar，授权领域正在取得重大进展，以解决这种日益增长的复杂性。&lt;/p&gt;&lt;p&gt;在本博客中，我们将讨论为什么这些特定于领域的声明性语言如此重要，以及如何利用它们来构建更好、更安全的应用程序。我们将首先讨论特定领域的声明性语言的来源以及它们的创建是为了解决哪些问题 –&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;从汇编到特定领域的声明性语言&lt;/h2&gt;&lt;h3 class="wp-block-heading"&gt;混乱&lt;/h3&gt;&lt;figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"&gt;&lt;div class="wp-block-embed__wrapper"&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;自早期使用软件解决问题以来，开发人员就一直在尝试提高生产力和自动化程度。早期，我们使用机器语言——手动编写二进制或汇编代码。但这效率很低，因此我们为个人计算机和服务器创建了 C 等语言，以&lt;strong&gt;消除混乱&lt;/strong&gt;。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;复杂&lt;/h3&gt;&lt;p&gt;随着程序变得越来越大、越来越复杂，用 C 语言编写它们有很多限制并且会适得其反。这导致了面向对象编程设计模式和 C++ 等语言的发展，以更有效地管理复杂性。然而，Java 和 Python 等高级语言引入的抽象虽然使开发变得更容易，但往往会导致性能问题。为了解决这些问题，特别是并发处理问题，开发了 Go 语言，提供更高效的性能。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;速度&lt;/h3&gt;&lt;p&gt;此时，一个新的问题出现了——&lt;strong&gt;速度&lt;/strong&gt;。例如，如果我们想向浏览器交付软件，我们需要以极快的速度交付它，以便用户可以在我们交付软件后立即访问它。这需要将语言转变为框架。如果你考虑像 JavaScript 这样的语言，那么 JavaScript 开发者是不存在的，而是存在的。有 Node.js 开发人员；有 React 开发人员——我们使用这些语言是因为它们是面向框架的，可以提高软件速度。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;信心&lt;/h3&gt;&lt;p&gt;速度固然很好，但也带来了一个大问题——它往往会破坏东西。此时，我们最缺乏的就是对我们软件的&lt;strong&gt;信心&lt;/strong&gt;。以用户界面为例——我们希望它们的外观和执行方式是我们可以完全预见和依赖的。这就是特定于领域的声明性语言的用武之地。例如，HTML 虽然本身不​​是一种编程语言，但它创建了特定于领域的信心，确保我们提供的 UI（希望）看起来与用户体验完全相同。&lt;/p&gt;&lt;p&gt;当我们审视这段旅程的起点和终点时，差异立即显而易见。特定于领域的声明性语言随处可见，为我们提供了高度的信心，使我们能够高速做事、处理复杂的用例，并将秩序带入混乱之中。但这对授权有何影响？ &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="图像" class="wp-image-108577" height="741" src="https://www.cncf.io/wp-content/uploads/2024/05/Untitled-1.jpg" width="1317" /&gt;&lt;/figure&gt;&lt;h2 class="wp-block-heading"&gt;细粒度的决策&lt;/h2&gt;&lt;p&gt;最近，软件开发领域出现了一个新问题：&lt;strong&gt;决策&lt;/strong&gt;问题。决策是软件开发最基本的方面之一，简单的“if”语句是任何编程语言的基础。但在绝大多数情况下，这还不够。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="图像" class="wp-image-108578" height="560" src="https://www.cncf.io/wp-content/uploads/2024/05/Untitled-2.png" width="1080" /&gt;&lt;/figure&gt;&lt;p&gt;许多现代应用程序需要极其细粒度的决策，尤其是有关授权中的安全问题（处理用户或服务在应用程序中可以或不能执行的操作）。细粒度授权带来的挑战使我们经历与编程语言完全相同的旅程，解决相同的问题——混乱、复杂性、速度和信心。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;授权如何变化，我们能做些什么？&lt;/h2&gt;&lt;h3 class="wp-block-heading"&gt;混沌——应用程序架构&lt;/h3&gt;&lt;p&gt;早在 2010 年，作为一名开发人员，您就可以轻松想象拥有一台服务器、一种编程语言、一种数据库和一种应用程序。如今，即使是最基本的应用程序从一开始就启动了大量的服务，但我们仍然不希望用户访问他们不应该访问的数据。这意味着所有这些服务都需要有一个具体的决策来源，并且这些决策必须在整个堆栈中进行简化。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="图像" class="wp-image-108579" height="981" src="https://www.cncf.io/wp-content/uploads/2024/05/Untitled-3.jpg" width="2000" /&gt;&lt;/figure&gt;&lt;h3 class="wp-block-heading"&gt;解决方案——结构&lt;/h3&gt;&lt;p&gt;这个问题的解决方案是以结构的形式出现的。就像C解决了使用机器代码的问题一样。首先，我们需要了解应该在哪里做出这些复杂的决定——&lt;/p&gt;&lt;ul&gt;&lt;li&gt;最基本的层是&lt;strong&gt;代码本身&lt;/strong&gt;。如今的开发人员对代码的交付方式和生产方式有着很大的影响。因此，需要做出的第一个决定是“谁可以交付什么”？或者，更基本地说，“开发人员可以做什么？”&lt;/li&gt;&lt;li&gt;然后是&lt;strong&gt;服务&lt;/strong&gt;。这里存在“哪个服务可以与其他服务对话？”、“它们如何部署在 CI/CD 中并如何相互对话”等问题？&lt;/li&gt;&lt;li&gt;上面是应用程序数据库。在这里，我们需要做出“谁可以从数据库中读取什么？”的决定。&lt;/li&gt;&lt;li&gt;最重要的是，还有应用程序后端，我们需要在其中决定“应用程序用户可以执行哪些操作？”&lt;/li&gt;&lt;li&gt;最重要的是，我们有前端，我们需要问自己“我们的应用程序用户可以看到什么？” &lt;/li&gt;&lt;/ul&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="图像" class="wp-image-108580" height="769" src="https://www.cncf.io/wp-content/uploads/2024/05/Untitled-4.jpg" width="1365" /&gt;&lt;/figure&gt;&lt;p&gt;有了清晰的授权决策结构，我们就可以更轻松地设计出真正可以处理这些决策的解决方案。以下是如何完成此操作的抽象架构：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;集中策略配置：&lt;/strong&gt;将所有配置整合到一个地方将有助于我们简化配置并确保我们遵循我们试图建立的所有标准。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;策略引擎：&lt;/strong&gt;必须拥有一个知道如何采用我们配置的策略并知道如何做出正确决策的软件。该平面需要去中心化有几个原因：首先，它必须反应超快，其次，我们希望堆栈的每个部分都能够直接与该平面通信并根据这些决策强制执行权限。 &lt;/li&gt;&lt;/ul&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="图像" class="wp-image-108581" height="771" src="https://www.cncf.io/wp-content/uploads/2024/05/Untitled-5.jpg" width="1368" /&gt;&lt;/figure&gt;&lt;h3 class="wp-block-heading"&gt;复杂性——数据点和决策疲劳&lt;/h3&gt;&lt;p&gt;在 LAMP 或更旧的架构中，我们曾经只有一个 SQL 数据库。如今，即使是最简单的应用程序也会使用多个数据源，而且这些数据源只会变得越来越复杂。在做出决策时，所有这些数据仍然需要遵守相同的安全级别。这意味着做出这些决策的方式也变得越来越复杂。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="图像" class="wp-image-108582" height="745" src="https://www.cncf.io/wp-content/uploads/2024/05/Untitled-6.jpg" width="1325" /&gt;&lt;/figure&gt;&lt;p&gt;我们拥有的数据越多，我们需要做出的决策就越多，决策过程中需要包含的数据也就越多。在某些时候，它会变得太复杂，我们无法继续支持越来越多的粒度。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="图像" class="wp-image-108583" height="750" src="https://www.cncf.io/wp-content/uploads/2024/05/Untitled-7.jpg" width="1331" /&gt;&lt;/figure&gt;&lt;h3 class="wp-block-heading"&gt;解决方案——设计模式&lt;/h3&gt;&lt;p&gt;这个问题可以通过利用适当的&lt;strong&gt;设计模式&lt;/strong&gt;来解决。&lt;/p&gt;&lt;p&gt;我们需要做的第一件事是定义做出决定所需的组件。这是一个非常简单的设计模式提案，使我们能够做到这一点： &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="图像" class="wp-image-108584" height="769" src="https://www.cncf.io/wp-content/uploads/2024/05/Untitled-8.jpg" width="1366" /&gt;&lt;/figure&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;策略&lt;/strong&gt;是配置决策的代码&lt;/li&gt;&lt;li&gt;&lt;strong&gt;数据（&lt;/strong&gt;例如应用程序的数据库、我们的身份提供程序以及 Kubernetes 集群的配置）包含我们支持正确决策所需的任何信息。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;上下文&lt;/strong&gt;，例如动态数据、日期和时间以及地理位置，****使我们能够更好地了解做出决策的情况。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;拥有这种结构可以让我们更清楚地思考在决策过程的每一步中应该关注什么。是制定政策吗？是做出决定所需的数据吗？是否存在需要做出此决定的独特背景？&lt;/p&gt;&lt;p&gt;我们还可以考虑我们想要做出的决定类型 -&lt;/p&gt;&lt;ul&gt;&lt;li&gt;决定可能是二元的——是允许还是拒绝某件事？&lt;/li&gt;&lt;li&gt;更复杂的决策涉及过滤数据并根据相关数据做出决策。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;有了所有这些信息，我们应该能够非常轻松地创建一个&lt;a href="https://docs.permit.io/how-to/enforce-permissions/check"&gt;“检查功能”&lt;/a&gt; ，使我们能够在考虑每个相关元素的同时做出决策。此函数将定义一个用户（或主体 - 就像服务）、一个操作（他们想要在应用程序中执行的操作）、他们想要执行该操作的资源以及应允许执行此操作的上下文（如某些决策需要更精细的上下文，而不仅仅是谁对什么资源执行什么操作）：&lt;/p&gt;&lt;p&gt; &lt;code&gt;check({user}, {action}, {resource}, {context});&lt;/code&gt;&lt;/p&gt;&lt;p&gt;如果我们使用这四个参数创建一个服务器，我们可以以允许跨堆栈决策的方式简化设计模式。如果我们想做过滤，我们可以使用所谓的“部分评估”——因为软件是基于源树和抽象二叉树和非二叉树构建的，所以您始终可以将决策转换为查询语言。这使我们能够创建一个引擎，它不仅知道如何根据一组数据做出决策，还知道如何将其转换为查询语言，这有助于我们只获取所需的数据。&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;check({ user }, { action }, { resource }, { context }); response = requests.post(&amp;#39;&amp;lt;http://host.docker.internal:8180/v1/is_authorized&amp;gt;&amp;#39;, json={ &amp;quot;principal&amp;quot;: f&amp;quot;User::\\&amp;quot;{user}\\&amp;quot;&amp;quot;, &amp;quot;action&amp;quot;: f&amp;quot;Action::\\&amp;quot;{method.lower()}\\&amp;quot;&amp;quot;, &amp;quot;resource&amp;quot;: f&amp;quot;ResourceType::\\&amp;quot;{original_url.split(&amp;#39;/&amp;#39;)[1]}\\&amp;quot;&amp;quot;, &amp;quot;context&amp;quot;: request.json }) const response = await fetch( &amp;quot;&amp;lt;http://host.docker.internal:8180/v1/is_authorized&amp;gt;&amp;quot;, { method: &amp;quot;POST&amp;quot;, body: JSON.stringify({ principal: `User::\\&amp;quot;${user}\\&amp;quot;`, action: `Action::\\&amp;quot;${method.toLowerCase()}\\&amp;quot;`, resource: `ResourceType::\\&amp;quot;${originalUrl.split(&amp;quot;/&amp;quot;)[1]}\\&amp;quot;`, context: body, }), } );&lt;/code&gt;&lt;/pre&gt;&lt;h3 class="wp-block-heading"&gt;速度——还有更多&lt;/h3&gt;&lt;p&gt;我们正在提供更多软件。这意味着更多的端点和更多的生产环境每时每刻都在增长。这就需要一个我们可以信任的层，以便在访问时始终做出正确的决定。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="图像" class="wp-image-108585" height="751" src="https://www.cncf.io/wp-content/uploads/2024/05/Untitled-9.jpg" width="1326" /&gt;&lt;/figure&gt;&lt;h3 class="wp-block-heading"&gt;解决方案——框架&lt;/h3&gt;&lt;p&gt;在授权背景下思考框架的最简单方法是查看策略模型。那里有很多，但让我们关注主要的四个，看看他们做什么，并简要讨论他们的差异 -&lt;/p&gt;&lt;ul&gt;&lt;li&gt;基于策略的访问控制 (PBAC) – 允许我们快速定义策略规则。如果我们有一种可以用来编写授权规则的指定语言，它就允许我们创建授权策略。 PBAC 的问题是它不能考虑太多数据。如果我们的决策需要大量有关用户可以做什么或不能做什么的数据，或者需要利用来自我们的计费系统等系统的数据，那么 PBAC 不会削减它。&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.permit.io/blog/an-introduction-to-role-based-access-control"&gt;基于角色的访问控制 (RBAC)&lt;/a&gt; – 最传统的选择，甚至经常被人们用作授权的替代名称，RBAC 根据预定义的角色对用户进行细分，并定义允许这些角色对某些资源执行哪些操作。它非常简单，但缺乏粒度。&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.permit.io/blog/what-is-rebac"&gt;基于关系的访问控制 (ReBAC)&lt;/a&gt; – ReBAC 利用应用程序内部的关系来派生基于它们的角色。因此，例如，如果我为一个文件夹分配&lt;code&gt;owner&lt;/code&gt;角色，并且在数据库中，该文件夹与其中的文件和文件夹相关联，那么我将能够根据我的&lt;code&gt;owner&lt;/code&gt;角色派生对这些文件和文件夹的权限在父文件夹上。如果我的软件是分布式和去中心化的，ReBAC 允许我将我的授权重新想象为图表，从而允许更细粒度的策略。&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.permit.io/blog/what-is-attribute-based-access-control"&gt;基于属性的访问控制 (ABAC)&lt;/a&gt; – ABAC 是所有模型中最细粒度的，允许我们基于属性创建授权策略。属性（无论是主题属性、资源属性、操作属性还是环境属性）允许我们创建无限复杂的规则来管理我们的访问策略。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;要对这些进行更深入的比较，请查看我们关于&lt;a href="https://www.permit.io/blog/rbac-vs-abac-vs-rebac"&gt;RBAC 与 ABAC 与 ReBAC 的&lt;/a&gt;博客&lt;/p&gt;&lt;p&gt;大多数情况下，授权模型更像是思考工具，而不是具体的指导方针，大多数应用程序最终都会将它们混合在一起。为了说明这一点，我们构建了&lt;a href="https://docs.permit.io/modeling/pink-mobile"&gt;一个相当简单的演示应用程序，供所有用户使用&lt;/a&gt;。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;信心——不再只是最终用户&lt;/h3&gt;&lt;p&gt;现代应用程序的用户往往基本上想要不可能的功能。一方面，他们希望拥有自己的数据并管理其隐私，您需要支持这一点。这意味着支持非常细粒度的所有权、临时数据访问功能、基于位置的访问策略；你的名字。另一方面，应用程序用户不再是传统意义上的真正用户。想想 DevOps、RevOps 和 AppSec——它们都希望访问代码，并且它们影响软件的交付方式。最重要的是，它们影响访问决策的制定方式。&lt;/p&gt;&lt;p&gt;所有这些复杂性并不包括最新的参与者——人工智能代理和法学硕士。这些造成了非结构化决策的问题，因为他们想要非结构化地访问我们的数据——我们如何为他们提供正确的访问权限&lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="图像" class="wp-image-108586" height="768" src="https://www.cncf.io/wp-content/uploads/2024/05/Untitled-10.jpg" width="1364" /&gt;&lt;/figure&gt;&lt;h3 class="wp-block-heading"&gt;解决方案——特定领域的声明性代码&lt;/h3&gt;&lt;p&gt;使用特定于领域的声明性语言的好处可以帮助我们克服这些挑战，这要归功于将&lt;a href="https://docs.permit.io/integrations/gitops/overview/#policy-as-code"&gt;策略作为代码&lt;/a&gt;的好处 -&lt;/p&gt;&lt;ol&gt;&lt;li&gt;它们是&lt;strong&gt;可读的。&lt;/strong&gt;当您将策略视为用用于授权策略的语言编写的代码时，您应该立即了解正在发生的事情 – 谁可以做什么、在什么时间做什么。&lt;/li&gt;&lt;li&gt;他们提高绩效。由于所有决策都是在单个域中做出的，因此没有任何事情会妨碍他们毫无延迟地做出和交付。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;不仅如此，使用代码定义策略使您能够确保在不同系统和环境中一致执行策略，这有助于防止策略违规并降低未经授权访问的风险。它允许您轻松管理和更新策略，就像使用用于管理和部署软件的相同工具和流程一样。这使得跟踪策略随时间的变化变得更加容易，必要时回滚更改，并且通常可以享受代码世界经过深思熟虑的最佳实践（例如，GitOps）。&lt;/p&gt;&lt;p&gt;政策语言有很多种，每种都更适合处理不同的场景： &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="图像" class="wp-image-108587" height="767" src="https://www.cncf.io/wp-content/uploads/2024/05/Untitled-11.jpg" width="1365" /&gt;&lt;/figure&gt;&lt;h3 class="wp-block-heading"&gt;开放策略代理 (OPA) – Rego&lt;/h3&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;allow { input.user.role == &amp;quot;viewer&amp;quot; validate_department(input.user, input.document) validate_classification(input.user.role, input.document.classification) validate_dynamic_rules(input.user, input.document) } validate_department(user, document) { user.department == document.department } validate_classification(user_role, doc_classification) { role_permissions[user_role][_] == doc_classification } validate_dynamic_rules(user, document) { dynamic_rules[_](user, document) }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; OPA 最初是一个多用途的政策引擎，这就是它的力量的来源。它是一种极其灵活的语言，可以帮助您对所需的任何类型的决策进行建模。事实是，Rego 可能会变得相当复杂——它不是声明性语言简单直观的完美示例，但它确实为您提供了在任何层处理极其复杂的决策的能力。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="图像" class="wp-image-108588" height="764" src="https://www.cncf.io/wp-content/uploads/2024/05/Untitled-12.jpg" width="1365" /&gt;&lt;/figure&gt;&lt;p&gt;如果您有能力学习这种新语言，并且希望在整个堆栈中拥有一个具有一种策略语言的代理，那么开放策略代理是一个不错的选择。&lt;/p&gt;&lt;p&gt;在这里阅读更多相关信息：&lt;a href="https://www.permit.io/blog/implement-rbac-using-opa"&gt;带有开放策略代理 (OPA) 的 RBAC&lt;/a&gt;&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt; AWS 的雪松&lt;/h3&gt;&lt;pre class="wp-block-code"&gt;&lt;code class=""&gt;permit ( principal == PhotoApp::User::&amp;quot;stacey&amp;quot;, action == PhotoApp::Action::&amp;quot;viewPhoto&amp;quot;, resource ) when { resource in PhotoApp::Account::&amp;quot;stacey&amp;quot; };&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; &lt;a href="https://www.permit.io/blog/oss-aws-cedar-is-a-gamechanger-for-iam"&gt;Cedar 一年前由 AWS 推出&lt;/a&gt;，最初是一种用于应用程序级授权的专用语言。与 AWS IAM 不同，它是一种可以在任何应用程序中使用的语言。 Cedar 使用 Dafny 语言提供正确性和性能的科学证明，但在处理非结构化数据时使用它仍然具有挑战性，并且缺乏 ReBAC 支持。它是基于 ABAC 的快速决策的绝佳选择，并且支持开箱即用的审计、静态分析和部分评估。&lt;/p&gt;&lt;p&gt;在这里阅读更多相关信息： &lt;a href="https://www.permit.io/blog/cedar-rbac"&gt;RBAC With AWS&amp;#39; Cedar&lt;/a&gt;&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;开放FGA&lt;/h3&gt;&lt;p&gt; OpenFGA 本身不是一种策略语言，而是一个基于&lt;a href="https://www.permit.io/blog/zanzibar-vs-opa"&gt;Google 桑给巴尔白皮书的&lt;/a&gt;授权平台，在处理 ReBAC 时，OpenFGA 是一个不错的选择。由Auth0支持和维护并用于授权，内置基于图的引擎，是大规模授权实施的完美解决方案。 OpenFGA 不太适合 RBAC 和 ABAC。&lt;/p&gt;&lt;p&gt;您可以在此处详细了解它与 Cedar 的比较： &lt;a href="https://www.youtube.com/watch?v=sG2OUXes8Hs&amp;amp;t=1s"&gt;OpenFGA&lt;/a&gt;&lt;/p&gt;&lt;p&gt;可以在此处找到所有三种语言的更广泛的概述和比较： &lt;a href="https://www.permit.io/blog/policy-engines"&gt;Open Policy Agent 与 AWS Cedar 和 Google Zanzibar 的比较如何&lt;/a&gt;&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;OPAL – 使用开源在您的应用程序附近运行策略语言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/permitio/opal"&gt;OPAL（开放策略管理层）&lt;/a&gt;&lt;/strong&gt;是政策引擎的开源管理层，例如开放策略代理 (OPA) 和&lt;strong&gt;&lt;a href="https://github.com/permitio/cedar-agent"&gt;AWS 的 Cedar Agent&lt;/a&gt;&lt;/strong&gt; 。 OPAL 自动同步策略存储和策略决策所需的实时数据，确保始终使用最新信息评估策略。&lt;/p&gt;&lt;p&gt; OPAL 允许您充分利用这些策略语言，使您的授权策略达到现代应用程序所需的速度。&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;请考虑&lt;a href="https://github.com/permitio/opal"&gt;在 GitHub 上给 OPAL 一颗星&lt;/a&gt;来支持我们的开源工作。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;结论&lt;/h2&gt;&lt;p&gt;事实证明，特定领域的声明性语言是管理软件开发中复杂任务的关键工具。它们帮助我们构建高性能、安全且用户友好的系统。无论是管理细粒度的访问控制还是适应人工智能代理的需求，这些语言都让我们保持领先地位。&lt;/p&gt;&lt;p&gt;授权是任何现代应用程序的关键组成部分，我们可以看到特定领域的声明性语言给这个领域带来的巨大好处。开放策略代理 (OPA)、AWS 的 Cedar 和 OpenFGA 使我们能够应对 IAM 现代状态带来的挑战，而 OPAL（开放策略管理层）通过自动执行策略存储与真实策略之间的同步来增强其功能。 -决策所需的时间数据，确保政策与最新的相关数据一致应用。这种集成使我们能够创建安全、可靠和动态的授权系统，能够适应不断变化的条件和要求。&lt;/p&gt;&lt;p&gt;想与志同道合的人讨论政策语言吗？我们的 OPAL Slack 社区是最大的授权社区。现在加入 → &lt;a href="http://io.permit.io/slack"&gt;io.permit.io/slack&lt;/a&gt; &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Mon, 20 May 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/05/21/love-hate-and-policy-languages-an-introduction-to-decision-making-engines/</guid></item><item><title>【Cloud Native Glossary — the Russian version is live!】云原生术语表 — 俄语版本已上线！</title><link>https://www.cncf.io/blog/2024/05/20/cloud-native-glossary-the-russian-version-is-live/</link><description>&lt;p&gt;&lt;em&gt;社区帖子&lt;/em&gt;&lt;em&gt;，作者： &lt;a href="https://github.com/kirkonru"&gt;&lt;strong&gt;Kirill Kononovich&lt;/strong&gt;&lt;/a&gt; 、 &lt;a href="https://www.linkedin.com/in/shurupov/"&gt;&lt;strong&gt;Dmitry Shurupov&lt;/strong&gt;&lt;/a&gt; 、 &lt;a href="https://github.com/tym83"&gt;&lt;strong&gt;Timur Tukaev&lt;/strong&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://glossary.cncf.io/"&gt;&lt;em&gt;云原生术语表&lt;/em&gt;&lt;/a&gt;&lt;em&gt;是&lt;/em&gt;&lt;em&gt;由 CNCF 商业价值小组委员会领导的项目。其目标是用清晰简单的语言解释云原生概念，而不需要任何先前的技术知识。我们正在将术语表的英文版本地化为尽可能多的语言。本周我们重点关注俄语以及为俄语使用者本地化术语表的团队！&lt;/em&gt;&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;关于俄语和俄语词汇表&lt;/h2&gt;&lt;p&gt;尤里·加加林的名言“我们走吧！” （“Поехали！”）预示着太空探索新时代的开始。三十年后，GNU通用公共许可证（GPL）的发布和第一个Linux内核的发布标志着另一个时代的黎明：世界各地的人们共同致力于软件造福所有人的时代。&lt;/p&gt;&lt;p&gt;我们相信，无国界合作是我们文明成功的关键。这就是为什么我们致力于让世界各地的俄语使用者更轻松地参与开源项目。&lt;/p&gt;&lt;p&gt;我们很高兴地宣布 CNCF 云原生术语表的俄语本地化现已全面推出！该术语表是用于学习云原生计算的综合资源，我们很高兴能够参与其中，让每个人（无论其母语是什么）都可以使用它。&lt;/p&gt;&lt;p&gt;在属于印欧语系的东斯拉夫语言中，俄语是全球使用人数最多的语言，有超过 2.58 亿人使用该语言。俄语不仅是世界上使用最广泛的斯拉夫语言，也是欧洲最常见的母语，也是欧亚大陆地理分布最广的语言。&lt;/p&gt;&lt;p&gt;俄语西里尔字母由33个字母组成，其中10个元音、21个辅音和两个不代表任何声音的字母。这些字母与其他斯拉夫语言中使用的字母相似，尽管某些字母的发音方式不同。&lt;/p&gt;&lt;p&gt;全世界有超过 2.58 亿人使用俄语，其中主要是前苏联国家。蒙古、中国、德国、以色列和美国的重要少数群体也使用这种语言。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;您为什么认为俄语术语表本地化很重要？&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;让俄语社区更容易获取云原生知识。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;云原生计算是一个快速发展的领域，CNCF 的云原生术语表对于任何想要了解这种构建和运行软件的新方式的人来说都是重要资源。然而，该术语表目前仅提供英语和其他几种语言版本，这对于讲俄语的开发人员和其他专业人士来说可能是一个障碍。将术语表本地化为俄语将使这个庞大且不断发展的社区更容易使用它，并有助于加速云原生技术在俄语国家的采用。它还将有助于锚定最相关的俄语术语，并记录从英语借用的术语的既定拼写。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;促进云原生社区的多样性和包容性。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;云原生社区是一个全球性社区，但确保听到所有声音很重要。通过将 CNCF 云原生术语表本地化为俄语，我们可以传达一个强烈的信息：我们致力于多样性和包容性，并且我们希望每个人都能够参与云原生生态系统。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;创造新的合作和创新机会。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;当来自不同文化和背景的人们聚集在一起时，他们可以创造新的创新解决方案。通过提供俄语版 CNCF 云原生术语表，我们可以鼓励更多俄语开发人员和其他专业人士为云原生项目做出贡献。这可能会带来新的想法和新的做事方式，这将使整个云原生社区受益。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;认识俄语词汇表团队&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/kirkonru"&gt;&lt;strong&gt;基里尔·科诺诺维奇&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;基里尔是弗兰特的一名翻译。他是各种操作系统项目（例如&lt;a href="https://github.com/werf/werf"&gt;werf&lt;/a&gt; 、 &lt;a href="https://github.com/werf/trdl"&gt;trdl&lt;/a&gt;以及 Kubernetes 文档）的俄语或英语本地化背后的人员之一。他的兴趣范围从 Python 编程到法学硕士微调和开发人工智能系统。&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.linkedin.com/in/shurupov/"&gt;&lt;strong&gt;德米特里·舒鲁波夫&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Palark GmbH 的联合创始人，负责领导与 DevOps 相关的技术内容制作和社区关系。自 2001 年以来，Dmitry 一直是开源软件的忠实用户和爱好者，他在在线和印刷媒体上撰写了无数与 Linux 相关的文章，并为各种开源项目做出了贡献。自 2022 年以来，他一直领导 Kubernetes 文档的俄语翻译。&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/tym83"&gt;&lt;strong&gt;帖木儿·图卡耶夫&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Timur 是 Fl​​ant 的技术营销主管。 Timur 是一名 OSS 爱好者，熟悉云趋势和发展。他曾参与 Scribus 文档的翻译。 Timur 是当地一所大学新闻系改用 Linux 的幕后推手。他对 Kotlin 编程充满热情，并主持了一个有关现代媒体如何运作的播客。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;您为什么决定本地化术语表？为什么它对你很重要？&lt;/h2&gt;&lt;p&gt;在每个人都说同一种语言的世界中，您可以与全球任何地方的任何人进行交流。然而，欣赏语言和文化的多样性也很重要。每种语言都有其独特的美感和表现力。&lt;/p&gt;&lt;p&gt; CNCF 的云原生术语表就像云原生世界的罗塞塔石碑。它提供了一种通用语言，每个人都可以使用它来讨论云原生技术。&lt;/p&gt;&lt;p&gt;将 CNCF 云原生术语表本地化为俄语就像向数百万人赠送演讲礼物。这将使他们能够充分参与云原生社区并分享他们的知识和想法。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;体验如何？&lt;/h2&gt;&lt;p&gt;总的来说，这次经历非常有益。我们很高兴参与该项目并成为 CNCF 社区的一部分。社区如此庞大、多元化且充满支持，我们很高兴有机会做出贡献。我们很高兴能借此机会更多地了解 CNCF 及其使命，以及该基金会如何帮助塑造云计算的未来。&lt;/p&gt;&lt;p&gt;尽管如此，由于语言的差异，一路上还是遇到了一些挑战。在某些情况下，我们必须调整术语以使潜在读者能够理解它们。为某些术语找到正确的语气或具体翻译也很困难。为了确保翻译准确并传达预期含义，我们必须在贡献者之间进行大量的讨论和协商。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;您想与社区分享任何经验教训吗？&lt;/h2&gt;&lt;p&gt;从事任何开源项目就像爬山一样。你一步步向上，最终更广阔的视野展现在你的面前。你最大的挑战是迈出第一步。不要害怕去做，因为周围总有一些有爱心的人随时准备帮助和支持你。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;其他人应该如何以及为何做出贡献&lt;/h2&gt;&lt;p&gt;为 CNCF 云原生术语表做出贡献是一个很好的方法：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;了解云原生计算的基本概念和技术。该术语表提供了云原生环境的全面概述，包括关键术语的定义、示例以及其他资源的链接。&lt;/li&gt;&lt;li&gt;加深您对云原生术语的理解。该术语表由专家团队精心策划，提供了云原生术语的准确且最新的定义。您还可以贡献自己的定义并帮助改进每个人的术语表。&lt;/li&gt;&lt;li&gt;与云原生社区的其他成员建立关系。 CNCF 社区热情且支持，为术语表做出贡献是结识其他热衷于云原生计算的开发人员和专业人士的好方法。&lt;/li&gt;&lt;/ul&gt;&lt;h2 class="wp-block-heading"&gt;您还有什么需要我们通知的吗？&lt;/h2&gt;&lt;p&gt;想象一个每个人都可以获得知识和资源的世界，无论他们的母语是什么。云原生术语表提供了进入这个世界的一个很好的切入点。我们很高兴将其提供给俄语社区。如果您对俄语充满热情并希望提高您的语言技能，我们邀请您加入我们的旅程。我们走吧！&lt;/p&gt;&lt;p&gt; PS 请随时在&lt;a href="https://cloud-native.slack.com/archives/C05G46RMQTX"&gt;Slack 频道&lt;/a&gt;或&lt;a href="https://t.me/ru_cloudnative"&gt;Telegram 聊天&lt;/a&gt;中给我们留言 — 这会很有趣！ &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Sun, 19 May 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/05/20/cloud-native-glossary-the-russian-version-is-live/</guid></item><item><title>【Announcing Flux 2.3 GA】宣布 Flux 2.3 GA</title><link>https://www.cncf.io/blog/2024/05/17/announcing-flux-2-3-ga/</link><description>&lt;p&gt;&lt;em&gt;项目帖子最初由 Stefan Prodan 发布在&lt;a href="https://fluxcd.io/blog/2024/05/flux-v2.3.0/"&gt;Flux 博客&lt;/a&gt;上&lt;/em&gt;&lt;/p&gt;&lt;p&gt;我们很高兴地宣布&lt;a href="https://github.com/fluxcd/flux2/releases/tag/v2.3.0"&gt;Flux v2.3.0&lt;/a&gt;发布！在这篇文章中，我们将重点介绍此版本中包含的一些新功能和改进。 &lt;/p&gt;&lt;figure class="wp-block-image"&gt;&lt;img alt="图像" src="https://fluxcd.io/blog/2024/05/flux-v2.3.0/featured-image.png" /&gt;&lt;/figure&gt;&lt;h2 class="wp-block-heading" id="general-availability-of-flux-helm-features-and-apis"&gt; Flux Helm 功能和 API 全面可用&lt;a href="https://fluxcd.io/blog/2024/05/flux-v2.3.0/#general-availability-of-flux-helm-features-and-apis"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;此版本标志着 Flux 项目的一个重要里程碑，经过近四年的开发，helm 控制器和 Helm 相关 API 已普遍可用。&lt;/p&gt;&lt;p&gt;以下 Kubernetes CRD 已升级为 GA：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; &lt;a href="https://fluxcd.io/flux/components/helm/helmreleases/"&gt;HelmRelease&lt;/a&gt; – &lt;code&gt;helm.toolkit.fluxcd.io/v2&lt;/code&gt;&lt;/li&gt;&lt;li&gt; &lt;a href="https://fluxcd.io/flux/components/source/helmcharts/"&gt;HelmChart&lt;/a&gt; – &lt;code&gt;source.toolkit.fluxcd.io/v1&lt;/code&gt;&lt;/li&gt;&lt;li&gt; &lt;a href="https://fluxcd.io/flux/components/source/helmrepositories/"&gt;HelmRepository&lt;/a&gt; – &lt;code&gt;source.toolkit.fluxcd.io/v1&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt; Helm 功能和 API 已经过社区在生产环境中的实际测试，现在被认为是稳定的。 Helm API 的未来更改将以向后兼容的方式进行，我们将在可预见的未来继续支持和维护它们。&lt;/p&gt;&lt;h3 class="wp-block-heading" id="enhanced-helm-oci-support"&gt;增强的 Helm OCI 支持&lt;a href="https://fluxcd.io/blog/2024/05/flux-v2.3.0/#enhanced-helm-oci-support"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;HelmRelease&lt;/code&gt; v2 API 附带了一个新字段&lt;a href="https://fluxcd.io/flux/components/helm/helmreleases/#chart-reference"&gt;&lt;code&gt;.spec.chartRef&lt;/code&gt;&lt;/a&gt; ，该字段添加了对在&lt;code&gt;HelmRelease&lt;/code&gt;中引用&lt;code&gt;OCIRepository&lt;/code&gt;和&lt;code&gt;HelmChart&lt;/code&gt;对象的支持。当使用&lt;code&gt;.spec.chartRef&lt;/code&gt;而不是&lt;code&gt;.spec.chart&lt;/code&gt;时，控制器允许跨多个&lt;code&gt;HelmRelease&lt;/code&gt;资源重用 Helm 图表版本。&lt;/p&gt;&lt;p&gt;从这个版本开始，引用容器注册表中存储的 Helm 图表的推荐方法是通过&lt;a href="https://fluxcd.io/flux/components/source/ocirepositories/"&gt;OCIRepository&lt;/a&gt; 。&lt;/p&gt;&lt;p&gt;使用&lt;code&gt;OCIRepository&lt;/code&gt;对象代替&lt;code&gt;HelmRepository&lt;/code&gt;可以提高控制器的性能并简化调试过程。 &lt;code&gt;OCIRepository&lt;/code&gt;在管理 Helm 图表方面提供了更大的灵活性，因为它允许通过&lt;code&gt;tag&lt;/code&gt; 、 &lt;code&gt;semver&lt;/code&gt;或 OCI &lt;code&gt;digest&lt;/code&gt;固定来定位 Helm 图表版本。如果容器注册表中的图表版本被覆盖，控制器将检测上游 OCI 摘要中的更改，并相应地协调&lt;code&gt;HelmRelease&lt;/code&gt;资源。&lt;/p&gt;&lt;p&gt; &lt;code&gt;HelmRelease&lt;/code&gt;引用&lt;code&gt;OCIRepository&lt;/code&gt;的示例：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;&lt;strong&gt;apiVersion&lt;/strong&gt; : helm.toolkit.fluxcd.io/v2 &lt;strong&gt;kind&lt;/strong&gt; : HelmRelease &lt;strong&gt;metadata&lt;/strong&gt; : &lt;strong&gt;name&lt;/strong&gt; : metrics-server &lt;strong&gt;spec&lt;/strong&gt; : &lt;strong&gt;interval&lt;/strong&gt; : 10m &lt;strong&gt;chartRef&lt;/strong&gt; : &lt;strong&gt;kind&lt;/strong&gt; : OCIRepository &lt;strong&gt;name&lt;/strong&gt; : metrics-server &lt;strong&gt;driftDetection&lt;/strong&gt; : &lt;strong&gt;mode&lt;/strong&gt; : enabled &lt;strong&gt;values&lt;/strong&gt; : &lt;strong&gt;apiService&lt;/strong&gt; : &lt;strong&gt;create&lt;/strong&gt; : &lt;strong&gt;true&lt;/strong&gt; &lt;strong&gt;---&lt;/strong&gt; &lt;strong&gt;apiVersion&lt;/strong&gt; : source.toolkit.fluxcd.io/v1beta2 &lt;strong&gt;kind&lt;/strong&gt; : OCIRepository &lt;strong&gt;metadata&lt;/strong&gt; : &lt;strong&gt;name&lt;/strong&gt; : metrics-server &lt;strong&gt;spec&lt;/strong&gt; : &lt;strong&gt;interval&lt;/strong&gt; : 12h &lt;strong&gt;layerSelector&lt;/strong&gt; : &lt;strong&gt;mediaType&lt;/strong&gt; : &amp;quot;application/vnd.cncf.helm.chart.content.v1.tar+gzip&amp;quot; &lt;strong&gt;operation&lt;/strong&gt; : copy &lt;strong&gt;url&lt;/strong&gt; : oci://docker.io/bitnamicharts/metrics-server &lt;strong&gt;ref&lt;/strong&gt; : &lt;strong&gt;semver&lt;/strong&gt; : &amp;quot;&amp;gt;=7.0.0&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;h3 class="wp-block-heading" id="improved-observability-of-helm-releases"&gt;改进了 Helm 版本的可观察性&lt;a href="https://fluxcd.io/blog/2024/05/flux-v2.3.0/#improved-observability-of-helm-releases"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;根据大众的需求，helm-controller 现在除了&lt;code&gt;version&lt;/code&gt;信息之外还发出用 Helm 图表&lt;code&gt;appVersion&lt;/code&gt;注释的 Kubernetes 事件。为 Helm 版本配置&lt;a href="https://fluxcd.io/flux/components/notification/alerts/"&gt;警报&lt;/a&gt;时， &lt;code&gt;appVersion&lt;/code&gt;现在可用作警报元数据中的字段，并显示在通知消息中。 &lt;code&gt;appVersion&lt;/code&gt;字段还包含在&lt;code&gt;HelmRelease&lt;/code&gt;状态和&lt;code&gt;gotk_resource_info&lt;/code&gt; Prometheus 指标中。&lt;/p&gt;&lt;p&gt;当使用&lt;code&gt;OCIRepository&lt;/code&gt;作为&lt;code&gt;HelmRelease&lt;/code&gt;图表源时，控制器还将在 Kubernetes 事件和&lt;code&gt;HelmRelease&lt;/code&gt;状态中包含 Helm 图表工件的 OCI 摘要。&lt;/p&gt;&lt;h3 class="wp-block-heading" id="benchmark-results"&gt;基准测试结果&lt;a href="https://fluxcd.io/blog/2024/05/flux-v2.3.0/#benchmark-results"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;为了衡量掌舵控制器 GA 对现实世界的影响，我们建立了衡量平均生产时间 (MTTP) 的基准。 MTTP 基准衡量 Flux 将应用程序更改部署到生产中所需的时间。以下是在 GitHub 托管运行器（Ubuntu，16 核）上运行的基准测试结果：&lt;/p&gt;&lt;figure class="wp-block-table"&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;对象&lt;/th&gt;&lt;th&gt;类型&lt;/th&gt;&lt;th&gt;助焊剂成分&lt;/th&gt;&lt;th&gt;期间&lt;/th&gt;&lt;th&gt;最大内存&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;100&lt;/td&gt;&lt;td&gt;舵图&lt;/td&gt;&lt;td&gt;源控制器&lt;/td&gt;&lt;td&gt;25秒&lt;/td&gt;&lt;td&gt;40米&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;100&lt;/td&gt;&lt;td&gt;头盔释放&lt;/td&gt;&lt;td&gt;舵控制器&lt;/td&gt;&lt;td&gt;28秒&lt;/td&gt;&lt;td&gt;190米&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;500&lt;/td&gt;&lt;td&gt;舵图&lt;/td&gt;&lt;td&gt;源控制器&lt;/td&gt;&lt;td&gt;45秒&lt;/td&gt;&lt;td&gt;68米&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;500&lt;/td&gt;&lt;td&gt;头盔释放&lt;/td&gt;&lt;td&gt;舵控制器&lt;/td&gt;&lt;td&gt;2分45秒&lt;/td&gt;&lt;td&gt;250英里&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1000&lt;/td&gt;&lt;td&gt;舵图&lt;/td&gt;&lt;td&gt;源控制器&lt;/td&gt;&lt;td&gt;1分30秒&lt;/td&gt;&lt;td&gt;110米&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1000&lt;/td&gt;&lt;td&gt;头盔释放&lt;/td&gt;&lt;td&gt;舵控制器&lt;/td&gt;&lt;td&gt;8米1秒&lt;/td&gt;&lt;td&gt;490米&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;与 Flux v2.2 相比，该版本中 helm-controller 的内存消耗改善了很多，尤其是当集群注册了数百个 CRD 时。在 Flux v2.2 中，Kubernetes v1.28 上的 helm-controller 内存不足，仅注册了 100 个 CRD。而在 Kubernetes v1.29 上的 Flux v2.3 中，它可以毫无问题地处理 500 多个 CRD。鉴于这些结果，建议将 Kubernetes 控制平面升级到 v1.29，将 Flux 升级到 v2.3。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="image-update-automation-improvements"&gt;图像更新自动化改进&lt;a href="https://fluxcd.io/blog/2024/05/flux-v2.3.0/#image-update-automation-improvements"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt; &lt;code&gt;ImageUpdateAutomation&lt;/code&gt; API 已升级至 v1beta2，并且图像自动化控制器已进行重构以增强协调过程。&lt;/p&gt;&lt;p&gt; v1beta2 API 附带了一个新的&lt;a href="https://fluxcd.io/flux/components/image/imageupdateautomations/#message-template"&gt;模板模型&lt;/a&gt;，可用于在控制器更新 Git 存储库中的图像引用时自定义提交消息。提交模板支持对包含策略标记的文件所做的更改的旧值和新值。此外，提交消息包含在控制器发出的 Kubernetes 事件中，从而可以更好地了解自动化过程。&lt;/p&gt;&lt;p&gt; &lt;code&gt;ImageUpdateAutomation&lt;/code&gt; API 现在支持使用新字段&lt;a href="https://fluxcd.io/flux/components/image/imageupdateautomations/#policyselector"&gt;&lt;code&gt;.spec.policySelector&lt;/code&gt;&lt;/a&gt;中的标签选择器选择&lt;code&gt;ImagePolicies&lt;/code&gt; 。&lt;/p&gt;&lt;h3 class="wp-block-heading" id="migration-to-v1beta2-template-model"&gt;迁移到 v1beta2 模板模型&lt;a href="https://fluxcd.io/blog/2024/05/flux-v2.3.0/#migration-to-v1beta2-template-model"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;要迁移到 v1beta2 API，请将&lt;code&gt;ImageUpdateAutomation&lt;/code&gt;资源中的&lt;code&gt;apiVersion&lt;/code&gt;字段更新为&lt;code&gt;image.toolkit.fluxcd.io/v1beta2&lt;/code&gt; ，并修改&lt;code&gt;messageTemplate&lt;/code&gt;以使用&lt;code&gt;Changed&lt;/code&gt;模板数据。&lt;/p&gt;&lt;p&gt;示例模板：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;&lt;strong&gt;apiVersion&lt;/strong&gt; : image.toolkit.fluxcd.io/v1beta2 &lt;strong&gt;kind&lt;/strong&gt; : ImageUpdateAutomation &lt;strong&gt;metadata&lt;/strong&gt; : &lt;strong&gt;name&lt;/strong&gt; : &amp;lt;automation-name&amp;gt; &lt;strong&gt;spec&lt;/strong&gt; : &lt;strong&gt;git&lt;/strong&gt; : &lt;strong&gt;commit&lt;/strong&gt; : &lt;strong&gt;messageTemplate&lt;/strong&gt; : |-&lt;em&gt;
&lt;/em&gt;&lt;em&gt; Automated image update&lt;/em&gt;&lt;em&gt;                
&lt;/em&gt;&lt;em&gt; Changes:&lt;/em&gt;&lt;em&gt; {{ range .Changed.Changes -}}&lt;/em&gt;&lt;em&gt; - {{ .OldValue }} -&amp;gt; {{ .NewValue }}&lt;/em&gt;&lt;em&gt; {{ end -}}&lt;/em&gt;&lt;em&gt;        
&lt;/em&gt;&lt;em&gt; Files:&lt;/em&gt;&lt;em&gt; {{ range $filename, $_ := .Changed.FileChanges -}}&lt;/em&gt;&lt;em&gt; - {{ $filename }}&lt;/em&gt;&lt;em&gt; {{ end -}}&lt;/em&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;生成的提交消息示例：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;Automated image update Changes: - docker.io/nginx:1.25.4 -&amp;gt; docker.io/nginx:1.25.5 - docker.io/org/app:1.0.0 -&amp;gt; docker.io/org/app:1.0.1 Files: - apps/my-app/deployment.yaml&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有关更多示例和详细信息，请参阅&lt;a href="https://fluxcd.io/flux/components/image/imageupdateautomations/#message-template"&gt;ImageUpdateAutomation 文档&lt;/a&gt;。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="signatures-verification-with-notation"&gt;使用符号进行签名验证&lt;a href="https://fluxcd.io/blog/2024/05/flux-v2.3.0/#signatures-verification-with-notation"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt; Flux 源控制器现在支持验证使用&lt;a href="https://github.com/notaryproject/notation"&gt;Notation&lt;/a&gt;签名的 OCI 工件的真实性（CNCF Notary 项目）。&lt;/p&gt;&lt;p&gt;要启用Notation签名验证，请参阅以下文档：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; &lt;a href="https://fluxcd.io/flux/components/source/helmcharts/#notation"&gt;HelmChart 验证&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://fluxcd.io/flux/components/source/ocirepositories/#notation"&gt;OCI存储库验证&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;此外，Flux CLI 现在支持使用&lt;code&gt;flux create secret notation&lt;/code&gt;命令通过 Notation 信任策略生成 Kubernetes 机密。&lt;/p&gt;&lt;p&gt;非常感谢 Microsoft 为该功能的开发做出的贡献！&lt;/p&gt;&lt;h2 class="wp-block-heading" id="terraform-provider-improvements"&gt; Terraform 提供程序改进&lt;a href="https://fluxcd.io/blog/2024/05/flux-v2.3.0/#terraform-provider-improvements"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt; &lt;a href="https://github.com/fluxcd/terraform-provider-flux"&gt;Flux Terraform 提供程序&lt;/a&gt;经过了重大重构，现在支持 Flux 组件的气隙引导、漂移检测和校正，以及升级和恢复集群内 Flux 控制器的能力。从这个版本开始，该提供程序与 OpenTofu 完全兼容。&lt;/p&gt;&lt;p&gt; &lt;a href="https://github.com/fluxcd/terraform-provider-flux?tab=readme-ov-file#guides" rel="noreferrer noopener" target="_blank"&gt;提供程序&lt;/a&gt;&lt;a href="https://github.com/fluxcd/terraform-provider-flux?tab=readme-ov-file#guides"&gt;文档&lt;/a&gt;已更新，包含示例和详细的使用说明。&lt;/p&gt;&lt;h4 class="wp-block-heading"&gt;新维护者&lt;/h4&gt;&lt;p&gt;我们非常高兴地宣布&lt;a href="https://github.com/swade1987"&gt;Steven Wade&lt;/a&gt;已加入 Flux 项目，作为 Terraform 提供商的维护者。 Steven 一直是 Flux 项目的长期贡献者，我们很高兴他能加入！&lt;/p&gt;&lt;h2 class="wp-block-heading" id="controllers-improvements"&gt;控制器改进&lt;a href="https://fluxcd.io/blog/2024/05/flux-v2.3.0/#controllers-improvements"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Flux &lt;code&gt;Kustomization&lt;/code&gt; API 获得两个可选字段&lt;code&gt;.spec.namePrefix&lt;/code&gt;和&lt;code&gt;.spec.nameSuffix&lt;/code&gt; ，可用于指定要添加到所有托管资源名称中的前缀和后缀。&lt;/li&gt;&lt;li&gt; kustomize-controller 现在支持&lt;code&gt;--feature-gates=StrictPostBuildSubstitutions=true&lt;/code&gt;标志，启用后，如果文件中声明了没有默认值的变量但输入变量中缺少默认值，则构建后替换将失败。&lt;/li&gt;&lt;li&gt;通知控制器&lt;code&gt;Receiver&lt;/code&gt; API 已扩展为支持&lt;a href="https://fluxcd.io/flux/components/notification/receivers/#cdevents"&gt;CDEvents&lt;/a&gt; 。&lt;/li&gt;&lt;li&gt; &lt;code&gt;OCIRepository&lt;/code&gt; API 已得到扩展，支持&lt;a href="https://fluxcd.io/flux/components/source/ocirepositories/#semverfilter-example"&gt;semver 过滤&lt;/a&gt;。&lt;/li&gt;&lt;li&gt; &lt;code&gt;HelmChart&lt;/code&gt; API v1 附带了一个新的可选字段&lt;a href="https://fluxcd.io/flux/components/source//helmcharts/#ignore-missing-values-files"&gt;&lt;code&gt;.spec.ignoreMissingValuesFiles&lt;/code&gt;&lt;/a&gt; 。&lt;/li&gt;&lt;/ul&gt;&lt;h2 class="wp-block-heading" id="cli-improvements"&gt; CLI 改进&lt;a href="https://fluxcd.io/blog/2024/05/flux-v2.3.0/#cli-improvements"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;boostrap 功能已扩展为支持&lt;a href="https://fluxcd.io/flux/installation/bootstrap/oracle-vbs-git-repositories/"&gt;Oracle VBS&lt;/a&gt;存储库。&lt;/li&gt;&lt;li&gt; &lt;a href="https://fluxcd.io/flux/installation/bootstrap/azure-devops/#bootstrap-using-ssh-keys"&gt;Azure DevOps&lt;/a&gt;存储库的 boostrap 过程已更新，支持 SSH RSA SHA-2 密钥。&lt;/li&gt;&lt;li&gt; &lt;code&gt;flux bootstrap&lt;/code&gt;命令获得一个新标志&lt;code&gt;--ssh-hostkey-algos&lt;/code&gt; ，可用于指定用于 SSH 连接的主机密钥算法。&lt;/li&gt;&lt;li&gt; &lt;code&gt;flux bootstrap&lt;/code&gt;和&lt;code&gt;flux install&lt;/code&gt;命令现在支持&lt;code&gt;--registry-creds&lt;/code&gt;标志，该标志可用于为存储在私有注册表中的容器映像生成映像拉取机密。&lt;/li&gt;&lt;li&gt;添加了一个新命令&lt;code&gt;flux envsubst&lt;/code&gt; ，可用于复制 Flux &lt;code&gt;Kustomization&lt;/code&gt;构建后替换的行为。&lt;/li&gt;&lt;li&gt; &lt;code&gt;flux create source oci&lt;/code&gt;命令现在支持&lt;code&gt;--verify-subject&lt;/code&gt;和&lt;code&gt;--verify-issuer&lt;/code&gt;进行共同签名无密钥验证。&lt;/li&gt;&lt;li&gt;添加了用于管理 HelmChart 对象的新命令： &lt;code&gt;flux create|delete|export source chart&lt;/code&gt; 。&lt;/li&gt;&lt;/ul&gt;&lt;h2 class="wp-block-heading" id="breaking-changes-and-deprecations"&gt;重大变更和弃用&lt;a href="https://fluxcd.io/blog/2024/05/flux-v2.3.0/#breaking-changes-and-deprecations"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;已弃用的字段已从&lt;code&gt;HelmRelease&lt;/code&gt; v2 API 中删除：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; &lt;code&gt;.spec.chart.spec.valuesFile&lt;/code&gt;替换为&lt;code&gt;.spec.chart.spec.valuesFiles&lt;/code&gt;&lt;/li&gt;&lt;li&gt; &lt;code&gt;.spec.postRenderers.kustomize.patchesJson6902&lt;/code&gt;替换为&lt;code&gt;.spec.postRenderers.kustomize.patches&lt;/code&gt;&lt;/li&gt;&lt;li&gt; &lt;code&gt;.spec.postRenderers.kustomize.patchesStrategicMerge&lt;/code&gt;替换为&lt;code&gt;.spec.postRenderers.kustomize.patches&lt;/code&gt;&lt;/li&gt;&lt;li&gt; &lt;code&gt;.status.lastAppliedRevision&lt;/code&gt;替换为&lt;code&gt;.status.history.chartVersion&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;以下 API 已被弃用，并将在未来版本中删除：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; &lt;code&gt;HelmRelease&lt;/code&gt; v2beta2 和 v2beta1&lt;/li&gt;&lt;li&gt; &lt;code&gt;HelmChart&lt;/code&gt; v1beta2 和 v1beta1&lt;/li&gt;&lt;li&gt; &lt;code&gt;HelmRepository&lt;/code&gt; v1beta2 和 v1beta1&lt;/li&gt;&lt;li&gt; &lt;code&gt;ImageUpdateAutomation&lt;/code&gt; v1beta1&lt;/li&gt;&lt;/ul&gt;&lt;h2 class="wp-block-heading" id="supported-versions"&gt;支持的版本&lt;a href="https://fluxcd.io/blog/2024/05/flux-v2.3.0/#supported-versions"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Flux v2.0 已结束生命周期，不再受支持。&lt;/p&gt;&lt;p&gt; Flux v2.3 支持以下 Kubernetes 版本：&lt;/p&gt;&lt;figure class="wp-block-table"&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;分配&lt;/th&gt;&lt;th&gt;版本&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;库伯内斯&lt;/td&gt;&lt;td&gt;1.28、1.29、1.30&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;开放式班次&lt;/td&gt;&lt;td&gt;4.15&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt; Flux v2.3 是第一个在 OpenShift 上进行端到端测试的版本。非常感谢&lt;a href="https://www.replicated.com/"&gt;Replicated&lt;/a&gt;通过按需 OpenShift 集群赞助 Flux 项目。有关如何在 OpenShift 上引导 Flux 的更多信息，请参阅&lt;a href="https://fluxcd.io/flux/installation/configuration/openshift/"&gt;OpenShift 安装指南&lt;/a&gt;。&lt;/p&gt;&lt;h4 class="wp-block-heading"&gt;企业支持&lt;/h4&gt;&lt;p&gt;请注意，CNCF Flux 项目仅提供对 Kubernetes 最新三个次要版本的支持。&lt;/p&gt;&lt;p&gt; &lt;a href="https://control-plane.io/enterprise-for-flux-cd/"&gt;ControlPlane&lt;/a&gt;等为 Flux 提供企业支持的供应商提供了与旧版本 Kubernetes 和 OpenShift 的向后兼容性。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="installing-or-upgrading-flux"&gt;安装或升级 Flux&lt;a href="https://fluxcd.io/blog/2024/05/flux-v2.3.0/#installing-or-upgrading-flux"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;要安装 Flux，请查看我们的&lt;a href="https://fluxcd.io/flux/installation/"&gt;安装&lt;/a&gt;和&lt;a href="https://fluxcd.io/flux/get-started/"&gt;入门&lt;/a&gt;指南。&lt;/p&gt;&lt;p&gt;要将 Flux 从&lt;code&gt;v2.x&lt;/code&gt;升级到&lt;code&gt;v2.3.0&lt;/code&gt; ，请&lt;a href="https://fluxcd.io/flux/installation/#bootstrap-upgrade"&gt;重新运行&lt;code&gt;flux bootstrap&lt;/code&gt;&lt;/a&gt;或使用&lt;a href="https://github.com/fluxcd/flux2/tree/main/action"&gt;Flux GitHub Action&lt;/a&gt; 。&lt;/p&gt;&lt;p&gt;要升级 Git 中存储的清单中的 API：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;升级之前，请确保&lt;code&gt;HelmRelease&lt;/code&gt; v2beta2 YAML 清单未使用已弃用的字段。搜索&lt;code&gt;valuesFile&lt;/code&gt;并将其替换为&lt;code&gt;valuesFiles&lt;/code&gt; ，将&lt;code&gt;patchesJson6902&lt;/code&gt;和&lt;code&gt;patchesStrategicMerge&lt;/code&gt;替换为&lt;code&gt;patches&lt;/code&gt; 。&lt;/li&gt;&lt;li&gt;提交更改并将其推送到 Git 存储库，然后等待 Flux 协调更改。&lt;/li&gt;&lt;li&gt;使用 Flux v2.3 版本升级集群上的控制器和 CRD。&lt;/li&gt;&lt;li&gt;将&lt;code&gt;HelmRelease&lt;/code&gt;资源的&lt;code&gt;apiVersion&lt;/code&gt;字段更新为&lt;code&gt;helm.toolkit.fluxcd.io/v2&lt;/code&gt; 。&lt;/li&gt;&lt;li&gt;将&lt;code&gt;HelmRepository&lt;/code&gt;资源的&lt;code&gt;apiVersion&lt;/code&gt;字段更新为&lt;code&gt;source.toolkit.fluxcd.io/v1&lt;/code&gt; 。&lt;/li&gt;&lt;li&gt;将&lt;code&gt;ImageUpdateAutomation&lt;/code&gt;资源的&lt;code&gt;apiVersion&lt;/code&gt;字段更新为&lt;code&gt;image.toolkit.fluxcd.io/v1beta2&lt;/code&gt; 。&lt;/li&gt;&lt;li&gt;提交更改并将其推送到 Git 存储库。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;更改清单中的 API 版本可以逐步完成。建议不要延迟此过程，因为已弃用的版本将在 6 个月后删除。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="whats-next-for-flux"&gt; Flux 的下一步是什么？&lt;a href="https://fluxcd.io/blog/2024/05/flux-v2.3.0/#whats-next-for-flux"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt; Flux 项目的下一个里程碑是 v2.4，计划于 2024 年第三季度发布，并将重点关注图像自动化 API 和 S3 兼容的存储 API。有关即将推出的功能和改进的更多详细信息，请参阅&lt;a href="https://fluxcd.io/roadmap/"&gt;Flux 项目路线图&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;在 2022 年推出 OCI Artifacts 后，用户反复询问我们如何改进与 Git 完全解耦的 Flux 运行的用户体验。作为回应，我们提出了一个&lt;code&gt;flux bootstrap oci&lt;/code&gt;命令和一个新的 Terraform/OpenTofu 提供程序的提案，该提供程序依赖容器注册表作为 Kubernetes 集群所需状态的统一数据存储。 RFC 可以在&lt;a href="https://github.com/fluxcd/flux2/pull/4749"&gt;Fluxcd/flux2#4749&lt;/a&gt;找到，我们欢迎社区的反馈。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="over-and-out"&gt;完了，走吧&lt;a href="https://fluxcd.io/blog/2024/05/flux-v2.3.0/#over-and-out"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如果您有任何疑问，或者只是喜欢您所读到的内容并希望参与其中，请通过以下几种方式联系我们：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;参加我们&lt;a href="https://fluxcd.io/community/#meetings"&gt;即将举行的开发会议&lt;/a&gt;。&lt;/li&gt;&lt;li&gt;加入&lt;a href="https://lists.cncf.io/g/cncf-flux-dev"&gt;Flux 邮件列表&lt;/a&gt;，让我们知道您需要什么帮助。&lt;/li&gt;&lt;li&gt;在&lt;a href="https://slack.cncf.io/"&gt;CNCF Slack&lt;/a&gt;上的 #flux 频道与我们交谈。&lt;/li&gt;&lt;li&gt;加入&lt;a href="https://github.com/fluxcd/flux2/discussions" rel="noreferrer noopener" target="_blank"&gt;规划讨论&lt;/a&gt;。&lt;/li&gt;&lt;li&gt;&lt;a href="https://twitter.com/fluxcd"&gt;在 Twitter 上关注 Flux&lt;/a&gt; ，或加入&lt;a href="https://www.linkedin.com/groups/8985374/"&gt;Flux LinkedIn 群组&lt;/a&gt;。 &lt;/li&gt;&lt;/ul&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Thu, 16 May 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/05/17/announcing-flux-2-3-ga/</guid></item><item><title>【Platform engineering at KubeCon + CloudNativeCon Europe 2024 – a recap】KubeCon + CloudNativeCon Europe 2024 的平台工程 – 回顾</title><link>https://www.cncf.io/blog/2024/05/17/platform-engineering-at-kubecon-cloudnativecon-europe-2024-a-recap/</link><description>&lt;p&gt;&lt;em&gt;社区帖子最初由 Atulpriya Sharma 发布在&lt;a href="https://tag-app-delivery.cncf.io/blog/platform-engineering-at-kubecon-eu-2024-recap/"&gt;TAG App Delivery 的博客&lt;/a&gt;上&lt;/em&gt;&lt;/p&gt;&lt;p&gt;就在一个月前，Kubernetes 用户和专家齐聚巴黎光之城，参加 KubeCon 欧洲版。 &lt;a href="https://www.cncf.io/blog/2024/03/28/missed-kubecon-cloudnativecon-europe-2024-heres-everything-you-need-to-know/"&gt;本次 KubeCon 是近年来规模最大的一次，共有超过 12,000 名现场与会者&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;尽管围绕人工智能和生成人工智能有很多关注和讨论，但平台工程也得到了很好的体现。这是第一个“平台工程日”，爱好者们有专门的空间来讨论与平台工程相关的任何事情。&lt;/p&gt;&lt;p&gt;在这篇 KubeCon 2024 回顾文章中，我将重点介绍 KubeCon 上进行的平台工程演讲和讨论。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="tag-app-delivery--wg-platforms-at-kubecon-eu"&gt; KubeCon EU 的 TAG 应用程序交付和工作组平台&lt;a href="https://tag-app-delivery.cncf.io/blog/platform-engineering-at-kubecon-eu-2024-recap/#tag-app-delivery--wg-platforms-at-kubecon-eu"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt; TAG App Delivery 致力于支持与交付云原生应用程序相关的项目和计划，包括构建、打包、部署、管理和操作它们。 TAG 的举措之一是平台工作组，该工作组致力于支持、改进和推进平台工程举措。&lt;/p&gt;&lt;p&gt;在 KubeCon EU 上，我们在展位上组织了会谈和会议，以提高人们对该小组工作的认识。您可以在我们&lt;a href="https://tag-app-delivery.cncf.io/blog/tag-app-delivery-at-kubecon-eu-2024/"&gt;之前的博客文章&lt;/a&gt;中阅读更多相关信息。如果您是 TAG App Delivery 或平台工作组的新手，您可以观看以下演讲以了解更多信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://sched.co/1YhhV"&gt;通过模因探索应用程序交付的深度&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://sched.co/1ZiQB"&gt;TAG 应用交付平台工作组更新&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 class="wp-block-heading" id="platform-engineering-day"&gt;平台工程日&lt;a href="https://tag-app-delivery.cncf.io/blog/platform-engineering-at-kubecon-eu-2024-recap/#platform-engineering-day"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;首先，我将分享第一届平台工程日的精彩演讲。我记得进入大厅的时候有点晚，看到这里已经满了。人们站着听演讲。 &lt;/p&gt;&lt;figure class="wp-block-image"&gt;&lt;img alt="平台工程日 - KubeCon EU 2024" src="https://tag-app-delivery.cncf.io/images/platform-engineering-day-kubecon-eu-2024.png" /&gt;&lt;/figure&gt;&lt;h3 class="wp-block-heading" id="talks"&gt;会谈&lt;a href="https://tag-app-delivery.cncf.io/blog/platform-engineering-at-kubecon-eu-2024-recap/#talks"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt; &lt;a href="https://colocatedeventseu2024.sched.com/event/1ZiQB"&gt;TAG 应用交付平台工作组更新&lt;/a&gt;– 来自 Krumware 的 Colin Griffin 概述了平台工作组的含义以及如何参与。&lt;/li&gt;&lt;li&gt; &lt;a href="https://colocatedeventseu2024.sched.com/event/1YFdf/sometimes-lipstick-is-exactly-what-a-pig-needs-abby-bangser-syntasso-whitney-lee-vmware"&gt;有时候，口红正是猪所需要的！&lt;/a&gt; – Syntasso 的 Abby Bangser 和 VMware 的 Whitney Lee 强调了投资用户界面和采用内部开发人员平台的重要性，甚至比完善底层技术更重要。&lt;/li&gt;&lt;li&gt; &lt;a href="https://colocatedeventseu2024.sched.com/event/1YFe7/beyond-platform-thinking-at-ritchie-brothers-build-things-no-one-expects-in-a-place-no-one-expect-bryan-oliver-thoughtworks-ranbir-chawla-ritchie-bros"&gt;Ritchie Brothers 的超越平台思维 – 在无人期望的地方构建无人期望的事物&lt;/a&gt;– Thoughtworks 的 Bryan Oliver 和 Ritchie Bros 的 Ranbir Chawla 讨论 Ritchie Bros 如何将 Kubernetes 的功能扩展到交付平台之外，以驱动其核心企业。&lt;/li&gt;&lt;li&gt; &lt;a href="https://colocatedeventseu2024.sched.com/event/1YFek/cl-lightning-talk-blueprints-of-innovation-engineering-paved-paths-for-a-user-friendly-developer-platform-ahmed-bebars-the-new-york-times"&gt;《创新蓝图：为用户友好的开发者平台设计铺平的道路&lt;/a&gt;》——《纽约时报》的艾哈迈德·贝巴尔斯 (Ahmed Bebars) 对云中平台工程的细微差别提供了宝贵的见解，为在其组织中实施战略提供了蓝图。&lt;/li&gt;&lt;li&gt; &lt;a href="https://colocatedeventseu2024.sched.com/event/1YFfY/building-a-platform-engineering-api-layer-with-kcp-marvin-beckers-kubermatic-gmbh"&gt;使用 kcp 构建平台工程 API 层&lt;/a&gt;– 来自 Kubermatic GmbH 的 Marvin Beckers 讨论了 kcp 如何通过所有内部服务的全局控制平面来增强平台工程。&lt;/li&gt;&lt;li&gt; &lt;a href="https://colocatedeventseu2024.sched.com/event/1YFgi/cl-lightning-talk-breaking-the-mold-unveiling-anti-architectural-patterns-in-platform-as-a-product-vamshi-krishna-samudrala-american-airlines"&gt;打破常规：揭开平台产品中的反架构模式&lt;/a&gt;——来自美国航空的 Vamshi Krishna Samudrala——讨论了设计和实施有效平台的复杂场景。&lt;/li&gt;&lt;li&gt; &lt;a href="https://colocatedeventseu2024.sched.com/event/1YFgu/cl-lightning-talk-empowering-giants-guide-your-enterprise-with-cnoe-in-operational-tech-choices-engin-diri-pulumi"&gt;赋能巨头：通过 CNOE 指导您的企业进行运营技术选择&lt;/a&gt;– 来自 Pulumi 的 Engin Diri 介绍了 CNOE 框架，并探讨了参与如何使组织有利于克服挑战。&lt;/li&gt;&lt;li&gt; &lt;a href="https://colocatedeventseu2024.sched.com/event/1YFhD/designing-for-success-ux-principles-for-internal-developer-platforms-kirsten-schwarzer-octopus-deploy"&gt;成功设计：内部开发人员平台的用户体验原则&lt;/a&gt;– 来自 Octopus Deploy 的 Kirsten Schwarzer 展示了实用的用户体验原则和工具，您可以使用它们来设计开发人员喜欢使用的内部开发人员平台 (IDP)。&lt;/li&gt;&lt;li&gt; &lt;a href="https://colocatedeventseu2024.sched.com/event/1YFhg/boosting-developer-platform-teams-with-product-thinking-samantha-coffman-spotify"&gt;通过产品思维增强开发者平台团队&lt;/a&gt;——来自 Spotify 的 Samantha Coffman 谈论了采用产品方法构建平台的有效性。&lt;/li&gt;&lt;li&gt; &lt;a href="https://colocatedeventseu2024.sched.com/event/1YFi2/building-an-ai-powered-paved-road-platform-with-cloud-native-oss-todd-ekenstam-avni-sharma-intuit"&gt;使用云原生 OSS 构建人工智能驱动的铺路平台&lt;/a&gt;– 来自 Intuit 的 Todd Ekenstam 和 Avni Sharma 分享了关于如何将开放应用程序模型、Istio、Karpenter、Argo Rollouts 等开源项目集成和扩展的见解构建您的人工智能原生应用平台。&lt;/li&gt;&lt;li&gt; &lt;a href="https://colocatedeventseu2024.sched.com/event/1YFif/unlocking-innovation-how-natwest-bank-uses-cloud-native-tools-to-deliver-platform-as-a-product-chris-plank-natwest-group-derik-evangelista-syntasso"&gt;解锁创新：NatWest 银行如何使用云原生工具将平台作为产品交付&lt;/a&gt;- Natwest Group 的 Chris Plank 和 Syntasso 的 Derik Evangelista 讨论他们如何专注于 GitOps 方法并整合一系列工具，使平台用户能够拥有无缝的开发人员经验。&lt;/li&gt;&lt;li&gt; &lt;a href="https://colocatedeventseu2024.sched.com/event/1YFj9/to-k8s-and-beyond-maturing-your-platform-engineering-initiative-nicki-watt-opencredo"&gt;To K8S and Beyond – 成熟您的平台工程计划&lt;/a&gt;– 来自 OpenCredo 的 Nicki Watt 分享了关于如何将最近发布的 CNCF 平台成熟度模型用作工具箱的一部分来帮助指导组织进行思考的见解。&lt;/li&gt;&lt;/ul&gt;&lt;h3 class="wp-block-heading" id="panel-discussions"&gt;小组讨论&lt;a href="https://tag-app-delivery.cncf.io/blog/platform-engineering-at-kubecon-eu-2024-recap/#panel-discussions"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt; &lt;a href="https://colocatedeventseu2024.sched.com/event/1YFjf/panel-navigating-the-path-to-platform-engineering-excellence-a-comprehensive-guide-cortney-nickerson-kubeshop-william-rizzo-suse-abby-bangser-syntasso-areti-panou-sap-se-aparna-subramanian-shopify"&gt;小组讨论：通往卓越平台工程之路：综合指南&lt;/a&gt;– 来自 Kubeshop 的 Cortney Nickerson；来自 SUSE 的 William Rizzo；来自 Syntasso 的 Abby Bangser； SAP SE 的 Areti Panou 和 Shopify 的 Aparna Subramanian 讨论了确保有效平台工程的可行步骤，并剖析了任何想要投资自己平台的人的关键考虑因素。&lt;/li&gt;&lt;li&gt; &lt;a href="https://colocatedeventseu2024.sched.com/event/1YFgB/panel-the-platform-rock-paper-scissors-build-adopt-buy-jorge-lainfiesta-independent-contributor-leena-mooneeram-chainalysis-victor-araujo-wolt-jinhong-brejnholt-saxo-bank-edgaras-petovradzius-lego-group"&gt;小组讨论：石头剪刀布平台：构建、采用、购买&lt;/a&gt;– Jorge Lainfiesta，独立贡献者；来自 Chainaanalysis 的 Leena Mooneeram；来自 Wolt 的 Victor Araujo；盛宝银行的 Jinhong Brejnholt 和乐高的 Edgaras Petovradžius 分享了他们在构建平台基础时如何处理预算、锁定和许可以做出决策的想法&lt;/li&gt;&lt;/ul&gt;&lt;h2 class="wp-block-heading" id="talks-and-panel-discussions-at-kubecon"&gt;KubeCon 上的演讲和小组讨论&lt;a href="https://tag-app-delivery.cncf.io/blog/platform-engineering-at-kubecon-eu-2024-recap/#talks-and-panel-discussions-at-kubecon"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;虽然平台工程是 KubeCon 2024 上最热门的同期活动之一，但在其他同期活动中也进行了演讲和小组讨论，例如&lt;a href="https://colocatedeventseu2024.sched.com/overview/type/BackstageCon"&gt;BackstageCon&lt;/a&gt; 、 &lt;a href="https://colocatedeventseu2024.sched.com/overview/type/AppDeveloperCon"&gt;AppDevCon&lt;/a&gt; 、 &lt;a href="https://colocatedeventseu2024.sched.com/overview/type/ArgoCon"&gt;ArgoCon&lt;/a&gt; 、 &lt;a href="https://colocatedeventseu2024.sched.com/overview/type/Multi-TenancyCon"&gt;MultitenancyCon&lt;/a&gt;和&lt;a href="https://commons.openshift.org/gatherings/kubecon-24-mar-19/"&gt;OpenShift Commons&lt;/a&gt;等。&lt;/p&gt;&lt;p&gt;以下是所有这些内容的汇总：&lt;/p&gt;&lt;h3 class="wp-block-heading" id="day-1---march-20"&gt;第一天 – 3 月 20 日&lt;a href="https://tag-app-delivery.cncf.io/blog/platform-engineering-at-kubecon-eu-2024-recap/#day-1---march-20"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt; &lt;a href="https://kccnceu2024.sched.com/event/1YeLy/bloombergs-journey-to-a-multi-cluster-workflow-orchestration-platform-yao-lin-reinhard-tartler-bloomberg"&gt;Bloomberg 的多集群工作流编排平台之旅&lt;/a&gt;– Bloomberg 的 Yao Lin 和 Reinhard Tartler 谈论了他们如何调查相关项目以及我们从 Karmada、OCM 和其他公司那里获得的灵感来构建他们自己的编排平台。&lt;/li&gt;&lt;li&gt; &lt;a href="https://kccnceu2024.sched.com/event/1YeML/building-a-large-scale-multi-cloud-multi-region-saas-platform-with-kubernetes-controllers-sebastien-guilloux-elastic"&gt;使用 Kubernetes 控制器构建大规模多云多区域 SaaS 平台&lt;/a&gt;– 来自 Elastic 的 Sébastien Guilloux 描述了由数百个 Kubernetes 集群组成的架构，并讨论了我们在构建多云、多区域的过程中所面临的挑战。区域平台。&lt;/li&gt;&lt;li&gt; &lt;a href="https://kccnceu2024.sched.com/event/1YeMJ/simplified-inner-and-outer-cloud-native-developer-loops-oleg-selajev-atomicjar-alice-gibbons-diagrid"&gt;简化的内部和外部云原生开发人员循环&lt;/a&gt;- 来自 AtomicJar 的 Oleg Šelajev 和来自 Diagrid 的 Alice Gibbons 探索通过平台工程和多语言方法简化和提高开发人员生产力的工具。&lt;/li&gt;&lt;li&gt; &lt;a href="https://kccnceu2024.sched.com/event/1YeMm/building-ai-ready-platforms-symphony-for-developer-and-platform-engineer-thomas-vitale-systematic-lize-raes-langchain4j"&gt;构建 AI 就绪平台 – Symphony 为开发人员和平台工程师&lt;/a&gt;– 来自 Systematic 的 Thomas Vitale 和来自 LangChain4j 的 Lize Raes 分享详细信息，以弥合平台工程师和开发人员之间的差距，专注于使您的平台适应 AI，同时提供流畅的开发人员体验。&lt;/li&gt;&lt;li&gt; &lt;a href="https://kccnceu2024.sched.com/event/1YeMj/state-of-platform-maturity-in-the-norwegian-public-sector-hans-kristian-flaatten-norwegian-labor-and-welfare-administration"&gt;挪威公共部门的平台成熟度状况&lt;/a&gt;– 挪威劳工和福利局的 Hans Kristian Flaatten 使用新发布的 CNCF 平台工程成熟度模型来衡量其平台的成熟度以及他们选择的技术。&lt;/li&gt;&lt;li&gt; &lt;a href="https://kccnceu2024.sched.com/event/1YeNB/cultural-shifts-fostering-a-chaos-first-mindset-in-platform-engineering-sayan-mondal-harness-raj-vadheraju-fis"&gt;文化转变：在平台工程中培养混沌优先的思维模式&lt;/a&gt;– Harness 的 Sayan Mondal 和 FIS 的 Raj Vadheraju 谈论组织如何通过利用混沌优先原则来增强其平台工程实践。&lt;/li&gt;&lt;/ul&gt;&lt;h3 class="wp-block-heading" id="day-2---march-21"&gt;第 2 天 – 3 月 21 日&lt;a href="https://tag-app-delivery.cncf.io/blog/platform-engineering-at-kubecon-eu-2024-recap/#day-2---march-21"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt; &lt;a href="https://kccnceu2024.sched.com/event/1YeOr/unlocking-new-platform-experiences-with-open-interfaces-thomas-vitale-systematic-mauricio-salaboy-salatino-diagrid"&gt;通过开放接口解锁新的平台体验&lt;/a&gt;- 来自 Systematic 的 Thomas Vitale 和来自 Diagrid 的 Mauricio “Salaboy” Salatino 探索现有 CNCF 项目，以实现构建平台的端到端体验。&lt;/li&gt;&lt;li&gt; &lt;a href="https://kccnceu2024.sched.com/event/1YePF/keeping-the-bricks-flowing-the-lego-groups-approach-to-platform-engineering-for-manufacturing-mads-hogstedt-danquah-jeppe-lund-andersen-the-lego-group"&gt;保持砖块流动：乐高集团的制造平台工程方法&lt;/a&gt;- 来自乐高集团的 Mads Høgstedt Danquah 和 Jeppe Lund Andersen 分享了乐高集团如何构建平台和产品来应对 24/7 生产、有限互联网等限制的故事连接性、高弹性和低延迟。&lt;/li&gt;&lt;li&gt; &lt;a href="https://kccnceu2024.sched.com/event/1YePC/why-kubernetes-is-inappropriate-for-platforms-and-how-to-make-it-better-stefan-schimanski-upbound-mangirdas-judeikis-cast-ai-sebastian-scheele-kubermatic"&gt;为什么 Kubernetes 不适合平台，以及如何让它变得更好&lt;/a&gt;。 – 来自 Upbound 的 Stefan Schimanski； Cast AI 的 Mangirdas Judeikis；来自 Kubermatic 的 Sebastian Scheele – 扩展 Kube，调整其架构以更好地适合平台。&lt;/li&gt;&lt;/ul&gt;&lt;h3 class="wp-block-heading" id="day-3---march-22"&gt;第 3 天 – 3 月 22 日&lt;a href="https://tag-app-delivery.cncf.io/blog/platform-engineering-at-kubecon-eu-2024-recap/#day-3---march-22"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt; &lt;a href="https://kccnceu2024.sched.com/event/1YeRp/rapid-idp-capability-development-and-automated-testing-at-autodesk-jesse-sanford-greg-haynes-autodesk"&gt;Autodesk 的快速 IDP 能力开发和自动化测试&lt;/a&gt;– Autodesk 的 Jesse Sanford 和 Greg Haynes 展示了 IDPBuilder 如何在几分钟内建立 CNOE 参考架构，而无需使用 Docker 作为预依赖项。&lt;/li&gt;&lt;li&gt; &lt;a href="https://kccnceu2024.sched.com/event/1YeSk/search-at-shopify-highly-available-platform-for-data-resilience-and-compliance-leila-vayghan-shopify"&gt;Shopify 中的搜索：实现数据弹性和合规性的高度可用平台&lt;/a&gt;– 来自 Shopify 的 Leila Vayghan 展示了如何使用 Kafka 每分钟按顺序实时索引数百万个文档以实现高可用性&lt;/li&gt;&lt;/ul&gt;&lt;h3 class="wp-block-heading" id="panel-discussions-and-on-booth-talks"&gt;小组讨论和展位演讲&lt;a href="https://tag-app-delivery.cncf.io/blog/platform-engineering-at-kubecon-eu-2024-recap/#panel-discussions-and-on-booth-talks"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;em&gt;你看，KubeCon 上有很多关于平台工程的讨论！&lt;/em&gt;&lt;/p&gt;&lt;p&gt;除了主会议的演讲外，还有小组讨论、其他同期活动和 TAG 应用交付展位的演讲。虽然我们没有所有这些演讲的视频，但有一些关于 Backstage 的自助服务基础设施和 Kubernetes 开发人员体验模式等有趣的视频。&lt;/p&gt;&lt;p&gt; Lian、Thomas、Mauricio 和 Atul 参加了 RedHat OpenCommons 同期活动中的小组讨论 –&lt;a href="https://www.youtube.com/watch?v=PfrUObDwvyQ"&gt;从平台工程到开发人员成功&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;根据我参加 KubeCons 的经验，这一定是平台工程方面最多产的会议之一。会谈气氛热烈，平台工作组活跃，展位上热闹非凡。&lt;/p&gt;&lt;p&gt; &lt;a href="https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/program/cfp/?__hstc=60185074.5d25bd08ea8bd0f0a60545f2fb92f1f9.1715953632039.1715953632039.1715953632039.1&amp;amp;__hssc=60185074.1.1715953632040&amp;amp;__hsfp=4046427330"&gt;KubeCon NA 2024 的 CFP 已经开放&lt;/a&gt;，请分享您关于平台工程的有趣建议，让世界了解您正在做的令人惊叹的事情。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="platform-coffee-meetups---paris-edition"&gt;平台咖啡聚会 – 巴黎版&lt;a href="https://tag-app-delivery.cncf.io/blog/platform-engineering-at-kubecon-eu-2024-recap/#platform-coffee-meetups---paris-edition"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;我非常喜欢平台工作组的一件事是我们在 KubeCons 期间组织的面对面&lt;strong&gt;咖啡聚会&lt;/strong&gt;。我参加的第一个活动是在芝加哥 KubeCon，我喜欢这个概念。&lt;/p&gt;&lt;p&gt;欢迎任何人和每个人一边喝咖啡一边讨论有关平台和平台工程的任何事情。了解平台工程领域正在发生的事情并会见其背后的杰出人士是一次奇妙的经历。&lt;/p&gt;&lt;p&gt; https://platform.twitter.com/embed/Tweet.html?dnt=false&amp;amp;embedId=twitter-widget-0&amp;amp;features=%3D%3D&amp;amp;frame=false&amp;amp;hideCard=false&amp;amp;hideThread=false&amp;amp;id=1770713303167193378&amp;amp;lang=en&amp;amp;origin=https%3A%2F%2Ftag-app -delivery.cncf.io%2Fblog%2Fplatform-engineering-at-kubecon-eu-2024-recap%2F&amp;amp;sessionId=99d0eadedd28b624d0802d83457bddbaac00f3f4&amp;amp;主题=light&amp;amp;widgetsVersion=2615f7e52b7e0%3A1702314776716&amp;amp;宽度=550像素&lt;/p&gt;&lt;p&gt;这次我们举办了四天，每天都有大量的人前来。对于牛角面包、巧克力面包和牛奶咖啡，我们都讨论了从平台的实际含义到平台成功标准的所有内容 - 这些都是一些富有洞察力的讨论。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="key-takeaways"&gt;要点&lt;a href="https://tag-app-delivery.cncf.io/blog/platform-engineering-at-kubecon-eu-2024-recap/#key-takeaways"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这是我第二次亲自参加 KubeCon，也是第四次参加。这也是我第二次亲自见到平台工作组的成员。虽然我们每月都会通过电话联系并致力于令人兴奋的事情，例如&lt;a href="https://tag-app-delivery.cncf.io/whitepapers/platforms/"&gt;平台白皮书&lt;/a&gt;、&lt;a href="https://tag-app-delivery.cncf.io/whitepapers/platform-eng-maturity-model/"&gt;平台成熟度模型&lt;/a&gt;和正在进行的&lt;a href="https://github.com/cncf/tag-app-delivery/issues/553"&gt;平台即产品论文&lt;/a&gt;，但亲自会面会更好。&lt;/p&gt;&lt;p&gt;此外，还要向 TAG 应用程序交付和 WG 平台的成员表示大力的感谢，他们从 KubeCon 宣布在 KubeCon 期间过度活跃的那一天起就提供了帮助。此外，首届平台工程日取得了巨大成功，房间里挤满了人，证明了平台工程的重要性和兴趣。&lt;/p&gt;&lt;p&gt;除了成为平台工程小​​组的一员之外，我还听到了一些关于人们如何在平台工程迷宫中导航的有趣演讲。我对关于定制衡量平台和人工智能就绪平台成功的讨论特别感兴趣。我非常喜欢讨论的一件事是对开发人员体验及其更大的生产力方面的关注。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="join-us"&gt;加入我们！ &lt;a href="https://tag-app-delivery.cncf.io/blog/platform-engineering-at-kubecon-eu-2024-recap/#join-us"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作为这个有趣且知识性团体的一员，我可以保证这是最具互动性和帮助性的团体之一。无论您是刚刚了解平台工程还是多年专业构建平台，我们都欢迎您加入平台工作组，帮助我们塑造平台的未来。&lt;/p&gt;&lt;p&gt;加入我们的&lt;a href="https://cloud-native.slack.com/archives/C020RHD43BP"&gt;Slack WG-Platforms&lt;/a&gt;即可开始使用。只需留言自我介绍并让我们知道您的需求。团队中的某人将帮助您开始 🙂 &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Thu, 16 May 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/05/17/platform-engineering-at-kubecon-cloudnativecon-europe-2024-a-recap/</guid></item><item><title>【Cloud strategies for the best cost and results: public vs private vs hybrid cloud】实现最佳成本和结果的云策略：公共云、私有云、混合云</title><link>https://www.cncf.io/blog/2024/05/16/cloud-strategies-for-the-best-cost-and-results-public-vs-private-vs-hybrid-cloud/</link><description>&lt;p&gt;&lt;em&gt;会员帖子最初发布于&lt;a href="https://www.netris.io/cloud-strategies-for-the-best-cost-and-results-public-vs-private-vs-hybrid-cloud/"&gt;Netris 的博客&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;IDC 表示，在典型企业在云资源上超支&lt;a href="https://www.idc.com/getdoc.jsp?containerId=US50654223&amp;amp;pageType=PRINTFRIENDLY"&gt;20% 到 30%&lt;/a&gt;的时代，找到控制云成本的方法至关重要。&lt;/p&gt;&lt;p&gt;但究竟如何控制云支出呢？通常，有关此主题的建议侧重于进行小规模更改，例如调整云服务器实例的大小或利用成本较低的数据存储层 - 这些举措可以为您节省一些钱，但通常不会带来最大的整体效果你的钱。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;如果您确实想优化云支出，则需要通过评估整体云架构来进行更高层次的思考。&lt;/strong&gt;您可能会发现进行架构更改（例如&lt;strong&gt;将部分或全部工作负载迁移到私有云&lt;/strong&gt;）是在不影响性能的情况下减少基础设施支出的最佳方法。&lt;/p&gt;&lt;p&gt;考虑到这一现实，这里对云架构与成本和性能策略的调整进行了分析。我们从成本角度讨论不同云架构的优缺点，同时还解释云基础设施规模和成熟度等因素如何影响您实现云成本优化的方式。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;公共云架构与私有云架构的云成本控制&lt;/h3&gt;&lt;p&gt;让我们首先讨论为什么公共云环境和私有云环境之间的云成本往往会有所不同。&lt;/p&gt;&lt;p&gt;主要原因（如果您熟悉云平台的基础知识，您可能会知道）&lt;strong&gt;是不同的成本模型适用于公共云和私有云&lt;/strong&gt;。在公共云中，您通常为您使用的基础设施和服务按需付费，无需前期资本支出。这意味着您在公共云中的所有费用都是运营支出。&lt;/p&gt;&lt;p&gt;相比之下，私有云要求您预先支付基础设施费用。此后，您将需要一些持续的运营费用来执行服务维护和监控等任务，但大部分成本是资本支出，而不是运营支出。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;私有云如何实现云成本优化&lt;/h3&gt;&lt;p&gt;事实上，公有云允许企业按需付费，无需承担资本支出，这一事实通常被描述为公有云的关键优势之一——如果避免对基础设施的长期承诺是一种选择，那么事实确实如此。您公司的优先级，或者如果您的基础设施容量要求难以预测或不一致，以至于购买自己的服务器没有意义。&lt;/p&gt;&lt;p&gt;然而，从长远来看，公共云的成本往往更高，特别是对于基础设施使用需求稳定的组织而言。事实上，公有云提供商要求您持续支付每月账单，这意味着如果您使用公有云足够长且足够稳定，您迟早会达到公有云资源支出超过预期的水平。您需要花费成本来构建同等的私有云。到那时，您就开始在公共云中亏损。&lt;/p&gt;&lt;p&gt; SaaS 供应商 37Signals 的例子就说明了这一点。正如该公司首席技术官 David Heinemeier Hansson &lt;a href="https://world.hey.com/dhh/our-cloud-exit-has-already-yielded-1m-year-in-savings-db358dea"&gt;在博客中解释的&lt;/a&gt;那样，将工作负载从公有云移回本地后，该公司的基础设施支出大幅减少——从每月约 180,000 美元降至不到 80,000 美元。该公司还花费了约 50 万美元购买新服务器，以支持其遣返后的工作负载，但正如 Hansson 指出的那样，这笔费用将在几个月内通过运营支出的减少而收回。从长远来看，他预计此举将在五年内节省 1000 万美元。&lt;/p&gt;&lt;p&gt; 37Signals 并不孤单。在 Netris，我们与通过迁移到私有云而实现了显着成本节省的企业合作，例如&lt;a href="https://www.netris.io/acceleratxr/"&gt;AcceleratXR&lt;/a&gt;和&lt;a href="https://www.netris.io/aarki-case-study/"&gt;Aarki&lt;/a&gt; ，这两家公司都报告在采用私有云后云支出减少了 90%。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;云成本控制和SaaS利润率&lt;/h3&gt;&lt;p&gt;当然，37Signals 的经验并不意味着每个公司都应该从公共云中撤出以节省资金。但这提醒我们为什么 SaaS 供应商特别应该考虑进行此类架构更改。&lt;/p&gt;&lt;p&gt;毕竟，如果您从事 SaaS 业务，云基础设施成本不仅仅是资产负债表上的一项支出。它们直接影响您产品的定价，因为您需要将它们纳入向客户收取的费用中。如果云支出占据了您总收入的很大一部分，您的利润率将受到严格限制。&lt;/p&gt;&lt;p&gt;例如，假设您每月从 SaaS 应用程序中获得 200,000 美元的收入，但您花费 100,000 美元在公共云中托管该应用程序。您的利润立即低于 50%，而且这是在考虑开发和交付产品所需的所有额外费用之前的情况。&lt;/p&gt;&lt;p&gt;鉴于 SaaS 供应商通常的&lt;a href="https://news.crunchbase.com/saas/improving-gross-profit-margin-bhasin-allied/#:~:text=High%2Dquality%20SaaS%20businesses%20have,be%20a%20cause%20for%20concern."&gt;目标是接近 90% 的利润&lt;/a&gt;，如果成本过高，严重依赖公共云基础设施可能会造成严重后果。这实际上意味着 SaaS 供应商最终会转售云基础设施（无法加价，因为他们的客户不会为此支付额外费用），而不是能够专注于销售实际的 SaaS 产品。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;为什么公共云有时很有意义&lt;/h3&gt;&lt;p&gt;总的来说，值得注意的是，在评估云支出时，盈利能力并不是一切。一些企业可能仍然希望利用公共云，即使其成本远高于私有云。&lt;/p&gt;&lt;p&gt;例如，正如 Sara Wang 和 Martin Casado 在阐述他们所谓的“&lt;a href="https://a16z.com/the-cost-of-cloud-a-trillion-dollar-paradox/"&gt;万亿美元悖论&lt;/a&gt;”时指出的那样，公共云是新初创公司的“显而易见的选择”。如果您是一家专注于增长和产品开发的小公司，那么能够在公共云基础设施上托管工作负载的便利性超过了控制云支出的好处——无论如何，这对于新公司来说可能很低。&lt;/p&gt;&lt;p&gt;同样，基础设施容量需求差异很大（超过 20% 左右）的公司可能会发现公共云是更好的选择，因为它可以在必要时提供额外容量的访问，而无需对其做出永久承诺。&lt;/p&gt;&lt;p&gt;但在大多数其他情况下，每月云支出较高且容量要求相对一致的公司可能会发现，通过私有云，他们的支出更少，并实现了更多价值。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;混合云选项&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;我们应该注意到，公共云与私有云并不是一个二元决定。有一个中间地带 - 混合云 - 可以为某些组织提供两全其美的方案。&lt;/p&gt;&lt;p&gt;当组织选择混合云架构时，他们会同时使用公共云和私有或本地资源。这种方法使他们能够在有意义的情况下从公共云中受益，同时还享受私有云的成本优化优势。&lt;/p&gt;&lt;p&gt;例如，如果您的某些工作负载的容量要求差异很大，您可以将它们托管在公共云中，而将其他工作负载保留在私有云中。或者，您可以使用混合云策略，大部分时间在私有云中运行工作负载，但如果容量需求超出私有基础设施的能力，则将它们“&lt;a href="https://www.techtarget.com/searchcloudcomputing/definition/cloud-bursting"&gt;突发&lt;/a&gt;”到公共云中。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;云可管理性怎么样？&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;公共云与私有云讨论的最后一个问题很重要：&lt;strong&gt;可管理性&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;即使人们意识到私有云往往更具成本效益，他们也可能不愿意采用它们，因为他们担心设置和管理私有云的工作量太大。在公共云中，您可以有效地将基础设施管理以及配置和调配的许多方面外包给云提供商，而在私有云中，所有工作都由您承担。&lt;/p&gt;&lt;p&gt;十年前，这可能是避免使用私有云（包括本地和托管数据中心设置）的一个原因。然而，事实上，私有云工具和平台近年来已经显着成熟，以至于创建和管理私有云环境和工作负载通常感觉与在公共云中工作非常相似。 Rancher、MAAS 和 Harvester 等开源解决方案使构建和管理具有类似云体验的私有基础设施的计算层成为可能。您可以使用 IaC 工具来简化私有云中的配置，就像在公共云中一样。 Netris 等工具允许您以类似云的方式管理私有云和混合云网络，就像在公共云环境中一样轻松。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;如果是 2014 年而不是 2024 年，那么就有理由认为私有云的麻烦超过了成本节省。但现在情况已不再如此。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;结论：要降低云成本，请从正确的架构开始&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;可以肯定的是，采取小步骤来优化云服务的配置是减少云支出的一种方法 - 您应该采取这些步骤来尽可能地降低云成本。&lt;/p&gt;&lt;p&gt;但从长远来看，要全面削减云成本，最有效的一个步骤就是选择正确的云架构。对于当今的许多企业和用例来说，私有（或在某些情况下，混合）云可提供最低的总成本 - 并且得益于现代私有云工具，节省成本不会以牺牲可管理性为代价。&lt;/p&gt;&lt;p&gt;&lt;em&gt;想要了解更多关于为您的成本管理目标选择正确的云架构的信息，或者云或网络策略的任何其他方面的信息？&lt;/em&gt;&lt;a href="https://www.netris.io/demo/"&gt;&lt;em&gt;联系我们&lt;/em&gt;&lt;/a&gt;&lt;em&gt;。我们提供免费咨询电话，并提供云基础设施专家的建议，他们将倾听您的需求，并提供最适合他们的策略的观点&lt;/em&gt;。 &lt;/p&gt;&lt;p&gt;&lt;a href="https://www.netris.io/cloud-strategies-for-the-best-cost-and-results-public-vs-private-vs-hybrid-cloud/"&gt;&lt;/a&gt;&lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Wed, 15 May 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/05/16/cloud-strategies-for-the-best-cost-and-results-public-vs-private-vs-hybrid-cloud/</guid></item><item><title>【Advanced usage of the NVIDIA Device Plugin】NVIDIA 设备插件的高级用法</title><link>https://www.cncf.io/blog/2024/05/15/advanced-usage-of-the-nvidia-device-plugin/</link><description>&lt;p&gt;&lt;em&gt;成员帖子最初由工程师 Keegan McCallum 发表在&lt;a href="https://superorbital.io/blog/gpu-kubernetes-nvidia-advanced-troubleshooting/"&gt;SuperOrbital 博客&lt;/a&gt;上&lt;/em&gt;&lt;/p&gt;&lt;h2 class="wp-block-heading" id="introduction"&gt;介绍&lt;/h2&gt;&lt;p&gt;在上一篇文章中，我们探讨了使用 NVIDIA 设备插件来管理 Kubernetes 集群中的 GPU 资源的基础知识。如果您还没有阅读过，我们强烈建议您从&lt;a href="https://superorbital.io/blog/gpu-kubernetes-nvidia-device-plugin/"&gt;第 1 部分开始：使用 NVIDIA 设备插件在 Kubernetes 中使用 GPU 加速机器学习，&lt;/a&gt;以深入了解设备插件的基本概念和安装过程。&lt;/p&gt;&lt;p&gt;虽然 NVIDIA 设备插件简化了 Kubernetes 中的 GPU 管理，但您在实施过程中可能会遇到一些常见问题。为了支持不同的工作负载、最大限度地提高 GPU 利用率并在各种环境中使用设备插件，自定义&lt;code&gt;values.yaml&lt;/code&gt;文件是重要的一步。&lt;/p&gt;&lt;p&gt;最后，我们将讨论&lt;code&gt;nvidia-device-plugin&lt;/code&gt;的一些限制，以及在生产工作负载中使用它的一些注意事项。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="troubleshooting-common-issues"&gt;常见问题故障排除&lt;/h2&gt;&lt;h3 class="wp-block-heading" id="code-running-in-container-isnt-recognizing-gpu-resources"&gt;在容器中运行的代码无法识别 GPU 资源&lt;/h3&gt;&lt;p&gt;首先，如果可能的话，请确保使用&lt;a href="https://hub.docker.com/r/nvidia/cuda"&gt;官方 NVIDIA docker 映像&lt;/a&gt;之一作为您的基础映像。这些图像负责连接您在代码中实际使用 cuda 所需的一切。如果使用像 pytorch 这样的框架，它们通常会有&lt;a href="https://hub.docker.com/r/pytorch/pytorch/tags"&gt;cuda 图像标签&lt;/a&gt;，您应该利用它们与底层 GPU 干净地集成。&lt;/p&gt;&lt;p&gt;如果您无法使用官方 docker 映像之一，则需要熟悉&lt;a href="https://github.com/NVIDIA/nvidia-container-toolkit"&gt;nvidia-container-toolkit&lt;/a&gt;并确保已正确配置。从容器内部检查&lt;code&gt;NVIDIA_VISIBLE_DEVICES&lt;/code&gt;和&lt;code&gt;NVIDIA_DRIVER_CAPABILITIES&lt;/code&gt;环境变量的值可以帮助诊断问题，有关环境变量的完整文档可&lt;a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/1.14.5/docker-specialized.html#environment-variables-oci-spec"&gt;在此处&lt;/a&gt;找到。&lt;/p&gt;&lt;p&gt;最后，如果其他一切看起来都正确，并且您使用的是官方基础映像，则问题可能是代码本身。尝试运行&lt;a href="https://superorbital.io/blog/gpu-kubernetes-nvidia-device-plugin/"&gt;第 1 部分&lt;/a&gt;中的最小示例，看看 cuda 加速是否在您的集群上运行以实现最小工作负载。如果是，并且您使用的是官方基础映像，请仔细检查您正在使用的框架的文档，以确保您已正确配置应用程序以利用 cuda 进行加速。&lt;/p&gt;&lt;h3 class="wp-block-heading" id="debugging-common-xid-errors"&gt;调试常见的 XID 错误&lt;/h3&gt;&lt;p&gt;来自 NVIDIA 驱动程序的 XID 错误会打印到操作系统的内核日志或事件日志中。 XID 错误代码表示发生了一般 GPU 错误，最常见的原因是驱动程序对 GPU 的编程不正确或发送到 GPU 的命令损坏。该错误可能表示硬件问题、NVIDIA 软件问题或应用程序问题。可以使用&lt;a href="https://github.com/NVIDIA/dcgm-exporter"&gt;dcgm-exporter&lt;/a&gt;和名为&lt;code&gt;DCGM_FI_DEV_XID_ERRORS&lt;/code&gt;的指标来监控这些。以下是您可能遇到的 3 个常见错误代码以及如何解决这些错误：&lt;/p&gt;&lt;ol&gt;&lt;li&gt; **XID 13：图形引擎异常。 **这可能是硬件问题。&lt;a href="https://docs.nvidia.com/deploy/gpu-debug-guidelines/index.html#running-field-diag"&gt;运行现场诊断&lt;/a&gt;进行确认，如果不是硬件问题，则可能是您的应用程序代码存在问题。 NVIDIA&lt;a href="https://docs.nvidia.com/deploy/xid-errors/index.html"&gt;在此&lt;/a&gt;提供了一些故障排除指南。&lt;/li&gt;&lt;li&gt; &lt;strong&gt;XID 31：GPU 内存页面错误&lt;/strong&gt;。这很可能是应用程序代码的问题。如果在更新&lt;code&gt;nvidia-device-plugin&lt;/code&gt;或节点上的其他驱动程序后出现此问题（并且应用程序未更改），请回滚并&lt;a href="https://docs.nvidia.com/deploy/gpu-debug-guidelines/index.html#reporting-gpu-issue"&gt;提交问题&lt;/a&gt;，因为问题出在 NVIDIA 方面。&lt;/li&gt;&lt;li&gt; &lt;strong&gt;XID 48：双位 ECC 错误&lt;/strong&gt;。如果此错误代码后跟 XID 63（A100 上的行重新映射记录事件）或 XID 64（A100 上的行重新映射失败），则排空/封锁节点，等待所有工作完成，然后重置 GPU ) 通过重新启动 VM 来报告 XID。否则&lt;a href="https://docs.nvidia.com/deploy/gpu-debug-guidelines/index.html#running-field-diag"&gt;运行现场诊断&lt;/a&gt;以收集更多信息。 &lt;/li&gt;&lt;/ol&gt;&lt;h3 class="wp-block-heading" id="oom-issues-when-running-multiple-workloads-on-a-single-gpu"&gt;在单个 GPU 上运行多个工作负载时的 OOM 问题&lt;/h3&gt;&lt;p&gt;当运行多个访问同一 GPU 的 Pod 时，您可能会遇到 GPU 内存不足错误的问题。例如，如果使用 pytorch，它将看起来像这样：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;RuntimeError: CUDA out of memory. Tried to allocate X MiB (GPU X; X GiB total capacity; X GiB already allocated; X MiB free; X cached)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这几乎总是由于使用时间切片来共享对 GPU 的访问而不是我们将在下一节中讨论的其他 GPU 共享选项之一。时间切片不提供任何内存隔离，因此，如果您的工作负载具有较高的内存要求，或者尝试利用最大可用内存量，那么时间切片实际上并不适合您。时间切片对于运行许多不需要 GPU 同时发挥全部功能的小型工作负载非常有用，但所有工作负载都需要适合内存并在应用程序端配置为仅使用一定量的内存。如果使用 dcgm-exporter 将 GPU 指标导出到 prometheus，则可以使用&lt;code&gt;DCGM_FI_DEV_MEM_COPY_UTIL&lt;/code&gt;指标来监控给定 GPU 的内存使用情况。使用 MIG 或 MPS 将使您能够以类似于 kubernetes 内存隔离的方式有效地为工作负载提供内存隔离。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="advanced-configuration"&gt;高级配置&lt;/h2&gt;&lt;h3 class="wp-block-heading" id="sharing-access-to-gpus"&gt;共享对 GPU 的访问&lt;/h3&gt;&lt;p&gt;我们在&lt;a href="https://superorbital.io/blog/gpu-kubernetes-nvidia-device-plugin/"&gt;第 1 部分&lt;/a&gt;中介绍了 GPU 共享的基础知识，因此，如果您还没有了解，那么值得一读，以深入了解可用的不同选项。在这篇文章中，我将深入探讨每种模式可用的一些更高级的配置选项以及您可能想要利用它们的原因。&lt;/p&gt;&lt;p&gt;首先，MIG 的配置相当简单，共享策略才是真正重要的。请注意，虽然您可以同时使用时间切片和 MIG，但不支持同时使用 MPS 和 MIG。&lt;/p&gt;&lt;p&gt;对于 MPS 和时间切片，您可能会对以下几个配置选项感兴趣：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; &lt;code&gt;renameByDefault&lt;/code&gt; ：默认情况下禁用此选项，其目的是允许集群的最终用户区分共享 GPU 和完整 GPU。启用后，每个资源都会以&lt;code&gt;&amp;lt;resource-name&amp;gt;.shared&lt;/code&gt;名称进行广告，而不仅仅是&lt;code&gt;&amp;lt;resource-name&amp;gt;&lt;/code&gt; 。&lt;/li&gt;&lt;li&gt; &lt;code&gt;failRequestsGreaterThanOne&lt;/code&gt; ：此字段的目的是提高人们的认识，即请求多个 GPU 副本不会导致对 GPU 的任何更多访问。例如，请求 2 个具有时间切片的 GPU 的 Pod 所获得的计算量不会是请求 1 个 GPU 的 Pod 的两倍。对于 MPS，需要注意的是，该字段始终设置为 true，如在&lt;a href="https://github.com/NVIDIA/k8s-device-plugin/commit/95be08329d6ea5aca582748080deaa2dad964c19"&gt;此提交&lt;/a&gt;中所示。这里的基本原理是，在 MPS 下实际将多个 GPU 分区分配给单个工作负载的逻辑是不明确的，尤其是当节点上有多个 GPU 时。将来可能会支持这一点，但目前我建议在所有情况下都将此字段设置为 true，因为对于 MPS，您没有选择，而对于时间切片，它使最终用户的操作更加直观请求 GPU 时您的集群。&lt;/li&gt;&lt;li&gt; &lt;code&gt;resources&lt;/code&gt; ：虽然我们已经介绍了使用资源的基本示例，但值得注意的是，此选项采用列表作为输入，允许您指定多个资源的配置。对于 MPS，目前唯一支持的资源是&lt;code&gt;nvidia.com/gpu&lt;/code&gt; ，并且仅支持完整 GPU（无 MIG）。对于时间切片，您可以引用使用&lt;code&gt;mixed&lt;/code&gt; MIG 策略配置节点时出现的任何资源类型。例如，可以指定&lt;code&gt;nvidia.com/mig-1g.5gb&lt;/code&gt;来为 GPU 的特定 MIG 分区设置时间切片。&lt;/li&gt;&lt;/ul&gt;&lt;h3 class="wp-block-heading" id="per-node-configurations"&gt;每个节点的配置&lt;/h3&gt;&lt;p&gt;对于具有单一 GPU 节点类型的简单集群，这些配置选项将为您带来很大帮助。但您最终可能会遇到这样的情况：在扩展时希望使用不同的选项配置不同类型的节点。这可以使用&lt;code&gt;values.yaml&lt;/code&gt;中的&lt;code&gt;map&lt;/code&gt;选项，以及在各个节点上设置标签&lt;code&gt;nvidia.com/device-plugin.config&lt;/code&gt;来选择配置。默认情况下， &lt;code&gt;values.yaml&lt;/code&gt;中的&lt;code&gt;config.map.default&lt;/code&gt;将用于所有节点，但您可以设置其他配置，如下所示：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;&lt;strong&gt;config&lt;/strong&gt; : &lt;strong&gt;map&lt;/strong&gt; : &lt;strong&gt;default&lt;/strong&gt; : |- &lt;strong&gt;version&lt;/strong&gt; : v1 &lt;strong&gt;flags&lt;/strong&gt; : &lt;strong&gt;migStrategy&lt;/strong&gt; : none &lt;strong&gt;mig-single&lt;/strong&gt; : |- &lt;strong&gt;version&lt;/strong&gt; : v1 &lt;strong&gt;flags&lt;/strong&gt; : &lt;strong&gt;migStrategy&lt;/strong&gt; : single &lt;strong&gt;mig-mixed&lt;/strong&gt; : |- &lt;strong&gt;version&lt;/strong&gt; : v1 &lt;strong&gt;flags&lt;/strong&gt; : &lt;strong&gt;migStrategy&lt;/strong&gt; : mixed&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后，例如使用以下命令为给定节点设置&lt;code&gt;mig-mixed&lt;/code&gt;策略（节点组/自动缩放组可以将此标签设置为生产环境中 terraform 模块的一部分）：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;kubectl label nodes &amp;lt;node-name&amp;gt; –-overwrite nvidia.com/device-plugin.config=mig-mixed&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该标签可以在插件启动之前或之后应用，以获得在节点上应用的所需配置，它不需要在启动时就存在。任何时候发生变化，插件都会更新以开始提供所需的配置。如果它设置为无效值，它将跳过重新配置并使用最新的工作配置。如果未设置，它将回退到使用默认配置值。&lt;/p&gt;&lt;h3 class="wp-block-heading" id="enabling--for-automatic-node-labels"&gt;启用&lt;code&gt;gpu-feature-discovery&lt;/code&gt;以实现自动节点标签&lt;/h3&gt;&lt;p&gt;自&lt;code&gt;v0.12.0&lt;/code&gt;起， &lt;code&gt;nvidia-device-plugin&lt;/code&gt; helm Chart 支持将 NVIDIA 的&lt;code&gt;[gpu-feature-discovery(GFD)](https://github.com/NVIDIA/gpu-feature-discovery)&lt;/code&gt; Helm Chart 部署为子图。 GFD 可以自动生成标签，让您能够识别给定节点上可用的 GPU 集。要启用它，请在&lt;code&gt;values.yaml&lt;/code&gt;文件中将&lt;code&gt;gfd.enabled&lt;/code&gt;设置为&lt;code&gt;true&lt;/code&gt; 。这还将部署&lt;a href="https://github.com/kubernetes-sigs/node-feature-discovery"&gt;节点特征发现 (NFD)，&lt;/a&gt;因为它是 GFD 的先决条件。如果您已经在集群上部署了 NFD（通常通过 node-feature-discovery 命名空间中的 Daemonset），您可以通过在 helm 值中将&lt;code&gt;nfd.enabled&lt;/code&gt;设置为&lt;code&gt;false&lt;/code&gt;来避免重新部署它。使用时间切片时，将设置一个附加标签以允许识别副本数量，并且产品名称将带有&lt;code&gt;-SHARED&lt;/code&gt;后缀，以允许工作负载区分共享和非共享工作负载，完整详细信息可&lt;a href="https://github.com/NVIDIA/k8s-device-plugin?tab=readme-ov-file#deploying-with-gpu-feature-discovery-for-automatic-node-labels"&gt;在此处&lt;/a&gt;获取。 &lt;/p&gt;&lt;h2 class="wp-block-heading" id="limitations-and-considerations-when-using-the-nvidia-device-plugin"&gt;使用 NVIDIA 设备插件时的限制和注意事项&lt;/h2&gt;&lt;h3 class="wp-block-heading" id="limited-health-monitoring"&gt;有限的健康监测&lt;/h3&gt;&lt;p&gt;NVIDIA 设备插件对运行状况检查的支持有限，并且&lt;code&gt;[node-problem-detector](https://github.com/kubernetes/node-problem-detector/issues/833)&lt;/code&gt;不支持。这意味着错误可能会被忽视并且难以诊断。 NVIDIA 在自述文件中指出了这一点，但这是一个相当大的差距，可能会导致挫败感。将 NVIDIA 的&lt;a href="https://github.com/NVIDIA/dcgm-exporter"&gt;dcgm-exporter&lt;/a&gt;与&lt;a href="https://prometheus.io/"&gt;prometheus&lt;/a&gt;结合使用是处理 GPU 监控和修复的最佳方法。例如，要监视&lt;a href="https://docs.nvidia.com/deploy/xid-errors/index.html#:~:text=Xid%20messages%20indicate%20that%20a,or%20a%20user%20application%20problem."&gt;XID 错误，&lt;/a&gt;您可以使用 promql 查询：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;DCGM_FI_DEV_XID_ERRORS &amp;gt; 0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; &lt;code&gt;DCGM_FI_DEV_XID_ERRORS&lt;/code&gt;指标的计量值将表示给定 GPU 设备的最新错误代码，发生错误时该值将不为零。有关可用指标的详尽列表，您可以参考&lt;a href="https://docs.nvidia.com/datacenter/dcgm/1.7/dcgm-api/group__dcgmFieldIdentifiers.html#group__dcgmFieldIdentifiers_1g225b100287df82d88405b7dc5a8af0d9"&gt;DCGM 文档的此页面&lt;/a&gt;。&lt;/p&gt;&lt;h3 class="wp-block-heading" id="static-partitioning-of-gpus"&gt; GPU 的静态分区&lt;/h3&gt;&lt;p&gt;GPU 只能预先分区，并且在 MPS 的情况下只能划分为 GPU 的相等部分。由于工作负载需求变化很大，因此很难充分利用 GPU。借助&lt;a href="https://github.com/nebuly-ai/k8s-device-plugin"&gt;Nebuly 的 nvidia-device-plugin 分支，&lt;/a&gt;您实际上可以通过定义可用内存量、要公开的副本数量以及资源命名内容（通常是引用资源量的名称）来更精细地分割 GPU。切片中的内存）。 &lt;a href="https://github.com/nebuly-ai/nos"&gt;nos&lt;/a&gt; （Nebuly OS）的&lt;a href="https://github.com/nebuly-ai/nos/blob/main/docs/en/docs/dynamic-gpu-partitioning/overview.md"&gt;动态 GPU 分区&lt;/a&gt;功能更进一步，让您无需预先配置分区，并根据集群上挂起和运行的 Pod 实时动态地对 GPU 进行分区。这允许 Pod 仅请求绝对必要的资源，而不是选择预定义的分区，从而提高 GPU 的总利用率。不幸的是，看起来&lt;a href="https://github.com/nebuly-ai/nos"&gt;nos&lt;/a&gt;已进入维护模式，并且在我看来，由于公司最近的转型，这不是维护人员的优先事项，因此不应针对新的生产部署对其进行评估。&lt;/p&gt;&lt;p&gt; NVIDIA 还在开发一个&lt;a href="https://github.com/NVIDIA/k8s-dra-driver"&gt;动态资源分配 (DRA)&lt;/a&gt;项目，该项目目前正在积极开发中，尚未适合生产，但值得密切关注，以便在黄金时段做好准备。 &lt;a href="https://github.com/grgalex/nvshare"&gt;nvshare&lt;/a&gt;看起来也是一个有趣的项目，它本质上允许时间切片，同时允许每个进程以有效的方式利用 GPU 的整个内存。这是一个新兴的开发领域，因此尚未准备好真正的最佳实践，但我将在第 3 部分中详细介绍 GPU 利用率方面的挑战以及一些试图解决这些挑战的尖端项目！&lt;/p&gt;&lt;h2 class="wp-block-heading" id="conclusion"&gt;结论&lt;/h2&gt;&lt;p&gt;高效的 GPU 管理对于在 Kubernetes 中运行机器学习和高性能计算工作负载的组织至关重要。 NVIDIA 设备插件为向容器公开和分配 GPU 资源提供了坚实的基础。通过了解常见的故障排除技术、探索 GPU 共享策略并考虑本文中讨论的限制和注意事项，您可以针对您的特定使用案例有效地配置 NVIDIA 设备插件。&lt;/p&gt;&lt;p&gt;随着GPU加速的需求不断增长，创新项目不断涌现，以解决GPU利用率的挑战，并提供更加动态和灵活的资源管理能力。我们将在第 3 部分中探讨一些挑战以及试图解决这些挑战的项目，敬请期待！&lt;/p&gt;&lt;h3 class="wp-block-heading" id="further-reading-and-resources"&gt;进一步阅读和资源&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://docs.google.com/document/d/1BNWqgx_SmZDi-va_V31v3DnuVwYnF2EmN7D-O_fB6Oo/edit#heading=h.bxuci8gx6hna"&gt;动态资源分配 (DRA) 文档&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/grgalex/nvshare/blob/main/grgalex-nvshare-presentation.pdf"&gt;nvshare 演示文稿 (PDF)&lt;/a&gt;&lt;/li&gt;&lt;li&gt; &lt;a href="https://docs.nvidia.com/datacenter/cloud-native/gpu-telemetry/latest/dcgm-exporter.html"&gt;dcgm-导出文档&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://docs.nvidia.com/deploy/gpu-debug-guidelines/index.html"&gt;GPU 调试指南&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Tue, 14 May 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/05/15/advanced-usage-of-the-nvidia-device-plugin/</guid></item><item><title>【Streamlining Cloud Native Community Group (CNCG) management: introducing new organizer forms】简化云原生社区组 (CNCG) 管理：引入新的组织者形式</title><link>https://www.cncf.io/blog/2024/05/14/streamlining-cloud-native-community-group-cncg-management-introducing-new-organizer-forms/</link><description>&lt;p&gt;有效的组织是在动态的社区团体管理世界中取得成功的关键。无论您领导的是一个以技术为中心的社区，还是一个以共同利益为中心的团体，拥有透明的流程可以让一切变得不同。因此，我们很高兴推出新的组织者表单，旨在简化和增强您成为&lt;a href="https://community.cncf.io/"&gt;云原生社区组&lt;/a&gt;(CNCG) 计划中的社区组织者的体验。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;新组织者形式背后的目的&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;当您请求新的章节或想要支持当前的章节时，这些新表格将使事情变得更加无缝和透明。通过预先收集重要信息，我们的目标是确保您拥有建立成功社区所需的资源。新表格将在请求者和 CNCF 之间的整个审核过程中提供清晰的沟通。&lt;/p&gt;&lt;p&gt;除了在您和 CNCF 之间创建一个透明的流程之外，它还允许志同道合的个人评论他们对新的或现有的章节合作的兴趣，这将使社区更加丰富。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;今天开始&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;准备好体验我们新组织者形式的好处了吗？前往&lt;a href="https://github.com/cncf/communitygroups/issues/new/choose"&gt;GitHub&lt;/a&gt;访问表单并开始您在云原生社区组中发展社区的旅程。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;我们一起工作吧&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;引入新的组织者形式标志着我们在支持和增强社区组织者能力的承诺方面向前迈出了重要一步。我们对这些形式所带来的机会感到兴奋，并期待与您合作，在 CNCF 内创建充满活力和繁荣的社区。 &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Mon, 13 May 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/05/14/streamlining-cloud-native-community-group-cncg-management-introducing-new-organizer-forms/</guid></item><item><title>【Announcing LitmusChaosCon 2024!】宣布 LitmusChaosCon 2024！</title><link>https://www.cncf.io/blog/2024/05/14/announcing-litmuschaoscon-2024/</link><description>&lt;p&gt;&lt;em&gt;LitmusChaos 社区领袖、CNCF 大使 Prithvi-Raj 的社区帖子&lt;/em&gt;&lt;/p&gt;&lt;figure class="wp-block-image"&gt;&lt;img alt="石蕊混沌会议" src="https://lh7-us.googleusercontent.com/oNIhMh2VQRxkwrPsEQpsAQQVUxWSrAigaLS6IuuxqjCQA6EOFoIXl68fwmfENZVaCeVW2lHl3Vsjeg-G-CkfnpWt59W8UjAknC_5w4y6O7ytQJJQAHavKiedK-MN8_lqbTIpjCD5CisR-mmgmh3eVdE" /&gt;&lt;/figure&gt;&lt;h3 class="wp-block-heading"&gt; &lt;a href="https://litmuschaos.io/"&gt;LitmusChaos&lt;/a&gt;社区很高兴地宣布召开首届社区会议&lt;a href="https://community.cncf.io/events/details/cncf-virtual-project-events-2024-hosted-by-cncf-presents-litmuschaoscon-virtual/"&gt;LitmusChaosCon 2024&lt;/a&gt; ，这是一场为期一天的虚拟会议，内容涉及 LitmusChaos 和混沌工程的所有内容，计划于 2024 年 9 月 12 日举行&lt;/h3&gt;&lt;p&gt;在您的日历上标记 2024 年 9 月 12 日，LitmusChaos 社区将宣布 LitmusChaosCon 即将举行的许多版本中的第一个版本，这是一个关于混沌工程所有内容的仅限社区的会议。&lt;/p&gt;&lt;p&gt;在第一版中，LitmusChaosCon 的目标是通过围绕&lt;a href="https://litmuschaos.io/"&gt;LitmusChaos&lt;/a&gt;工具的一系列令人兴奋的用户故事、贡献者故事、多样化的用例和演示、闪电演讲研讨会、与其他开源工具一起运行 LitmusChaos、更多混沌工程故事来吸引社区，弹性生态系统和混沌文化的最新发展为与会者提供了启动或成熟其混沌工程实践的宝贵见解。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;&lt;strong&gt;关于 LitmusChaosCon&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt; &lt;a href="https://community.cncf.io/events/details/cncf-virtual-project-events-2024-hosted-by-cncf-presents-litmuschaoscon-virtual/"&gt;LitmusChaosCon&lt;/a&gt;是一个围绕 LitmusChaos 和混沌工程所有内容的活动。它是 SRE、QA 工程师、开发人员、性能工程师和学生交流想法、经验、贡献故事和 LitmusChaos 使用的平台。如果您曾与 LitmusChaos 合作过，或者您打算采用混沌工程实践，那么您可以参加这次会议，并构建恢复力之旅。&lt;/p&gt;&lt;p&gt; LitmusChaosCon 今年的主题是“&lt;strong&gt;混沌工程社区会议&lt;/strong&gt;”，反映了混沌工程对于社区在快速发展的数字世界中实现弹性目标的重要性。&lt;/p&gt;&lt;p&gt;会议组织了来自混沌工程专家、供应商和从业者社区的论文征集 (CFP) 计划，以创建一系列令人兴奋的会议，通过这些会议，围绕最佳实践创造学习机会，以开始混沌工程并扩大规模有效地练习。&lt;/p&gt;&lt;p&gt;虚拟会议还举办了现场研讨会，提供运行混沌实验和与专家互动的实践经验。前几届研讨会都非常成功。&lt;/p&gt;&lt;p&gt;该活动适合所有角色，但 SRE、DevOps 工程师、性能工程师、开发人员、QA 工程师和学生特别感兴趣。对于第一场活动，我们希望有来自以下项目的参加者：LitmusChaos、Chaos Mesh、Keptn、Chaos Blade、Argo、Flux、Krkn、OpenTelementry。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;提交 LitmusChaosCon 2024 的演讲&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;会议正在接受演讲者提交的材料。如果您想在分组会议、闪电演讲、研讨会或小组讨论中分享您对混沌工程的专业知识或观点，现在就是您的机会。&lt;a href="https://sessionize.com/litmuschaoscon/"&gt;演讲者申请&lt;/a&gt;截止日期为 2024 年 6 月 23 日！&lt;/p&gt;&lt;p&gt;非常感谢&lt;a href="https://sessionize.com/"&gt;Sessionize&lt;/a&gt;主办今年会议的论文征集活动。&lt;/p&gt;&lt;p&gt;征文应包括：&lt;br /&gt; 1. 使用案例（预览 LitmusChaos 在您的环境中的部署方式、挑战以及成功之路）&lt;br /&gt; 2. 集成（预览 LitmusChaos 如何与其他 CNCF 工具集成或与您的基础设施集成），&lt;br /&gt; 3. 贡献故事（先睹为快，了解您作为社区成员或受训者如何为 LitmusChaos 做出贡献），&lt;br /&gt; 4. 社区故事（提供您从社区中学到的知识的先睹为快），&lt;br /&gt; 5. 操作（让您快速了解如何在您的环境中运行 LitmusChaos）&lt;/p&gt;&lt;p&gt;&lt;strong&gt;注册 LitmusChaosCon 2024&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;该会议仅以虚拟方式由 CNCF 支持，可免费参加， &lt;a href="https://community.cncf.io/events/details/cncf-virtual-project-events-2024-hosted-by-cncf-presents-litmuschaoscon-virtual/"&gt;注册现已开放&lt;/a&gt;。假设您是 SRE、开发人员、QA 工程师、DevOps 从业者、CTO、基础设施工程师、云架构师、产品经理或任何可以将弹性作为实践的角色。在这种情况下，本次会议适合您。&lt;/p&gt;&lt;p&gt;欲了解更多信息，请发送电子邮件至 prithvi.raj@harness.io&lt;/p&gt;&lt;p&gt;我们希望 9 月 12 日能在那里见到您！ ！&lt;/p&gt;&lt;p&gt;需要记住的重要日期：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;网站、注册和 CFP 开放：5 月 6 日当周&lt;/li&gt;&lt;li&gt;CFP 截止日期：6 月 24 日&lt;/li&gt;&lt;li&gt;程序委员会审查窗口：6 月 25 日至 7 月 8 日/活动主席构建时间表 7 月 8 日至 12 日&lt;/li&gt;&lt;li&gt;通知发言人：7 月 15 日&lt;/li&gt;&lt;li&gt;日程公布：7 月 17 日星期三&lt;/li&gt;&lt;li&gt;活动日期：9 月 12 日，星期四&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;加入 LitmusChaos 社区&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;想要获得查询、学习和 CFP 方面的帮助吗？加入 Slack 上的 LitmusChaos 社区。要加入 Slack 社区，请按照以下步骤操作！&lt;/p&gt;&lt;p&gt;&lt;br /&gt;步骤 1：使用以下链接加入 Kubernetes slack： &lt;a href="https://slack.k8s.io/"&gt;https://slack.k8s.io/&lt;br /&gt;&lt;/a&gt;步骤 2：加入 Kubernetes slack 上的#litmus 频道或加入 Kubernetes slack 后使用此链接： &lt;a href="https://slack.litmuschaos.io/"&gt;https://slack.litmuschaos.io/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;以下是一些重要的链接供您参考，&lt;br /&gt; LitmusChaos 网站： &lt;a href="https://litmuschaos.io/"&gt;https://litmuschaos.io/&lt;br /&gt;&lt;/a&gt; LitmusChaos GitHub 存储库： &lt;a href="https://github.com/litmuschaos/litmus"&gt;https://github.com/litmuschaos/litmus&lt;br /&gt;&lt;/a&gt; LitmusChaos 文档： &lt;a href="https://docs.litmuschaos.io/"&gt;https://docs.litmuschaos.io/&lt;br /&gt;&lt;/a&gt; LitmusChaos YouTube 频道： &lt;a href="https://www.youtube.com/channel/UCa57PMqmz_j0wnteRa9nCaw"&gt;https://www.youtube.com/channel/UCa57PMqmz_j0wnteRa9nCaw&lt;/a&gt; &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Mon, 13 May 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/05/14/announcing-litmuschaoscon-2024/</guid></item><item><title>【A step-by-step guide to securely upgrading your EKS clusters】安全升级 EKS 集群的分步指南</title><link>https://www.cncf.io/blog/2024/05/13/a-step-by-step-guide-to-securely-upgrading-your-eks-clusters/</link><description>&lt;p&gt;&lt;em&gt;会员帖子最初由 Stevie Caldwell 发表在&lt;a href="https://www.fairwinds.com/blog/guide-securely-upgrading-eks-clusters"&gt;Fairwinds 博客&lt;/a&gt;上&lt;/em&gt;&lt;/p&gt;&lt;p&gt;作为一个敏捷的开源项目，Kubernetes 不断发展，云计算领域也是如此。对于许多组织来说，跟上最新版本是不切实际的，并且有充分的理由不跟上最新版本，特别是在发布后的前几周。尽管如此，落后太远并不是一个好主意，不仅因为您可能会错过重要的安全性、兼容性和性能更新，而且还因为对旧版本的支持结束了。例如，如果您使用的是&lt;a href="https://aws.amazon.com/eks/"&gt;Amazon Elastic Kubernetes Service&lt;/a&gt; (EKS)，则对 1.24 的标准支持将于 2024 年 1 月 31 日结束，1.25 将于 2024 年 5 月 1 日结束，随后的 1.26 于 6 月 11 日结束，1.27 于 7 月 24 日结束。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;如何升级 EKS 集群&lt;/h2&gt;&lt;p&gt;EKS 是 Amazon 的一项托管 Kubernetes 服务，许多组织使用它来部署、管理和扩展容器化应用程序。本指南将逐步介绍升级 EKS 集群所需执行的步骤。它包括有关何时以及如何完成这些升级的指南以及可以让您更轻松地安全可靠地升级的工具。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;多久升级一次 Kubernetes&lt;/h2&gt;&lt;p&gt; Kubernetes 社区遵循 N-2 支持政策，这意味着他们为最新的三个小版本提供安全修复和错误补丁。他们每年大约发布 3 次新的次要版本，次要版本通常在发布后的前 14 个月内受到标准支持（针对 Amazon EKS）。此后，次要版本将进入接下来 12 个月的扩展支持（按集群小时收取额外费用）。扩展支持期结束后，您的 EKS 集群将自动升级到当前支持的最旧的扩展版本。这种情况远非理想，因为它为您提供了有关升级过程的很少选择，并且您仍然需要在不久的将来升级到&lt;a href="https://kubernetes.io/releases/"&gt;较新的版本&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;以下是接下来几个 Kubernetes 版本的时间表： &lt;/p&gt;&lt;figure class="wp-block-image"&gt;&lt;img alt="Amazon EKS Kubernetes 发布日历" src="https://www.fairwinds.com/hs-fs/hubfs/AmazonEKSKubernetesReleaseCalendar.png?width=800&amp;amp;height=237&amp;amp;name=AmazonEKSKubernetesReleaseCalendar.png" /&gt;&lt;/figure&gt;&lt;p&gt;&lt;em&gt;来源：&lt;/em&gt; &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.html"&gt;Amazon EKS Kubernetes 版本&lt;/a&gt;&lt;/p&gt;&lt;p&gt;对于大多数组织来说，希望定期评估新的 Kubernetes 版本。许多团队在不同环境中管理多个版本。例如，您可以在开发环境中测试新版本至少一两周，并在测试和登台环境中遵循该流程。在将新版本投入生产之前，请确保您至少拥有一周的数据，这样您就知道在上线时不会遇到意外的障碍。&lt;/p&gt;&lt;p&gt;每个Kubernetes版本都包含控制平面和数据平面；确保您的控制平面和数据平面运行相同的 Kubernetes 次要版本。 Kubernetes 允许&lt;a href="https://kubernetes.io/releases/version-skew-policy/#supported-versions"&gt;版本之间存在一定偏差&lt;/a&gt;，但支持因 Kubernetes 组件和不同集群开发工具而异。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;控制平面&lt;/strong&gt;— 在 EKS 集群中，控制平面由 AWS 管理。您可以使用 AWS API 开始升级到控制平面版本。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;数据平面&lt;/strong&gt;——就我们的目的而言，数据平面版本是指在节点上运行的 kubelet 的版本。即使在同一个集群中，不同的节点也可能运行不同的版本。您可以使用 kubectl getnodes 命令查找所有节点的版本。&lt;/li&gt;&lt;/ul&gt;&lt;h2 class="wp-block-heading"&gt;分阶段 EKS 升级&lt;/h2&gt;&lt;p&gt;出于升级目的，这是正确的升级顺序。但是，我们建议您的开发/阶段/测试集群在典型的日常操作中都尽可能接近生产环境。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;更新开发集群&lt;/h3&gt;&lt;p&gt;您需要首先升级您的开发环境。这可确保您及时了解最新的 K8s 更新。如果您在最新版本中遇到严重问题，您可以在将最新 EKS 版本推向暂存之前快速识别问题并找到解决方案。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;推送至暂存区&lt;/h3&gt;&lt;p&gt;下一个要升级的环境通常是您的临时环境。这是应该捕获开发环境中尚未解决的任何剩余问题的地方。这是生产前的最后一步，因此通常最好为此处的更改留出“浸泡时间”——我们允许一到两周。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;准备生产&lt;/h3&gt;&lt;p&gt;目标是使您的生产版本尽可能与登台保持一致。这使开发人员的生活变得更轻松，因为他们无需担心维护太多版本的代码。在约定的“浸泡时间”之后，升级生产环境的风险应该很小，因此请及时升级。不要因为担心将其转移到生产而陷入未完成升级周期的陷阱。&lt;/p&gt;&lt;h4 class="wp-block-heading"&gt;&lt;em&gt;关于小版本升级的注意事项&lt;/em&gt;&lt;/h4&gt;&lt;p&gt;一些从业者建议在补丁 .2 之前不要安装最新的次要版本。换句话说，他们可能建议等待安装最新的 Kubernetes 版本，例如 1.30.0，直到 1.30.2 可用。从那里，您可以开始升级过程，从开发阶段转移到登台阶段，然后再转移到生产阶段。这一建议源于多年的经验——到 .2 版本时，广泛的测试已经完成，主要问题已经被发现和解决。通常，一旦您完成了开发升级并将其推出到暂存阶段，.3 版本就可用了。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;共同责任模型&lt;/h2&gt;&lt;p&gt;EKS 客户负责启动集群控制平面和数据平面的升级。当 AWS 处理控制平面升级时，您负责数据平面，包括 Fargate Pod 和附加组件。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;集群升级&lt;/h3&gt;&lt;p&gt;EKS 支持就地集群升级，从而保持资源和配置的一致性。它最大限度地减少用户中断并保留有关现有工作负载和资源的信息。您一次只能升级一个小版本。&lt;/p&gt;&lt;p&gt;如果您需要进行多个版本更新，则必须进行顺序升级。这种方法会增加停机风险。在这种情况下，请考虑评估&lt;a href="https://aws.amazon.com/blogs/containers/kubernetes-cluster-upgrade-the-blue-green-deployment-strategy/"&gt;蓝/绿集群升级&lt;/a&gt;策略，其中一个环境（蓝色）运行当前的 Kubernetes 版本，另一个环境（绿色）运行新的 Kubernetes 版本。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt; AWS EKS 升级管理&lt;/h2&gt;&lt;p&gt;AWS 管理 EKS 控制平面升级流程，以确保从一个 Kubernetes 版本无缝过渡到下一个版本。以下是 AWS 升级 EKS 控制平面所执行的步骤：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;升级前检查：&lt;/strong&gt; AWS 执行升级前检查，评估当前集群状态并评估新版本与您的工作负载的兼容性。如果检测到任何问题，升级过程将停止。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;备份和快照：&lt;/strong&gt;接下来，AWS 备份您现有的控制平面并创建 etcd 数据存储的快照，以确保数据一致性并使您能够在升级失败时进行回滚。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;新的控制平面：&lt;/strong&gt; AWS 现在使用新的 Kubernetes 版本创建新的控制平面；这与您现有的控制平面并行运行。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;兼容性测试：&lt;/strong&gt;接下来，AWS 测试新的控制平面与您的工作负载的兼容性，运行自动化测试以验证您的应用程序是否继续按预期运行。它分析应用程序的运行状况，而不是可能已弃用或删除的 API。 （&lt;a href="https://www.fairwinds.com/blog/pluto-finds-deprecated-kubernetes-api-versions-3-questions"&gt;Pluto&lt;/a&gt;是一个开源实用程序，可以在代码存储库和 Helm 版本中查找已弃用的 Kubernetes API 版本。）&lt;/li&gt;&lt;li&gt;&lt;strong&gt;切换控制平面终端节点：&lt;/strong&gt;此时，AWS 将控制平面终端节点（API 服务器）切换到新的控制平面。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;终止旧的控制平面：&lt;/strong&gt;完成升级后，AWS 将终止旧的控制平面并清理与其关联的所有资源。&lt;/li&gt;&lt;/ul&gt;&lt;h2 class="wp-block-heading"&gt;升级顺序&lt;/h2&gt;&lt;p&gt;要升级 EKS 集群，我们建议您执行以下步骤：&lt;/p&gt;&lt;ol&gt;&lt;li&gt; &lt;a href="https://aws.github.io/aws-eks-best-practices/upgrades/#use-the-eks-documentation-to-create-an-upgrade-checklist"&gt;查看 Kubernetes 和 EKS 的发行说明。&lt;/a&gt;&lt;/li&gt;&lt;li&gt; &lt;a href="https://aws.github.io/aws-eks-best-practices/upgrades/#upgrade-add-ons-and-components-using-the-kubernetes-api"&gt;检查您的附加组件的兼容性。&lt;/a&gt;升级您的 Kubernetes 插件和自定义控制器； &lt;a href="https://www.fairwinds.com/blog/gonogo-checks-kubernetes-add-ons"&gt;GoNoGo&lt;/a&gt;是一个检查 Kubernetes 附加组件的开源工具。&lt;/li&gt;&lt;li&gt; &lt;a href="https://aws.github.io/aws-eks-best-practices/upgrades/#identify-and-remediate-removed-api-usage-before-upgrading-the-control-plane"&gt;识别并修复工作负载中已弃用和已删除的 API 的使用情况。&lt;/a&gt;冥王星可以帮助你完成这个过程。&lt;/li&gt;&lt;li&gt; &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/update-managed-node-group.html" rel="noreferrer noopener" target="_blank"&gt;确保（如果您使用它们）托管&lt;/a&gt;&lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/update-managed-node-group.html"&gt;节点&lt;/a&gt;&lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/update-managed-node-group.html" rel="noreferrer noopener" target="_blank"&gt;组与控制平面位于相同的 K8s 版本上。&lt;/a&gt; EKS 托管节点组和 EKS Fargate 配置文件创建的任何节点仅支持数据平面和控制平面上的一种次要版本偏差。&lt;/li&gt;&lt;li&gt; &lt;a href="https://aws.github.io/aws-eks-best-practices/upgrades/#backup-the-cluster-before-upgrading"&gt;备份集群（如果需要）。&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/update-cluster.html"&gt;更新控制平面。&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/update-cluster.html"&gt;升级集群数据平面&lt;/a&gt;。升级您的节点，使它们与升级后的集群具有相同的 Kubernetes 次要版本。&lt;/li&gt;&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/install-kubectl.html"&gt;更新 kubectl.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 class="wp-block-heading"&gt;创建 EKS 升级清单&lt;/h2&gt;&lt;p&gt;EKS Kubernetes&lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.html"&gt;版本文档&lt;/a&gt;提供了每个版本的详细更改列表，您应该使用该列表为每次升级构建清单。有关特定 EKS 版本升级的指导，请查看文档以确定每个版本的重要更改和注意事项。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;升级关键附加组件和组件&lt;/h3&gt;&lt;p&gt;在开始集群升级之前，请确保您了解正在使用的 Kubernetes 组件的版本。清点集群组件，特别是直接与 Kubernetes API 交互的组件。您的典型集群包含多个依赖 Kubernetes API 的工作负载，这些工作负载提供了重要的功能。这些集群组件通常包括：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;集群自动缩放器&lt;/li&gt;&lt;li&gt;容器网络接口&lt;/li&gt;&lt;li&gt;容器存储驱动程序&lt;/li&gt;&lt;li&gt;持续交付系统&lt;/li&gt;&lt;li&gt;入口控制器&lt;/li&gt;&lt;li&gt;监控和记录代理&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;确保检查是否有任何其他直接与 Kubernetes API 交互的工作负载或附加组件。有时，您可以通过查看以 *-system 结尾的命名空间来识别关键集群组件。接下来，参考这些关键组件的文档来评估版本兼容性以及是否有升级的前提条件。某些组件可能要求您在升级集群之前进行更新或调整配置。&lt;/p&gt;&lt;p&gt;以下是一些常见的附加组件（链接到升级文档）：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/managing-vpc-cni.html"&gt;用于 Kubernetes 自我管理附加组件的 Amazon VPC CNI 插件&lt;/a&gt;。如果您将其安装为 Amazon EKS 插件，则一次只能升级一个次要版本。&lt;/li&gt;&lt;li&gt; &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/managing-kube-proxy.html"&gt;Kubernetes kube-proxy 自我管理插件&lt;/a&gt;。&lt;/li&gt;&lt;li&gt; &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/managing-coredns.html"&gt;CoreDNS 自我管理插件&lt;/a&gt;。&lt;/li&gt;&lt;li&gt; &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/aws-load-balancer-controller.html"&gt;AWS 负载均衡器控制器&lt;/a&gt;&lt;strong&gt;。&lt;/strong&gt; AWS 负载均衡器控制器必须与您部署的 EKS 版本兼容。&lt;/li&gt;&lt;li&gt; &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/managing-ebs-csi.html"&gt;Amazon Elastic Block Store (Amazon EBS) 容器存储接口 (CSI) 驱动程序&lt;/a&gt;。&lt;/li&gt;&lt;li&gt; &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/efs-csi.html"&gt;Amazon Elastic File System (Amazon EFS) CSI 驱动程序&lt;/a&gt;。&lt;/li&gt;&lt;li&gt; &lt;a href="https://kubernetes-sigs.github.io/metrics-server/"&gt;Kubernetes 指标服务器&lt;/a&gt;。&lt;/li&gt;&lt;li&gt; &lt;a href="https://github.com/kubernetes/autoscaler/releases"&gt;Kubernetes Cluster Autoscaler&lt;/a&gt; Cluster Autoscaler 与 Kubernetes 调度程序紧密耦合，并且在升级集群时始终需要升级。查找与您的 Kubernetes 次要版本对应的最新版本的地址。&lt;/li&gt;&lt;li&gt;&lt;a href="https://karpenter.sh/v0.27.3/faq/#which-versions-of-kubernetes-does-karpenter-support"&gt;卡彭特。&lt;/a&gt;&lt;/li&gt;&lt;li&gt;服务网格，例如&lt;a href="https://github.com/linkerd/linkerd2"&gt;Linkerd2&lt;/a&gt;或&lt;a href="https://github.com/istio/istio"&gt;Istio&lt;/a&gt; 。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;一些附加组件（例如 VPC CNI 插件和 kube-proxy）可以通过 Amazon EKS 附加组件安装，这提供了通过 EKS API 进行附加组件管理的替代方法。您可能会考虑以这种方式管理这些插件，因为这种方法使您可以使用单个命令更新插件版本。例如：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;aws eks update-addon —cluster-name my-cluster —addon-name vpc-cni —addon-version version-number \&lt;br /&gt;&lt;br /&gt; --service-account-role-arn arn:aws:iam::111122223333:role/role-name —configuration-values &amp;#39;{}&amp;#39; —resolve-conflicts PRESERVE&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要检查您是否有任何 EKS 附加组件，请输入：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;aws eks list-addons --cluster-name &amp;lt;cluster name&amp;gt; --output table&lt;/code&gt;&lt;/pre&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;— — — — — — — — —&lt;br /&gt; |   ListAddons   |&lt;br /&gt; +----------------+&lt;br /&gt; || addons ||&lt;br /&gt; |+--------------+|&lt;br /&gt; ||  coredns ||&lt;br /&gt; ||  kube-proxy  ||&lt;br /&gt; ||  vpc-cni ||&lt;br /&gt; |+--------------+|&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;注意：&lt;/em&gt;&lt;/strong&gt;在控制平面升级期间，Amazon 不会自动升级 EKS 附加组件。您必须启动 EKS 附加更新并选择要更新到的版本。确保使用&lt;a href="https://aws.github.io/aws-eks-best-practices/upgrades/#upgrade-add-ons-and-components-using-the-kubernetes-api"&gt;有关附加版本兼容性的指南从所有可用版本中选择兼容版本。&lt;/a&gt;请记住，您一次只能升级 Amazon EKS 插件一个次要版本。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;验证 EKS 要求&lt;/h2&gt;&lt;p&gt;AWS 需要您账户中的多种特定资源来升级控制平面，包括：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; &lt;strong&gt;IP 地址：&lt;/strong&gt; Amazon EKS 要求您在创建集群时指定的子网中最多有五个可用的 IP 地址。&lt;br /&gt;&lt;br /&gt;确保您的子网有足够的 IP 地址来升级集群：&lt;br /&gt;&lt;br /&gt; &lt;code&gt;CLUSTER=&amp;lt;cluster name&amp;gt;&lt;br /&gt; aws ec2 describe-subnets --subnet-ids \&lt;br /&gt; $(aws eks describe-cluster --name ${CLUSTER} \&lt;br /&gt; --query &amp;#39;cluster.resourcesVpcConfig.subnetIds&amp;#39; \&lt;br /&gt; --output text) \&lt;br /&gt; --query &amp;#39;Subnets[*].[SubnetId,AvailabilityZone,AvailableIpAddressCount]&amp;#39; \&lt;br /&gt; --output table&lt;br /&gt; ----------------------------------------------------&lt;br /&gt;&lt;br /&gt; |              DescribeSubnets             |&lt;br /&gt;&lt;br /&gt; +---------------------------+--------------+-------+&lt;br /&gt;&lt;br /&gt; |  subnet-0ce25bacdb030ce4f |  us-west-2a  |  8136 |&lt;br /&gt;&lt;br /&gt; |  subnet-0c173097d592e96e4 |  us-west-2c  |  8051 |&lt;br /&gt;&lt;br /&gt; |  subnet-06a36d93ad471d420 |  us-west-2b  |  8127 |&lt;br /&gt;&lt;br /&gt; +---------------------------+--------------+-------+&lt;/code&gt; （您可以使用&lt;a href="https://github.com/aws/amazon-vpc-cni-k8s/blob/master/cmd/cni-metrics-helper/README.md"&gt;VPC CNI Metrics Helper&lt;/a&gt;为 Virtual Private Cloud (VPC) 指标创建 CloudWatch 仪表板。）&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt; &lt;strong&gt;EKS IAM：&lt;/strong&gt;控制平面身份访问管理 (IAM) 角色必须位于具有必要权限的账户中。&lt;/li&gt;&lt;li&gt; &lt;strong&gt;EKS 安全组：&lt;/strong&gt;控制平面主安全组必须在具有所需访问规则的账户中可用。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;集群 IAM 角色权限：&lt;/strong&gt;如果您在集群中启用了秘密加密，请确保集群 IAM 角色有权使用 AWS Key Management Service (AWS KMS) 密钥。&lt;/li&gt;&lt;/ul&gt;&lt;h2 class="wp-block-heading"&gt;用于 EKS 升级的开源工具&lt;/h2&gt;&lt;p&gt;&lt;a href="http://cncf.io/"&gt;云原生生态系统&lt;/a&gt;不断扩展和成熟，因此有很多开源工具可帮助团队导航 Kubernetes 升级也就不足为奇了。以下是一些可帮助您进行 EKS 升级的选项，以及一些示例和说明。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;冥王星&lt;/h3&gt;&lt;p&gt;&lt;a href="https://pluto.docs.fairwinds.com/"&gt;Pluto&lt;/a&gt;是 Fairwinds 的开源工具，用于查找已弃用的 apiVersions 的使用情况。 Pluto 支持扫描实时集群、清单文件和 helm 图表。它还提供了一个 GitHub Action，您可以将其包含在 CI 流程中。 Pluto 会告诉您是否可以针对 API 路径安全升级，检查您是否在配置或 Helm 图表中调用已弃用或已删除的 API 路径。您可以使用以下命令针对本地文件运行 Pluto：&lt;/p&gt;&lt;p&gt; &lt;code&gt;pluto detect-files&lt;/code&gt;&lt;/p&gt;&lt;p&gt;您还可以使用以下命令检查 Helm：&lt;/p&gt;&lt;p&gt; &lt;code&gt;pluto detect-helm -owide&lt;/code&gt;&lt;/p&gt;&lt;p&gt;将其添加到 CI 中非常容易；这对于管理许多集群的人很有帮助。&lt;/p&gt;&lt;h4 class="wp-block-heading"&gt; helm 和 API 资源（集群内）&lt;/h4&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;$ pluto detect-all-in-cluster -o wide 2&amp;gt;/dev/null&lt;br /&gt;&lt;br /&gt; NAME              NAMESPACE   KIND                VERSION                     REPLACEMENT            DEPRECATED   DEPRECATED IN   REMOVED   REMOVED IN&lt;br /&gt;&lt;br /&gt;  testing/viahelm   viahelm     Ingress             networking.k8s.io/v1beta1   networking.k8s.io/v1   true         v1.19.0         true      v1.22.0&lt;br /&gt;&lt;br /&gt;     webapp            default     Ingress             networking.k8s.io/v1beta1   networking.k8s.io/v1   true         v1.19.0         true      v1.22.0&lt;br /&gt;&lt;br /&gt;     eks.privileged       PodSecurityPolicy   policy/v1beta1                                     true         v1.21.0         false     v1.25.0&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这结合了所有可用的集群内检测，显示 Helm 版本和 API 资源的结果。&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;NAME    KIND            VERSION          REPLACEMENT   REMOVED   DEPRECATED   REPL AVAIc&lt;br /&gt; eks.privileged   PodSecurityPolicy   policy/v1beta1                 false     true         true&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一旦确定哪些工作负载和清单需要更新，您可能会发现需要更改清单文件中的资源版本（例如，将networking.k8s.io/v1beta1更改为networking.k8s.io/v1）。这可能还需要您更新资源规范。您可能需要进行额外的研究，具体取决于您要替换的资源。&lt;/p&gt;&lt;p&gt;如果资源类型保持不变，仅需要更新 API 版本，您可以使用&lt;code&gt;kubectl-convert&lt;/code&gt;命令自动转换清单文件。例如，如果要将旧的 Deployment 转换为 apps/v1，请键入以下命令：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;kubectl-convert -f &amp;lt;file&amp;gt; --output-version &amp;lt;group&amp;gt;/&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果您想了解更多信息，请参阅 Kubernetes 网站上的&lt;a href="https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#install-kubectl-convert-plugin"&gt;安装 kubectl Convert 插件&lt;/a&gt;。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;诺瓦&lt;/h3&gt;&lt;p&gt;&lt;a href="https://www.fairwinds.com/blog/find-outdated-helm-charts-with-nova"&gt;Nova&lt;/a&gt;是 Fairwinds 的另一个开源实用程序，可帮助您检查 Helm 版本以查看是否需要升级。通常，CNI 和其他依赖项随 Helm 一起安装。 Nova 是一种快速方法，您可以使用它来确保您运行的是最新版本。与往常一样，请检查补丁说明以验证对您的目标版本的支持。&lt;/p&gt;&lt;p&gt;安装 golang 二进制文件并针对您的集群运行它。&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;$ go install github.com/fairwindsops/nova@latest&lt;br /&gt; $ nova find&lt;br /&gt; Release Name      Installed    Latest     Old       Deprecated ============      =========    ======     ===       ==========&lt;br /&gt; cert-manager      v0.11.0      v0.15.2    true      false&lt;br /&gt; insights-agent    0.21.0       0.21.1     true      false&lt;br /&gt; grafana           2.1.3        3.1.1      true      false&lt;br /&gt; metrics-server    2.8.8        2.11.1     true      false&lt;br /&gt;&lt;br /&gt; nginx-ingress     1.25.0       1.40.3     true      false&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要检查过时的容器映像而不是 helm 版本：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;$ nova find --container&lt;br /&gt; Container Name                              Current Version    Old     Latest     Latest Minor     Latest Patch&lt;br /&gt; ==============                              ===============    ===     ======     =============    =============&lt;br /&gt; k8s.gcr.io/coredns/coredns                  v1.8.0             true    v1.8.6     v1.8.6           v1.8.6&lt;br /&gt; k8s.gcr.io/etcd                             3.4.13-0           true    3.5.3-0    3.4.13-0         3.4.13-0&lt;br /&gt; k8s.gcr.io/kube-apiserver                   v1.21.1            true    v1.23.6    v1.23.6          v1.21.12&lt;br /&gt; k8s.gcr.io/kube-controller-manager          v1.21.1            true    v1.23.6    v1.23.6          v1.21.12&lt;br /&gt; k8s.gcr.io/kube-proxy                       v1.21.1            true    v1.23.6    v1.23.6          v1.21.12&lt;br /&gt; k8s.gcr.io/kube-scheduler                   v1.21.1            true    v1.23.6    v1.23.6          v1.21.12&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 class="wp-block-heading"&gt;库贝普格&lt;/h3&gt;&lt;p&gt;这个开源工具的正式名称为&lt;code&gt;&lt;a href="https://github.com/rikatz/kubepug"&gt;KubePug/Deprecations&lt;/a&gt;&lt;/code&gt; ，旨在帮助用户评估其 K8s 集群的运行状况和性能。它充当 kubectl 插件并包含以下功能：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;下载生成的 data.json 文件，其中包含指定 Kubernetes 版本的 API 弃用信息。&lt;/li&gt;&lt;li&gt;扫描正在运行的 Kubernetes 集群，确定是否有任何对象会受​​到折旧的影响。&lt;/li&gt;&lt;li&gt;向用户显示受影响的对象。&lt;/li&gt;&lt;/ol&gt;&lt;h4 class="wp-block-heading"&gt;特征&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;使用&lt;code&gt;kubeconfig&lt;/code&gt;或活动集群针对 Kubernetes 集群运行。&lt;/li&gt;&lt;li&gt;可以针对一组不同的清单或文件执行。&lt;/li&gt;&lt;li&gt;允许您指定用于验证的目标 Kubernetes 版本。&lt;/li&gt;&lt;li&gt;提供有关您应采用的替代 API 的信息。&lt;/li&gt;&lt;li&gt;根据目标集群版本，包含有关已弃用或删除 API 的版本的详细信息。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;运行以下命令将 kubepug 安装为 Krew 插件：&lt;/p&gt;&lt;p&gt; &lt;code&gt;kubectl krew install deprecations&lt;/code&gt;&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;埃克苏普&lt;/h3&gt;&lt;p&gt;&lt;a href="https://github.com/clowdhaus/eksup"&gt;eksup&lt;/a&gt;是一个命令行界面 (CLI)，旨在为用户提供全面的信息和工具来准备集群进行升级。它可以通过提供相关的见解和操作来帮助简化升级过程。&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;A CLI to aid in upgrading Amazon EKS clusters Usage: eksup &amp;lt;COMMAND&amp;gt;&lt;br /&gt; Commands: analyze  Analyze an Amazon EKS cluster for potential upgrade issues&lt;br /&gt; create   Create artifacts using the analysis data&lt;br /&gt; help     Print this message or the help of the given subcommand(s) Options:&lt;br /&gt; -h, --help     Print help -V, --version  Print version&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 class="wp-block-heading"&gt;功能&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;分析集群：&lt;/strong&gt;使用 eksup 根据下一个 Kubernetes 版本评估您的集群，以确定可能影响升级过程的问题。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;生成 Playbook：&lt;/strong&gt;根据集群的分析结果生成概述升级步骤的自定义 Playbook，包括必要的操作和补救措施。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;编辑 Playbook：&lt;/strong&gt;生成的 Playbook 是可编辑的，使您能够调整升级步骤，使其符合您的集群配置和业务需求。您还可以记录在升级过程中获得的见解。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;加强协作：&lt;/strong&gt;升级通常首先在非生产集群上启动，因此您可以捕获在此阶段发现的任何其他步骤或见解，并使用它们来改进生产集群的升级过程。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;保留历史文物：&lt;/strong&gt;您可以保留您的剧本作为历史参考。这有助于您确保每个升级周期都利用之前的经验教训，从而提高未来升级的效率。&lt;/li&gt;&lt;/ol&gt;&lt;h3 class="wp-block-heading"&gt;走不走&lt;/h3&gt;&lt;p&gt;&lt;a href="https://github.com/FairwindsOps/GoNoGo"&gt;GoNoGo&lt;/a&gt;是 Fairwinds 的另一个开源工具。它可以帮助您定义和发现随 Helm 安装的附加组件是否可以安全升级。&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;gonogo --help The Kubernetes Add-On Upgrade Validation Bundle is a spec that can be used to define and then discover if an add-on upgrade is safe to perform.&lt;br /&gt; Usage:  gonogo [flags]  gonogo [command]&lt;br /&gt; Available Commands:  check       Check for Helm releases that can be updated  completion  Generate the autocompletion script for the specified shell  help        Help about any command  version     Prints the current version of the tool.&lt;br /&gt; Flags:&lt;br /&gt;  -h, --help      help for gonogo  -v, --v Level   number for the log level verbosity&lt;br /&gt; Use &amp;quot;gonogo [command] --help&amp;quot; for more information about a command.&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 class="wp-block-heading"&gt;维莱罗&lt;/h3&gt;&lt;p&gt;您可以使用的另一个社区支持的开源工具是&lt;a href="https://velero.io/"&gt;Velero&lt;/a&gt; ，它使您能够创建现有集群的备份，然后将备份应用到新集群。 Velero 备份中不包含 AWS 资源（包括 IAM），因此您需要重新创建它们。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;改进 EKS 升级流程的附加指南&lt;/h2&gt;&lt;h3 class="wp-block-heading"&gt;配置&lt;code&gt;PodDisruptionBudgets&lt;/code&gt;和&lt;code&gt;topologySpreadConstraints&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;为了确保您的工作负载在数据平面升级期间保持可用，您需要适当配置&lt;code&gt;PodDisruptionBudgets&lt;/code&gt;和&lt;code&gt;topologySpreadConstraints&lt;/code&gt; 。请记住，并非所有工作负载都需要相同级别的可用性，因此请评估您的工作负载的规模和要求。&lt;/p&gt;&lt;p&gt;如果工作负载分布在具有拓扑分布的多个可用区和主机上，则可以提高在不中断的情况下迁移到新数据平面的可能性。&lt;/p&gt;&lt;p&gt;这是一个工作负载配置示例，可保证 80% 的副本始终可用，从而有效地将副本分布在区域和主机之间：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;# Source: basic-demo/templates/deployment.yaml apiVersion: apps/v1 kind: Deployment metadata:  name: demo-basic-demo  labels:    app.kubernetes.io/name: basic-demo    app.kubernetes.io/instance: demo spec:  selector:    matchLabels:      app.kubernetes.io/name: basic-demo      app.kubernetes.io/instance: demo  template:    metadata:      labels:        app.kubernetes.io/name: basic-demo        app.kubernetes.io/instance: demo    spec:      topologySpreadConstraints:        - maxSkew: 1          topologyKey: kubernetes.io/hostname          whenUnsatisfiable: ScheduleAnyway          - maxSkew: 1            topologyKey: zone            whenUnsatisfiable: DoNotSchedule      containers:        - name: basic-demo          image: &amp;quot;quay.io/fairwinds/docker-demo:1.2.0&amp;quot;          imagePullPolicy: Always&lt;br /&gt;          ports:            - name: http              containerPort: 8080              protocol: TCP&lt;br /&gt; # Source: basic-demo/templates/pdb.yaml apiVersion: policy/v1 kind: PodDisruptionBudget metadata:  name: demo-basic-demo spec:  minAvailable: 80%  selector:    matchLabels:      app.kubernetes.io/name: basic-demo      app.kubernetes.io/instance: demo&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 class="wp-block-heading"&gt; AWS 弹性中心&lt;/h3&gt;&lt;p&gt;&lt;a href="https://aws.amazon.com/resilience-hub/"&gt;AWS Resilience Hub&lt;/a&gt;现在包括&lt;a href="https://docs.aws.amazon.com/resilience-hub/latest/userguide/enabling-eks-in-arh.html"&gt;EKS&lt;/a&gt;作为受支持的资源。这提供了一个可以定义、验证和跟踪应用程序弹性的单一位置。这有助于您避免因基础设施、软件或运营中断造成的不必要的停机。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;使用托管节点组或 Karpenter&lt;/h3&gt;&lt;p&gt; Managed Node Groups 和 Karpenter 都采用不同的方法来简化节点升级。托管节点组可自动执行节点配置和生命周期管理，这意味着您可以通过单个操作创建、自动更新或终止节点。&lt;/p&gt;&lt;p&gt; Karpenter 使用最新的兼容 EKS 优化亚马逊系统映像 (AMI) 自动创建新节点。当 EKS 发布更新的 EKS 优化 AMI 或您升级集群时，Karpenter 会自动开始使用这些映像。 &lt;a href="https://aws.github.io/aws-eks-best-practices/upgrades/#enable-node-expiry-for-karpenter-managed-nodes"&gt;它还使用 Node Expiry 来更新节点。&lt;/a&gt;您可以&lt;a href="https://karpenter.sh/docs/concepts/node-templates/"&gt;将 Karpenter 配置为使用自定义 AMI&lt;/a&gt; ，但请记住，如果这样做，您就要对 kubelet 的版本负责。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;自动升级自管理节点组&lt;/h3&gt;&lt;p&gt;自我管理节点组是部署在您的账户中并附加到 EKS 服务外部集群的 Amazon Elastic Compute Cloud (EC2) 实例。通常，这些节点组由某种形式的自动化工具部署和管理，例如&lt;a href="https://eksctl.io/usage/nodegroup-upgrade/"&gt;eksctl&lt;/a&gt; 、 &lt;a href="https://kops.sigs.k8s.io/operations/updates_and_upgrades/"&gt;kOps&lt;/a&gt;和&lt;a href="https://aws-ia.github.io/terraform-aws-eks-blueprints/node-groups/#self-managed-node-groups"&gt;EKS Blueprints&lt;/a&gt; 。请参阅工具文档来升级自管理节点组。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;备份集群&lt;/h3&gt;&lt;p&gt;毫不奇怪，新版本的 Kubernetes 为您的 Amazon EKS 集群带来了重大变化。请记住，一旦升级集群，就无法降级。并且您只能为 EKS 当前支持的 Kubernetes 版本创建新集群。如果您担心此风险，您可能需要考虑在升级之前备份集群。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;随时了解 K8s 版本&lt;/h3&gt;&lt;p&gt;尽管您可能觉得自己只有时间关注 Kubernetes 的当前版本，但监控新版本并识别重大更改非常重要。例如，从 1.23 迁移到 1.24 最重要的变化是从 kubelet 中删除了 Dockershim。 Dockershim 是 Kubernetes 和 Docker 之间的适配器。此代码嵌入在 kubelet 中，以允许 kubelet 与 docker 守护进程对话（即使 docker 守护进程不符合开放容器计划 (OCI)），但在 1.24 中已删除。这意味着 kubelet 现在在节点上启动和管理容器时使用容器运行时接口 (CRI) 直接与容器运行时通信。自版本 1.24 起，EKS AMI 仅将&lt;a href="https://containerd.io/"&gt;containerd&lt;/a&gt;作为运行时。为此类重大变化做准备需要额外的时间和规划。&lt;/p&gt;&lt;p&gt;查看您计划升级到的版本的所有记录的修改，记下任何所需的升级过程。确保您还关注专为 Amazon EKS 托管集群定制的要求或流程（查看&lt;a href="https://github.com/kubernetes/kubernetes/tree/master/CHANGELOG"&gt;Kubernetes 变更日志&lt;/a&gt;）。这种方法将帮助您实现更顺畅的升级过程并最大限度地减少潜在的中断。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt; Kubernetes 的重要变化&lt;/h2&gt;&lt;p&gt;下面列出了从 v1.24 开始的 Kubernetes 版本中一些最著名的更改（其中许多是破坏性的）。这不是一个完整的列表;请参阅您的 Kubernetes 版本的发行说明。&lt;/p&gt;&lt;p&gt;库伯内特 v1.24&lt;/p&gt;&lt;ul&gt;&lt;li&gt;从 Kubelet 中删除 Dockershim。 Kubernetes 博客有一篇关于什么、如何以及为什么的精彩&lt;a href="https://kubernetes.io/blog/2022/02/17/dockershim-faq/"&gt;文章&lt;/a&gt;。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;库伯内特 v1.25&lt;/p&gt;&lt;ul&gt;&lt;li&gt;不再提供多个已弃用的 API。请参阅官方&lt;a href="https://kubernetes.io/docs/reference/using-api/deprecation-guide/#v1-25"&gt;Kubernetes 弃用 API 迁移指南&lt;/a&gt;。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;库伯内特 v1.26&lt;/p&gt;&lt;ul&gt;&lt;li&gt;不再提供多个已弃用的 API。请参阅官方&lt;a href="https://kubernetes.io/docs/reference/using-api/deprecation-guide/#v1-26"&gt;Kubernetes 弃用 API 迁移指南&lt;/a&gt;。&lt;/li&gt;&lt;li&gt; GlusterFS 树内存储驱动程序已被删除。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;库伯内特 v1.27&lt;/p&gt;&lt;ul&gt;&lt;li&gt; AWS 的树内存储提供程序（以及 EBS 存储插件）已被删除。您必须使用外部 CSI 驱动程序。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;库伯内特 v1.28&lt;/p&gt;&lt;ul&gt;&lt;li&gt;树内 CephFS 卷插件已弃用。请迁移到外部驱动程序。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;库伯内特 v1.29&lt;/p&gt;&lt;ul&gt;&lt;li&gt;只有 Kubeadm 发生变化。&lt;/li&gt;&lt;/ul&gt;&lt;h3 class="wp-block-heading"&gt; Kubernetes v1.29 的主要变化&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;ReadWriteOncePod PersistentVolume 访问模式（ &lt;a href="https://github.com/kubernetes/community/tree/master/sig-storage"&gt;SIG 存储&lt;/a&gt;）&lt;/li&gt;&lt;li&gt;节点卷扩展 秘密支持CSI驱动（ &lt;a href="https://github.com/kubernetes/community/tree/master/sig-storage"&gt;SIG存储&lt;/a&gt;）&lt;/li&gt;&lt;li&gt; KMS v2 静态加密普遍可用 ( &lt;a href="https://github.com/kubernetes/community/tree/master/sig-auth"&gt;SIG Auth&lt;/a&gt; )&lt;/li&gt;&lt;li&gt;节点生命周期与污点管理分离（ &lt;a href="https://github.com/kubernetes/community/tree/master/sig-scheduling"&gt;SIG 调度&lt;/a&gt;）&lt;/li&gt;&lt;li&gt;清理遗留的基于 Secret 的 ServiceAccount 令牌 ( &lt;a href="https://github.com/kubernetes/community/tree/master/sig-auth"&gt;SIG Auth&lt;/a&gt; )&lt;/li&gt;&lt;/ul&gt;&lt;h3 class="wp-block-heading"&gt; Kubernetes v1.30 的主要变化&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;用于动态资源分配的结构化参数（ &lt;a href="https://kep.k8s.io/4381"&gt;KEP-4381&lt;/a&gt; ）&lt;/li&gt;&lt;li&gt;节点内存交换支持 ( &lt;a href="https://kep.k8s.io/2400"&gt;KEP-2400&lt;/a&gt; )&lt;/li&gt;&lt;li&gt;支持 Pod 中的用户命名空间 ( &lt;a href="https://kep.k8s.io/127"&gt;KEP-127&lt;/a&gt; )&lt;/li&gt;&lt;li&gt;结构化授权配置（ &lt;a href="https://kep.k8s.io/3221"&gt;KEP-3221&lt;/a&gt; ）&lt;/li&gt;&lt;li&gt;基于容器资源的 Pod 自动缩放 ( &lt;a href="https://kep.k8s.io/1610"&gt;KEP-1610&lt;/a&gt; )&lt;/li&gt;&lt;li&gt;用于准入控制的 CEL ( &lt;a href="https://kep.k8s.io/3488"&gt;KEP-3488&lt;/a&gt; )&lt;/li&gt;&lt;/ul&gt;&lt;h2 class="wp-block-heading"&gt;安全升级EKS集群&lt;/h2&gt;&lt;p&gt;希望本指南中概述的信息对您有用。持续升级 Kubernetes 需要研究和努力；您需要确保有时间测试每个次要版本的环境。如果您遵循这些步骤，您应该可以很好地升级 EKS 集群。如果您在下次 EKS 升级方面需要帮助，&lt;a href="https://www.fairwinds.com/eks-migration"&gt;请联系&lt;/a&gt;。我们的团队拥有 Kubernetes 专业知识，可以让您轻松升级，同时使您的 Kubernetes 基础设施更加高效，从而节省您的时间和金钱。 &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Sun, 12 May 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/05/13/a-step-by-step-guide-to-securely-upgrading-your-eks-clusters/</guid></item><item><title>【A new course: how to use Dapr and WebAssembly to build scalable and secure cloud apps】新课程：如何使用 Dapr 和 WebAssembly 构建可扩展且安全的云应用程序</title><link>https://www.cncf.io/blog/2024/05/10/a-new-course-how-to-use-dapr-and-webassembly-to-build-scalable-and-secure-cloud-apps/</link><description>&lt;p&gt;如果需要扩展您的技能集并掌握相关新技术，Linux 基础培训和认证以及云原生计算基金会推出了新课程&lt;a href="https://training.linuxfoundation.org/training/dapr-with-webassembly-lfd233/"&gt;Dapr with WebAssembly (LFD233)。&lt;/a&gt;&lt;/p&gt;&lt;p&gt;在技​​术发展比以往任何时候都更加迅速的时代，认证对于寻求扩展技能、获得晋升甚至寻找新职位的开发人员和 IT 专业人员来说可以发挥关键作用。 &lt;a href="https://home.pearsonvue.com/About/News/2023/2023-Value-of-IT-Certification-Candidate-Report.aspx"&gt;2023 年一项关于 IT 认证价值的调查&lt;/a&gt;数据发现，37% 的受访者在获得新认证后获得加薪，27% 的受访者获得晋升。&lt;/p&gt;&lt;p&gt; Dapr 与 WebAssembly 非常适合希望深入了解开源技术如何协同工作的开发人员、云工程师和 IT 专业人员。参与者将学习如何利用 Dapr 和 WebAssembly 更高效、更安全地开发软件，着眼于创建可在不同环境中运行的尖端应用程序。&lt;/p&gt;&lt;p&gt; Dapr 与 WebAssembly 允许参与者以自己的速度进行“电子学习”，同时享有动手实验室和讨论论坛等更传统教学的所有好处。课程时长为 7 小时。&lt;/p&gt;&lt;p&gt;涵盖的主题包括：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;构建 WASM Web 服务&lt;/li&gt;&lt;li&gt;Dapr 与 WasmEdge&lt;/li&gt;&lt;li&gt;状态管理和 Pub Sub&lt;/li&gt;&lt;li&gt; Kubernetes 上的 Dapr 应用程序&lt;/li&gt;&lt;li&gt;配置与机密管理&lt;/li&gt;&lt;li&gt;输入和输出绑定&lt;/li&gt;&lt;li&gt;在 Dapr 中运行 WASM&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;成功完成课程的学生将获得证书和数字徽章。 &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Thu, 09 May 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/05/10/a-new-course-how-to-use-dapr-and-webassembly-to-build-scalable-and-secure-cloud-apps/</guid></item></channel></rss>