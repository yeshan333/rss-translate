<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>CNCF - 博客</title><link>https://www.cncf.io/blog/</link><description>CNCF - 博客 - RSSHub 用爱制作(https://github.com/DIYgod/RSSHub)</description><lastBuildDate>Tue, 04 Jun 2024 16:04:21 GMT</lastBuildDate><generator>rfeed v1.1.1</generator><docs>https://github.com/svpino/rfeed/blob/master/README.md</docs><item><title>【Tackling GPU underutilization in Kubernetes runtimes】解决 Kubernetes 运行时中 GPU 利用率不足的问题</title><link>https://www.cncf.io/blog/2024/06/03/tackling-gpu-underutilization-in-kubernetes-runtimes/</link><description>&lt;p&gt;&lt;em&gt;会员帖子最初由 Keegan McCallum 发表在&lt;a href="https://superorbital.io/blog/gpu-kubernetes-underutilization/"&gt;SuperOrbital 的博客&lt;/a&gt;上&lt;/em&gt;&lt;/p&gt;&lt;h2 class="wp-block-heading" id="introduction"&gt;介绍&lt;/h2&gt;&lt;p&gt;在本博客文章系列的前几部分中，我们探讨了使用 NVIDIA 设备插件管理 Kubernetes 集群中的 GPU 资源的基础知识（&lt;a href="https://superorbital.io/blog/gpu-kubernetes-nvidia-device-plugin/"&gt;第 1 部分&lt;/a&gt;），并深入研究了高级配置和故障排除技术（&lt;a href="https://superorbital.io/blog/gpu-kubernetes-nvidia-advanced-troubleshooting/"&gt;第 2 部分&lt;/a&gt;）。我们强调了 Kubernetes 环境中高效 GPU 管理对于支持大规模机器学习工作负载的重要性。&lt;/p&gt;&lt;p&gt;在最后一部分中，我们将解决 Kubernetes 中 GPU 利用率不足的问题，并讨论一些旨在优化资源使用和成本效益的创新项目和解决方案。通过最大限度地提高 GPU 利用率，组织可以充分利用每个 GPU，从而释放其 GPU 投资的全部潜力。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="the-problem-of-gpu-underutilization-in-kubernetes"&gt; Kubernetes 中 GPU 利用率不足的问题&lt;/h2&gt;&lt;p&gt;阅读本系列后，您已经在集群上运行了&lt;a href="https://superorbital.io/blog/gpu-kubernetes-nvidia-device-plugin/"&gt;&lt;code&gt;nvidia-device-plugin&lt;/code&gt;&lt;/a&gt; ，并且已经启动了一些 GPU 节点。您的代码正在识别&lt;a href="https://developer.nvidia.com/cuda-gpus"&gt;CUDA 设备&lt;/a&gt;并且正在运行，所以一切都很好，对吗？嗯，不完全是。实际上，在任何地方&lt;em&gt;使用&lt;/em&gt;接近 100% 的 GPU，尤其是在处理不同的异构工作负载时，这并非易事（&lt;a href="https://openai.com/research/ai-and-compute"&gt;事实上，OpenAI 估计只有大约 33% 的使用率&lt;/a&gt;）。考虑到 GPU 的成本极高，这也是一个需要解决的重要问题，如果您不考虑利用率，那么您将浪费大量资金。&lt;/p&gt;&lt;p&gt;好吧，那么为什么 100% 使用 GPU 这么难呢？有几个因素：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;静态分区&lt;/strong&gt;：GPU 被静态分区为固定大小的块，这可能与不同工作负载的不同资源需求不一致。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;工作负载可变性&lt;/strong&gt;：工作负载的动态特性以及资源需求的波动，可能会导致 GPU 未充分利用时出现利用率不足的情况。基本上，即使每个工作负载完全适合静态分区，也可能有一个 GPU 被部分利用，这在实际工作负载中会加剧。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;天真的调度&lt;/strong&gt;：如果你天真地依赖默认的 Kubernetes 调度程序配置，你可能会遇到&lt;a href="https://kubernetes.io/docs/concepts/scheduling-eviction/resource-bin-packing/"&gt;bin-packing&lt;/a&gt;问题。想象一下这样的场景：有 10 个节点，每个节点有 8 个 GPU，总共 80 个 GPU。如果没有指定亲和性或污点，调度程序将随机分配 GPU，从而导致每个节点上可能有少量未使用的 GPU 的情况。如果您需要使用 8 个 GPU 来调度单个 pod，即使有 10 个或更多 GPU 处于空闲状态，您也可能无法做到这一点。从 Kubernetes 1.24 开始，您可以使用 MostAllocation 策略来解决这个问题。将策略设置为&lt;code&gt;MostAllocated&lt;/code&gt;会根据资源利用率对节点进行评分，优先考虑分配较高的节点。您可以为每种资源类型设置权重，以控制其对最终分数的影响。仅考虑 GPU 的示例配置如下所示：&lt;/li&gt;&lt;/ol&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;&lt;strong&gt;apiVersion&lt;/strong&gt; : kubescheduler.config.k8s.io/v1beta3 &lt;strong&gt;kind&lt;/strong&gt; : KubeSchedulerConfiguration &lt;strong&gt;profiles&lt;/strong&gt; : - &lt;strong&gt;pluginConfig&lt;/strong&gt; : - &lt;strong&gt;name&lt;/strong&gt; : NodeResourcesFit args: scoringStrategy: type: MostAllocated resources: - &lt;strong&gt;name&lt;/strong&gt; : nvidia.com/gpu weight: 1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在我们已经确定了问题及其可能发生的原因，第一步是设置监控以在问题发生时获得一些可见性。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="monitoring-gpu-utilization-using---"&gt;使用&lt;code&gt;dcgm-exporter&lt;/code&gt;和&lt;code&gt;prometheus&lt;/code&gt;监控 GPU 利用率&lt;/h2&gt;&lt;p&gt;我们在（&lt;a href="https://superorbital.io/blog/gpu-kubernetes-nvidia-advanced-troubleshooting/"&gt;第 2 部分&lt;/a&gt;）中介绍了使用&lt;code&gt;dcgm-exporter&lt;/code&gt;和&lt;code&gt;prometheus&lt;/code&gt;来监控 GPU 运行状况，如果您还没有阅读过，值得一看。现在，我们来谈谈如何监控 GPU 利用率，因为它实际上没有很好的文档记录。 &lt;code&gt;dcgm-exporter&lt;/code&gt;导出&lt;a href="https://docs.nvidia.com/datacenter/dcgm/1.7/dcgm-api/group__dcgmFieldIdentifiers.html"&gt;&lt;strong&gt;大量&lt;/strong&gt;指标&lt;/a&gt;，并且很难准确了解您正在寻找哪一个。乍一看，将&lt;a href="https://docs.nvidia.com/datacenter/dcgm/1.7/dcgm-api/group__dcgmFieldIdentifiers.html#group__dcgmFieldIdentifiers_1gfbfcf61a6530f90fe230f2084c4b1641"&gt;DCGM_FI_DEV_GPU_UTIL&lt;/a&gt;作为监控 GPU 利用率的直接方法是可以理解的，因为它被记录为“gpu 利用率”。但是，&lt;a href="https://github.com/NVIDIA/DCGM/issues/64#issuecomment-1400811885"&gt;你就错了&lt;/a&gt;。 &lt;code&gt;DCGM_FI_DEV_GPU_UTIL&lt;/code&gt;&lt;a href="https://github.com/NVIDIA/DCGM/issues/80#issuecomment-1537603016"&gt;已过时，有一些限制并且与 MIG 不兼容&lt;/a&gt;。 &lt;code&gt;DCGM_FI_PROF_GR_ENGINE_ACTIVE&lt;/code&gt;大致相当， &lt;a href="https://docs.nvidia.com/datacenter/cloud-native/gpu-telemetry/latest/dcgm-exporter.html#multi-instance-gpu-mig-support"&gt;支持 MIG&lt;/a&gt; ，精度更高。&lt;/p&gt;&lt;p&gt; &lt;code&gt;DCGM_FI_PROF_GR_ENGINE_ACTIVE&lt;/code&gt;将使您深入了解是否有内核在 GPU 的任何流式多处理器 (SM) 上运行，这是了解整个 GPU 是否正在使用的良好开端。您可能想更深入地了解，特别是如果您正在部署自己的 CUDA 代码并希望尽可能多地利用 GPU 的性能（&lt;a href="https://developer.nvidia.com/blog/cuda-refresher-cuda-programming-model/"&gt;这篇文章&lt;/a&gt;是关于 CUDA 编程模型的精彩入门文章）。 &lt;code&gt;PROF_SM_ACTIVE&lt;/code&gt;将告诉您 GPU 上处于活动状态的 SM 的比例，让您可以较低级别地了解给定 GPU 上实际 SM 的利用率。如果您足够勇敢，可以更进一步，使用&lt;code&gt;PROF_SM_OCCUPANCY&lt;/code&gt;来获取给定 SM 上实际运行的&lt;a href="https://en.wikipedia.org/wiki/Thread_block_(CUDA_programming)#Warps"&gt;扭曲&lt;/a&gt;数量相对于理论最大值（每个 SM 2048）的比率。如果这让您目光呆滞，请从&lt;code&gt;DCGM_FI_PROF_GR_ENGINE_ACTIVE&lt;/code&gt;开始，并在需要时进一步深入研究。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="projects-and-solutions-for-improving-gpu-utilization"&gt;提高 GPU 利用率的项目和解决方案&lt;/h2&gt;&lt;p&gt;我们现在意识到 GPU 利用率不足，并且可以了解集群的问题。让我们快速浏览一些可以帮助我们最大限度提高 GPU 利用率的项目。我要指出的是，这个列表相当稀疏，但正在出现以下解决方案来解决这个代价高昂的问题。&lt;/p&gt;&lt;h3 class="wp-block-heading" id="nvidia-dynamic-resource-allocation-dra"&gt; &lt;a href="https://github.com/NVIDIA/k8s-dra-driver"&gt;Nvidia 动态资源分配 (DRA)&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;首先，DRA 是 NVIDIA 的解决方案，目前正在积极开发中，尚未适合量产。我相信这将是一个一旦准备好就可以使用的&lt;strong&gt;项目&lt;/strong&gt;，但还不是现在。顾名思义，DRA 旨在通过基于启动的工作负载使用 MIG 和/或 MPS 动态分区 GPU 来解决静态分区问题。采用与之前工作略有不同的方法，配置是根据持久卷声明 (PVC) 而不是 pod 资源请求/限制进行建模的。您首先创建资源声明，然后从工作负载中引用这些声明以在给定的 Pod 中使用它们。对于基于MPS的分区，配置如下：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;--- &lt;strong&gt;apiVersion&lt;/strong&gt; : resource.k8s.io/v1alpha2 &lt;strong&gt;kind&lt;/strong&gt; : ResourceClaim &lt;strong&gt;metadata&lt;/strong&gt; : &lt;strong&gt;namespace&lt;/strong&gt; : sharing-demo &lt;strong&gt;name&lt;/strong&gt; : gpu-mps-sharing &lt;strong&gt;spec&lt;/strong&gt; : &lt;strong&gt;resourceClassName&lt;/strong&gt; : gpu.nvidia.com &lt;strong&gt;parametersRef&lt;/strong&gt; : &lt;strong&gt;apiGroup&lt;/strong&gt; : gpu.resource.nvidia.com &lt;strong&gt;kind&lt;/strong&gt; : GpuClaimParameters &lt;strong&gt;name&lt;/strong&gt; : gpu-mps-sharing --- &lt;strong&gt;apiVersion&lt;/strong&gt; : gpu.resource.nvidia.com/v1alpha1 &lt;strong&gt;kind&lt;/strong&gt; : GpuClaimParameters &lt;strong&gt;metadata&lt;/strong&gt; : &lt;strong&gt;namespace&lt;/strong&gt; : sharing-demo &lt;strong&gt;name&lt;/strong&gt; : gpu-mps-sharing &lt;strong&gt;spec&lt;/strong&gt; : &lt;strong&gt;sharing&lt;/strong&gt; : &lt;strong&gt;strategy&lt;/strong&gt; : MPS &lt;strong&gt;mpsConfig&lt;/strong&gt; : &lt;strong&gt;defaultActiveThreadPercentage&lt;/strong&gt; : 50 &lt;strong&gt;defaultPinnedDeviceMemoryLimit&lt;/strong&gt; : 10Gi &lt;em&gt;# defaultPerDevicePinnedMemoryLimit:&lt;/em&gt; &lt;em&gt;# 0: 5Gi&lt;/em&gt; --- &lt;strong&gt;apiVersion&lt;/strong&gt; : v1 &lt;strong&gt;kind&lt;/strong&gt; : Pod &lt;strong&gt;metadata&lt;/strong&gt; : &lt;strong&gt;namespace&lt;/strong&gt; : sharing-demo &lt;strong&gt;name&lt;/strong&gt; : pod1 &lt;strong&gt;labels&lt;/strong&gt; : &lt;strong&gt;app&lt;/strong&gt; : pod &lt;strong&gt;spec&lt;/strong&gt; : &lt;strong&gt;containers&lt;/strong&gt; : - &lt;strong&gt;name&lt;/strong&gt; : ctr &lt;strong&gt;image&lt;/strong&gt; : nvcr.io/nvidia/k8s/cuda-sample:nbody-cuda11.7.1-ubuntu18.04 &lt;strong&gt;args&lt;/strong&gt; : [ &lt;em&gt;&amp;quot;--benchmark&amp;quot;&lt;/em&gt; , &lt;em&gt;&amp;quot;--numbodies=4226000&amp;quot;&lt;/em&gt; ] &lt;strong&gt;resources&lt;/strong&gt; : &lt;strong&gt;claims&lt;/strong&gt; : - &lt;strong&gt;name&lt;/strong&gt; : gpu &lt;strong&gt;resourceClaims&lt;/strong&gt; : - &lt;strong&gt;name&lt;/strong&gt; : gpu &lt;strong&gt;source&lt;/strong&gt; : &lt;strong&gt;resourceClaimName&lt;/strong&gt; : gpu-mps-sharing&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;您还可以查看&lt;a href="https://github.com/NVIDIA/k8s-dra-driver/tree/main/demo/specs/mig%2Bmps"&gt;此示例&lt;/a&gt;，看看使用 MIG 和 MPS 会是什么样子。请密切关注这个项目，因为很快有一天它将成为您利用率不足问题的答案。&lt;/p&gt;&lt;h3 class="wp-block-heading" id="nebuly-os-nos"&gt; &lt;a href="https://github.com/nebuly-ai/nos"&gt;Nebuly 操作系统（个）&lt;/a&gt;&lt;/h3&gt;&lt;p&gt; ...在那之前，Nebuly 操作系统可以拯救世界！它有相反的问题：它已准备好投入生产并积极使用，但从存储库和&lt;a href="https://docs.nebuly.com/welcome/overview"&gt;文档&lt;/a&gt;（现在指向一个完全不同的项目）的外观来看，它正在进入维护模式，而其背后的公司正在发生变化。幸运的是，文档&lt;a href="https://github.com/nebuly-ai/nos/blob/main/docs/en/docs/overview.md"&gt;仍然可以通过 GitHub 获得&lt;/a&gt;，并且该项目可以填补空白，同时我们耐心等待 DRA 为黄金时间做好准备。&lt;/p&gt;&lt;p&gt; Nebuly OS采用了更直观的方式进行&lt;a href="https://github.com/nebuly-ai/nos/blob/main/docs/en/docs/dynamic-gpu-partitioning/overview.md"&gt;GPU动态分区&lt;/a&gt;，根据资源对GPU进行分区。用于请求/限制的 yaml 键包含所需的内存量，而不是像典型请求/限制的工作方式那样引入第二个键。与 MPS 一起使用还有一些要求。对于 MPS，配置如下：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;&lt;strong&gt;apiVersion&lt;/strong&gt; : v1 &lt;strong&gt;kind&lt;/strong&gt; : Pod &lt;strong&gt;metadata&lt;/strong&gt; : &lt;strong&gt;name&lt;/strong&gt; : mps-partitioning-example &lt;strong&gt;spec&lt;/strong&gt; : &lt;strong&gt;hostIPC&lt;/strong&gt; : &lt;strong&gt;true&lt;/strong&gt; &lt;em&gt;# NOTE: for MPS hostIPC must be set to true&lt;/em&gt; &lt;strong&gt;securityContext&lt;/strong&gt; : &lt;strong&gt;runAsUser&lt;/strong&gt; : 1000 &lt;em&gt;# NOTE: for MPS containers must run as the same user as the MPS Server&lt;/em&gt; &lt;strong&gt;containers&lt;/strong&gt; : - &lt;strong&gt;name&lt;/strong&gt; : sleepy &lt;strong&gt;image&lt;/strong&gt; : &lt;em&gt;&amp;quot;busybox:latest&amp;quot;&lt;/em&gt; &lt;strong&gt;command&lt;/strong&gt; : [ &lt;em&gt;&amp;quot;sleep&amp;quot;&lt;/em&gt; , &lt;em&gt;&amp;quot;120&amp;quot;&lt;/em&gt; ] &lt;strong&gt;resources&lt;/strong&gt; : &lt;strong&gt;limits&lt;/strong&gt; : &lt;strong&gt;nvidia.com/gpu-10gb&lt;/strong&gt; : 1 &lt;em&gt;# this is specifying the part of the GPU with 10 GB of memory&lt;/em&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; MIG 更简单一些：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;&lt;strong&gt;apiVersion&lt;/strong&gt; : v1 &lt;strong&gt;kind&lt;/strong&gt; : Pod &lt;strong&gt;metadata&lt;/strong&gt; : &lt;strong&gt;name&lt;/strong&gt; : mig-partitioning-example &lt;strong&gt;spec&lt;/strong&gt; : &lt;strong&gt;containers&lt;/strong&gt; : - &lt;strong&gt;name&lt;/strong&gt; : sleepy &lt;strong&gt;image&lt;/strong&gt; : &lt;em&gt;&amp;quot;busybox:latest&amp;quot;&lt;/em&gt; &lt;strong&gt;command&lt;/strong&gt; : [ &lt;em&gt;&amp;quot;sleep&amp;quot;&lt;/em&gt; , &lt;em&gt;&amp;quot;120&amp;quot;&lt;/em&gt; ] &lt;strong&gt;resources&lt;/strong&gt; : &lt;strong&gt;limits&lt;/strong&gt; : &lt;strong&gt;nvidia.com/mig-1g.10gb&lt;/strong&gt; : 1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;同样，该项目处于维护模式，但已做好生产准备。因此，如果您&lt;strong&gt;现在&lt;/strong&gt;需要动态 GPU 分区的解决方案，那么这就是您的工具。只需准备好在 DRA 准备好迎接黄金时段后迁移到 DRA。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="conclusion"&gt;结论&lt;/h2&gt;&lt;p&gt;在这一系列博客文章中，我们探讨了 Kubernetes 环境中高效 GPU 管理的重要性。从使用 NVIDIA 设备插件的基础知识到高级配置和故障排除技术，我们涵盖了 GPU 资源管理的关键方面。&lt;/p&gt;&lt;p&gt;在最后一部分中，我们重点讨论了 GPU 利用率不足的关键问题，并讨论了旨在应对这一挑战的技术和解决方案。通过利用&lt;code&gt;dcgm-exporter&lt;/code&gt;和&lt;code&gt;prometheus&lt;/code&gt;等工具来监控 GPU 利用率并探索 DRA 和 Nebuly OS 等解决方案，组织可以优化其 GPU 资源并实现更好的性能和成本效益。&lt;/p&gt;&lt;p&gt;随着 GPU 加速工作负载的采用不断增长，组织必须及时了解 GPU 管理技术的最新发展和进步。通过采用创新解决方案和最佳实践，组织可以充分发挥 GPU 投资的潜力，推动人工智能计划取得成功。&lt;/p&gt;&lt;h3 class="wp-block-heading" id="further-reading-and-resources"&gt;进一步阅读和资源&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://developer.nvidia.com/blog/improving-gpu-utilization-in-kubernetes"&gt;Nvidia：提高 Kubernetes 中的 GPU 利用率&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://developer.nvidia.com/dcgm"&gt;英伟达：DCGM&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Sun, 02 Jun 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/06/03/tackling-gpu-underutilization-in-kubernetes-runtimes/</guid></item><item><title>【Update multiple Kubernetes objects/configmaps in one go!】一次性更新多个 Kubernetes 对象/配置映射！</title><link>https://www.cncf.io/blog/2024/05/31/update-multiple-kubernetes-objects-configmaps-in-one-go/</link><description>&lt;p&gt;&lt;em&gt;社区帖子最初由 Sunny Bhambhani 在&lt;a href="https://dev.to/aws-builders/update-multiple-kubernetes-objectsconfigmaps-in-one-go-5417"&gt;dev.to&lt;/a&gt;上发布&lt;/em&gt;&lt;/p&gt;&lt;p&gt;在某些情况下，我们可能只需要根据我们的要求更新 Kubernetes 配置映射或任何其他 Kubernetes 对象。&lt;/p&gt;&lt;p&gt;假设它只是一两个配置映射（这里我们讨论配置映射只是为了简单起见，但它也适用于其他 Kubernetes 对象），那么这很好，对吧？我们可以简单地执行以下操作：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; &lt;code&gt;kubectl edit -n NAMESPACE_NAME configmap CONFIGMAP_NAME&lt;/code&gt;&lt;/li&gt;&lt;li&gt;根据我们的要求更新它。&lt;/li&gt;&lt;li&gt;保存。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;但想想一个场景，我们需要用相同的值更新+100个配置映射，该怎么办？&lt;/p&gt;&lt;p&gt;我们无法更新或编辑每个对象，因为这会有点乏味并且容易出错。另外，我们可能会跳过其中一些。&lt;/p&gt;&lt;p&gt;因此，最好的方法是以自动化方式使用&lt;code&gt;patch&lt;/code&gt;命令。&lt;/p&gt;&lt;p&gt;有关更多详细信息，请参阅： &lt;a href="https://kubernetes.io/docs/reference/kubectl/generated/kubectl_patch/"&gt;https://kubernetes.io/docs/reference/kubectl/&lt;/a&gt; generated/kubectl_patch/。&lt;/p&gt;&lt;p&gt;让我们看看实际效果：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;我有一个非常小的配置图，其中包含一些数据库详细信息。&lt;/li&gt;&lt;/ul&gt;&lt;pre class="wp-block-code"&gt; &lt;code class="language-javascript" lang="javascript"&gt;apiVersion: v1 data: DATABASE_HOST: &amp;quot;api01.ybdb.io&amp;quot; DATABASE_NAME: &amp;quot;api01&amp;quot; DATABASE_PORT: &amp;quot;5433&amp;quot; kind: ConfigMap metadata: name: api01-configmap namespace: default&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;现在，我们假设有一个更新，而不是端口号 5433。我们的数据库现在侦听端口 5444。&lt;/li&gt;&lt;li&gt;我们可以使用&lt;code&gt;kubectl edit&lt;/code&gt;轻松完成此任务，但让我们看看&lt;code&gt;patch&lt;/code&gt;的实际效果：&lt;/li&gt;&lt;/ul&gt;&lt;pre class="wp-block-code"&gt; &lt;code class="language-bash" lang="bash"&gt;$ kubectl patch configmap api01-configmap -n default -p &amp;#39;{&amp;quot;data&amp;quot;:{&amp;quot;DATABASE_PORT&amp;quot;:&amp;quot;5444&amp;quot;}}&amp;#39; configmap/api01-configmap patched $ kubectl get cm -n default -o yaml api01-configmap apiVersion: v1 data: DATABASE_HOST: api01.ybdb.io DATABASE_NAME: api01 DATABASE_PORT: &amp;quot;5444&amp;quot; kind: ConfigMap metadata: creationTimestamp: &amp;quot;2024-05-22T10:06:39Z&amp;quot; name: api01-configmap namespace: default resourceVersion: &amp;quot;67651&amp;quot; uid: 2d49a0ea-6910-420c-b2bf-00e42e6c08d7&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;该命令非常简单&lt;code&gt;kubectl patch configmap api01-configmap -n default -p &amp;#39;{&amp;quot;data&amp;quot;:{&amp;quot;DATABASE_PORT&amp;quot;:&amp;quot;5444&amp;quot;}}&amp;#39;&lt;/code&gt;&lt;/li&gt;&lt;li&gt; -n 是指定configmap所在的命名空间名称。&lt;/li&gt;&lt;li&gt; -p 是指定我们想要在 Kubernetes 对象中进行哪些补丁/更新。&lt;/li&gt;&lt;li&gt;在这里，在&lt;code&gt;data:&lt;/code&gt;下，我们将名为&lt;code&gt;DATABASE_PORT:&lt;/code&gt;的键更新为&lt;code&gt;5444&lt;/code&gt; 。&lt;/li&gt;&lt;li&gt;注意：如果&lt;code&gt;DATABASE_PORT:&lt;/code&gt;键不存在，它将为我们创建该键。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;假设您还想在同一命令中查看输出，然后添加类型为 [json、name、yaml 等] 的 -o 或 –output 标志。&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class="language-bash" lang="bash"&gt;$ kubectl patch configmap api01-configmap -n default -p &amp;#39;{&amp;quot;data&amp;quot;:{&amp;quot;DATABASE_PORT&amp;quot;:&amp;quot;5444&amp;quot;}}&amp;#39; -o yaml apiVersion: v1 data: DATABASE_HOST: api01.ybdb.io DATABASE_NAME: api01 DATABASE_PORT: &amp;quot;5444&amp;quot; kind: ConfigMap metadata: creationTimestamp: &amp;quot;2024-05-22T10:47:41Z&amp;quot; name: api01-configmap namespace: default resourceVersion: &amp;quot;69416&amp;quot; uid: a303bd0e-7f61-49c0-b671-06649ecdf999&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但还有另一个问题，你也不能运行补丁命令+100次，我的意思是你绝对可以，但同样也可能容易出错。&lt;/p&gt;&lt;p&gt;因此，在这种情况下，我们可以编写一个简单的可重用 bash 脚本，它可以为我们完成这项工作，并可以帮助我们一次性更新 +100 个配置映射。&lt;/p&gt;&lt;p&gt;它可以是任何语言，但我选择了&lt;code&gt;bash&lt;/code&gt; ，因为它很常见。&lt;/p&gt;&lt;p&gt;脚本的快速概要：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;这里我有三个变量，NAMESPACE（对象所在的位置）、CONFIGMAP_FILE（输入文件，其中包含需要更新的所有配置映射的列表）、DATA（一组需要替换/添加的键：值对） 。&lt;/li&gt;&lt;li&gt;在这里，我还创建日志文件（update_cm.log – 包含通用可读信息，patch.log – 包含 patch 命令的输出）。&lt;/li&gt;&lt;li&gt;截至目前，我只是添加了添加操作，但我们也可以执行其他操作，例如替换或删除（根据我们的要求）。&lt;/li&gt;&lt;/ul&gt;&lt;pre class="wp-block-code"&gt; &lt;code class="language-bash" lang="bash"&gt;#!/bin/bash NAMESPACE=&amp;quot;default&amp;quot; CONFIGMAP_FILE=&amp;quot;configmaps&amp;quot; DATA=&amp;#39;{&amp;quot;data&amp;quot;:{&amp;quot;DATABASE_PORT&amp;quot;:&amp;quot;5444&amp;quot;}}&amp;#39; rm patch.log update_cm.log if [ ! -f &amp;quot;$CONFIGMAP_FILE&amp;quot; ]; then echo &amp;quot;File $CONFIGMAP_FILE not found.&amp;quot; exit 1 fi echo `date` &amp;gt;&amp;gt; update_cm.log echo &amp;quot;----------------------------&amp;quot; &amp;gt;&amp;gt; update_cm.log action=$1 if [ &amp;quot;$action&amp;quot; == &amp;quot;add&amp;quot; ]; then echo &amp;quot;Action: $action&amp;quot; echo &amp;quot;Action: $action&amp;quot; &amp;gt;&amp;gt; update_cm.log while IFS= read -r cm; do echo &amp;quot;Updating ConfigMap: $cm&amp;quot; echo &amp;quot;Updating ConfigMap: $cm&amp;quot; &amp;gt;&amp;gt; update_cm.log kubectl patch configmap &amp;quot;$cm&amp;quot; -n &amp;quot;$NAMESPACE&amp;quot; -p $DATA &amp;gt;&amp;gt; patch.log 2&amp;gt;&amp;amp;1 done &amp;lt; &amp;quot;$CONFIGMAP_FILE&amp;quot; else echo &amp;quot;Invalid action, please specify add&amp;quot;. exit 1 fi echo &amp;quot;----------------------------&amp;quot; &amp;gt;&amp;gt; update_cm.log&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请随意使用它，根据您的要求进行调整。该脚本适用于配置映射，但如果需要，我们也可以为其他对象编写类似的逻辑。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;快乐学习🙂&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;谷歌。&lt;/li&gt;&lt;li&gt; Kubernetes 文档 ( &lt;a href="https://kubernetes.io/docs/home/"&gt;https://kubernetes.io/docs/home/&lt;/a&gt; )。&lt;/li&gt;&lt;li&gt; &lt;code&gt;kubectl explain&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;免责声明：&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;我们不应该手动更新/修补 Kubernetes 对象，这应该在绝对必要或即时需要时完成。&lt;/li&gt;&lt;li&gt;理想情况下，所有这些值都应来自维护值文件的版本控制系统。 &lt;/li&gt;&lt;/ul&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Thu, 30 May 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/05/31/update-multiple-kubernetes-objects-configmaps-in-one-go/</guid></item><item><title>【All about Kubernetes Community Days UK – London 2024】关于英国 Kubernetes 社区日 – 2024 年伦敦</title><link>https://www.cncf.io/blog/2024/05/31/all-about-kubernetes-community-days-uk-london-2024/</link><description>&lt;p&gt;&lt;em&gt;KCD 帖子最初由英国 Kubernetes 社区日 - 伦敦团队在&lt;a href="https://www.linkedin.com/pulse/kcd-uk-london-2024-kcd-uk-u06be/"&gt;Linkedin&lt;/a&gt;上发布&lt;/em&gt;&lt;/p&gt;&lt;h2 class="wp-block-heading" id="ember42"&gt;什么是 KCD？&lt;/h2&gt;&lt;p id="ember43"&gt;来自&lt;a href="https://www.cncf.io/kcds/"&gt;https://www.cncf.io/kcds/&lt;/a&gt;&lt;/p&gt;&lt;p class="is-style-smaller-quote"&gt; KCD 是社区组织的活动，聚集来自开源和云原生社区的采用者和技术人员进行教育、协作和网络交流。 KCD 由云原生计算基金会 (CNCF) 支持。这些有趣的、本地定义的活动有助于发展和维持 Kubernetes 和其他云原生社区。  我们感谢 DevOpsDays 和 OpenStack Days 提供了该计划的一些核心思想和内容。 KCD 可以是面对面的、虚拟的或混合的。如果可能的话，强烈鼓励亲自参加。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="ember45"&gt;英国 KCD 的一些历史&lt;/h2&gt;&lt;p id="ember46"&gt;这一切都始于来自英国各地的 Cloud Native / CNCF / Kubernetes 聚会的各个组织者聚集在一起，并开始讨论为整个英国运行组合 KCD 的想法。我们有不同的背景，但将我们联系在一起的是我们对社区的热爱和对建立网络的热情。这一切都回到了 2021 年，当时没有人为现场活动做好准备，因此我们的第一场活动是 100% 虚拟的，通过 YouTube 进行直播。&lt;/p&gt;&lt;ul&gt;&lt;li&gt; &lt;a href="https://www.youtube.com/playlist?list=PLX3geWFOgXowfx3Li46MbdCc9NK8803rl"&gt;KCD UK 2021 的 YouTube 播放列表&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p id="ember48"&gt;我们从与会者那里得到了很好的反馈，并得到了赞助商的大力支持，因此我们在 2022 年举办了第一次现场活动。无论是作为与会者还是作为组织者，我们都有在伦敦参加 CodeNode 的经历，所以我们知道这将是一个绝佳的地点。尽管每个人仍然很紧张，并且我们尽最大努力采取新冠预防措施来保护我们最脆弱的社区成员，但活动的参与人数很多，反馈也非常积极。&lt;/p&gt;&lt;ul&gt;&lt;li&gt; &lt;a href="https://www.youtube.com/playlist?list=PLX3geWFOgXozvW1avyeZfgPJXrWrzHgYV"&gt;KCD UK 2022 的 YouTube 播放列表&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p id="ember50"&gt;2023 年，我们留在了 CodeNode，这是一个我们逐渐爱上的地方，那里的团队非常棒。我们对餐饮做了一些改进，受到了与会者（和我们）的欢迎！我们的定期社交晚会非常适合放松一下并与所有与会者和赞助商进行交流。每年我们都会收集反馈，看看我们可以在哪些方面进行改进，所有这些都使 2023 年成为迄今为止最好的一年。&lt;/p&gt;&lt;ul&gt;&lt;li&gt; &lt;a href="https://www.youtube.com/playlist?list=PLX3geWFOgXox68Fiq4wHUIdt-hjZf3Dli"&gt;KCD UK 2023 的 YouTube 播放列表&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p id="ember52"&gt;我们不会直播现场活动，但我们会努力录制所有会议，并在活动发生后一个月内在 YouTube 上向所有人提供。 &lt;/p&gt;&lt;figure class="wp-block-image"&gt;&lt;img alt="KCD 英国 YouTube 频道" src="https://media.licdn.com/dms/image/D4E12AQHx3JpIx96CBQ/article-inline_image-shrink_1000_1488/0/1716287329208?e=1722470400&amp;amp;v=beta&amp;amp;t=8hf4GRGndFkc-JGK5-2KmnGb1mTmuFFeihUULj4IZGA" /&gt;&lt;figcaption class="wp-element-caption"&gt; KCD 英国 YouTube 频道&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 class="wp-block-heading" id="ember54"&gt;那么什么是 KCD UK – 伦敦 2024？&lt;/h2&gt;&lt;p id="ember55"&gt;我们欢迎云原生和 Kubernetes 社区的所有人今年晚些时候（准确地说是 10 月 22 日和 23 日）来到伦敦。我们将再次来到 CodeNode，这是一个绝佳的地点，许多人都知道它多年来举办了各种技术活动。尽管内容通常更倾向于技术方面，但我们欢迎从各个角度进行讨论，它既适合新手也适合经验丰富的 Kubernaut！我们有大学生志愿者来帮助举办活动，他们有机会观看演讲并总是告诉我们他们学到了多少。&lt;/p&gt;&lt;p id="ember56"&gt;我们在 CodeNode London 举办了 2 天的活动，接待了大约 300 人，其中包括 10-15 名赞助商。我们每天都会运行 2 个曲目，虽然这些曲目没有特定的主题，但我们通常最终会选择一个与安全性更相关的曲目。我们还尝试举办实践实验室研讨会，在那里您可以进行一些指导性的实验室工作来构建与云原生相关的东西。我们的赞助商都在社交和午餐区获得了一个空间，这是一个了解可用内容的绝佳机会，无论是产品、服务还是其他东西！通常会有一两个奖品😉 &lt;/p&gt;&lt;figure class="wp-block-image is-resized"&gt;&lt;img alt="2024 年 10 月 22 日至 23 日在伦敦 CodeNode。超过 250 名与会者发表主题演讲、2 场演讲以及研讨会" src="https://media.licdn.com/dms/image/D4E12AQGu6-_f445uPw/article-inline_image-shrink_1500_2232/0/1712232414680?e=1722470400&amp;amp;v=beta&amp;amp;t=lyrS9RB2iYBEACNFkCul1sGgpKN4CmmZKGuhuQ8FV-g" style="width: 900px; height: auto;" /&gt;&lt;figcaption class="wp-element-caption"&gt; 2024 年 10 月 22 日至 23 日在伦敦 CodeNode。超过 250 名与会者发表主题演讲、2 场演讲以及研讨会&lt;/figcaption&gt;&lt;/figure&gt;&lt;p id="ember58"&gt;我们努力代表云原生社区的多样性，尽可能为所有人创造一个欢迎的空间。我们有两个演讲曲目的现场字幕，并为任何可能需要的人提供奖学金门票。我们欢迎人们提出可能认为重要的任何其他住宿的建议。我们是一群志愿者组织者，我们努力保持预算紧张，所有利润都捐赠给慈善事业。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="ember59"&gt;为什么参加？&lt;/h2&gt;&lt;p id="ember60"&gt;我们一直在寻找对社区有教育意义的演讲者和主题，所以一定要带上记事本和笔！您将学习做新事物的酷方法（Kubernetes 中的人工智能、太空中的云原生、构建自己的社区等），或者只是学习如何改进您已经在做的事情。这也是了解其他人在做什么的好方法，当然也可以结交新朋友并与老朋友保持联系（我最喜欢的部分）！ &lt;/p&gt;&lt;figure class="wp-block-image is-resized"&gt;&lt;img alt="显示 KCD 英国与会者的人口统计细分的图片。一般运营和平台、开发人员以及领导力和社区" src="https://media.licdn.com/dms/image/D4E12AQEGrXDZ4r-SIQ/article-inline_image-shrink_1500_2232/0/1712232417001?e=1722470400&amp;amp;v=beta&amp;amp;t=OttskRQgbJECJWegGnI4CB3ahGamp7qtZFlur_0rFNc" style="width: 901px; height: auto;" /&gt;&lt;figcaption class="wp-element-caption"&gt;显示 KCD 英国与会者的人口统计细分的图片。一般运营和平台、开发人员以及领导力和社区&lt;/figcaption&gt;&lt;/figure&gt;&lt;p id="ember62"&gt;如果您目前失业，或者正在寻找新的挑战，我们有一个工作委员会，许多赞助商也在招聘。如果您需要票证方面的支持，请联系我们。去年我们还举办了职业建议会议。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="ember63"&gt;征文&lt;/h2&gt;&lt;p id="ember64"&gt;您可能想参加的另一个原因是演讲！在撰写本文时（自我提醒：几个月后更新），我们的 CFP 已开放，并将持续到 6 月 3 日。我们欢迎来自各个领域的演讲建议，并鼓励第一次演讲。尽管该活动倾向于技术性，但如果您有一些不太技术性的话题想要谈论，我们很乐意看到您的提交！我们确实支持来自英国的提交，但在过去，当我们认为社区会喜欢一些有趣的话题时，我们会有国际演讲者。&lt;/p&gt;&lt;p id="ember65"&gt;我们很乐意看到和听到正在解决现实世界中 Kubernetes 问题的首次演讲者和最终用户的意见。如果您需要一些支持、指导，甚至需要一位共同演讲者，我们很乐意与您交谈，看看我们如何为您提供帮助。&lt;/p&gt;&lt;p id="ember66"&gt;如果您对此流程有任何疑问，或者希望对您提交的内容获得任何支持，请联系我们！&lt;/p&gt;&lt;p id="ember67"&gt; &lt;a href="https://sessionize.com/kcd-uk-london-2024"&gt;KCD 英国伦敦 – 2024 年：征集演讲者 @&lt;/a&gt; &lt;a href="http://sessionize.com/"&gt;Sessionize.com&lt;/a&gt;&lt;/p&gt;&lt;h2 class="wp-block-heading" id="ember68"&gt;赞助机会&lt;/h2&gt;&lt;figure class="wp-block-image"&gt;&lt;img alt="马特·贾维斯 (Matt Jarvis) 感谢往年赞助商的图片" src="https://media.licdn.com/dms/image/D4E12AQEaJXmMay_mAA/article-inline_image-shrink_1500_2232/0/1712232418623?e=1722470400&amp;amp;v=beta&amp;amp;t=Wg12OCMeUq-28XcE_OxCjdneOSlE7_C6tsqSNLpQqKM" /&gt;&lt;figcaption class="wp-element-caption"&gt;马特·贾维斯 (Matt Jarvis) 感谢往年赞助商的图片&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul&gt;&lt;li&gt;2x 白金&lt;/li&gt;&lt;li&gt;12x 金币&lt;/li&gt;&lt;li&gt;3x 银牌&lt;/li&gt;&lt;li&gt;媒体赞助&lt;/li&gt;&lt;/ul&gt;&lt;p id="ember71"&gt;赞助商可以获得某种展位、活动促销、免费门票和其他好处。我们将定期在社交媒体上进行宣传（Twitter 和 LinkedIn 上约有 1000 名关注者），以便较早的赞助商获得更多的社交媒体播放时间。&lt;/p&gt;&lt;p id="ember72"&gt;我们还在 2023 年推出了赞助商护照，鼓励与会者拜访我们的白金和黄金赞助商，进行快速交谈并获得印章。填写完整的护照即可参加抽奖。这是吸引赞助商社区对话的好方法。所有赞助商也会获得一些长尾利益，因为他们不可避免地会出现在活动照片、社交媒体宣传、未来的招股说明书等中。&lt;/p&gt;&lt;p id="ember73"&gt;&lt;a href="https://drive.google.com/file/d/15G0zurHsvsvOFWUOZneBeJMZr1AFvDRs/view"&gt;完整的赞助商招股说明书可以在这里找到&lt;/a&gt;。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="ember74"&gt;在社交媒体上找到我们&lt;/h2&gt;&lt;p id="ember75"&gt;在各种社交媒体渠道上查找并关注我们，以获取最新消息、了解最新活动以及一些可怕的模因。 &lt;/p&gt;&lt;figure class="wp-block-image"&gt;&lt;img alt="关于 Squirrels 构建 Kubernetes 集群的“Hey Duggie”模因" src="https://media.licdn.com/dms/image/D4E12AQHvsa5ZlrlExQ/article-inline_image-shrink_1000_1488/0/1712232418565?e=1722470400&amp;amp;v=beta&amp;amp;t=Sc1CDqjKphweCT0siE89uyPkP2HfTLj8lv-4Izrks4U" /&gt;&lt;figcaption class="wp-element-caption"&gt;关于 Squirrels 构建 Kubernetes 集群的“Hey Duggie”模因&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://www.linkedin.com/company/kcd-uk"&gt;领英&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://twitter.com/kcduk_io"&gt;推特&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.youtube.com/@KubernetesCommunityDaysUK"&gt;YouTube&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 class="wp-block-heading" id="ember78"&gt;关键日期&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;CFP 将于三月开放（现已开放！）&lt;/li&gt;&lt;li&gt; CFP 关闭 – 6 月 3 日&lt;/li&gt;&lt;li&gt;CFP 通知 – 7 月 29 日&lt;/li&gt;&lt;li&gt;时间表公告 – 8 月 5 日&lt;/li&gt;&lt;/ul&gt;&lt;p id="ember80"&gt;如果您对 KCD UK – 伦敦 2024 有任何疑问，请联系我们。我们希望今年晚些时候能见到尽可能多的人！ &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Thu, 30 May 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/05/31/all-about-kubernetes-community-days-uk-london-2024/</guid></item><item><title>【Xline command Deduplication Mechanism (II) — RIFL implementation】Xline命令去重机制（二）——RIFL实现</title><link>https://www.cncf.io/blog/2024/05/30/xline-command-deduplication-mechanism-ii-rifl-implementation/</link><description>&lt;p&gt;&lt;em&gt;DatenLord 的会员帖子&lt;/em&gt;&lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="Xline命令重复数据删除机制（二）——DatenLord的RIFL实现" class="wp-image-110976" height="611" src="https://www.cncf.io/wp-content/uploads/2024/06/image-10.jpeg" width="1431" /&gt;&lt;/figure&gt;&lt;p&gt;在&lt;a href="https://www.cncf.io/blog/2024/05/02/early-explorations-and-practices-of-xline-a-stateful-application-managed-by-karmada/"&gt;上一篇文章&lt;/a&gt;中，我们从为什么需要命令去重机制出发，介绍了去重的必要性以及Xline当前去重机制的一些问题，并讲解了RIFL（Reusable Infrastructure for Linearizability）的工作原理，并分析了其表现。本文将在此基础上进一步深入讲解。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;&lt;strong&gt;在CURP中实施RIFL的问题&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;RIFL的目的是作为系统基础设施，为RPC提供exactly-once语义，这自然可以应用于CURP系统。在 CURP 论文中，多次提到 RIFL，以及需要对 RIFL 进行一些更改才能迁移到 CURP。&lt;/p&gt;&lt;p&gt;建议没有读过前面的Xline源码分析的读者先阅读并了解CURP的原理。&lt;/p&gt;&lt;p&gt;在 CURP 论文 §C.1 对 RIFL 的修改中，描述了以下两个更改：&lt;/p&gt;&lt;p&gt;首先，由于见证人的重放机制，任何命令都可能被新的master重复接受，如果我们依赖RIFL提供的重复数据删除机制，重放命令的无序排序可能会导致后来的确认被拒绝重播之前的命令。例如Cmd(first_incomplete=5)、Cmd(first_incomplete=1)，如果按照5 -&amp;gt; 1的顺序重放，那么1会被忽略。所以在见证重放阶段，不执行processAck。&lt;/p&gt;&lt;p&gt;其次，在RIFL中，当client_id由于客户端崩溃而过期时，服务器会清理该client_id下的所有完成记录，然后在见证重放中，过期的client_id的命令将被忽略。所以client_id的过期可能需要延迟到命令同步到备份服务器为止。&lt;/p&gt;&lt;p&gt;本文的内容是介绍如何在Xline的CURP系统中实现RIFL并解决一些相关问题。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt; &lt;strong&gt;Xline中命令去重的实现&lt;/strong&gt;&lt;/h2&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;租赁服务器实施&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;在RIFL中，LeaseManager模块将充当客户端生存的见证人。在Xline中，依赖另一个系统提供Lease机制是令人困惑的，似乎解决这个问题的唯一方法就是在Xline内部实现Lease Server。在这三种节点角色中，Leader 是最合适的。&lt;/p&gt;&lt;p&gt;在实现租赁服务器之前，我们需要定义以下功能：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;客户端在发送第一个提案时需要获取其客户端 id，因此它需要向租赁服务器注册并获取客户端 id。&lt;/li&gt;&lt;li&gt; Client需要定期向Lease Server发送心跳，以保证租约长期有效。&lt;/li&gt;&lt;li&gt;当客户端自己的客户端ID过期时，客户端需要从租赁服务器获取新的客户端ID。&lt;/li&gt;&lt;li&gt; Leader需要检查一个proposal是否过期，需要检查Lease Server中的client id是否过期。&lt;/li&gt;&lt;li&gt;当客户端 ID 过期时，租赁服务器应删除并回收该客户端 ID。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;确定上诉的功能后，可以得到Lease Server的RPC定义：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;message ClientLeaseKeepAliveRequest {&lt;br /&gt;    // The optional client_id, 0 means a grant request&lt;br /&gt;    uint64 client_id = 1;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; message ClientLeaseKeepAliveResponse {&lt;br /&gt;    // The refreshed(generated) client_id&lt;br /&gt;    uint64 client_id = 1;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; service Protocol {&lt;br /&gt;    ...&lt;br /&gt;    rpc ClientLeaseKeepAlive (stream ClientLeaseKeepAliveRequest)&lt;br /&gt;            returns (ClientLeaseKeepAliveResponse);&lt;br /&gt; }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; RPC 的发送者是一个流。流中的所有请求都是心跳，除了用于更新租约的客户端 ID 的第一个请求。&lt;/p&gt;&lt;p&gt;只有当Lease Server发现client id已经过期或者不存在时，才会生成一个新的client id并返回给client，否则服务器永远不会返回消息。&lt;/p&gt;&lt;p&gt;另外，这也解决了RIFL论文中描述的问题之一：RPC Server与Lease Server反复检查Lease情况会成为瓶颈。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;跟踪器实施&lt;/strong&gt;&lt;/h3&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="RequestTracker、LeaseManager 和 ResultTracker 模块描述的信息图" class="wp-image-110977" height="872" src="https://www.cncf.io/wp-content/uploads/2024/06/image-1-4.jpg" width="1400" /&gt;&lt;/figure&gt;&lt;p&gt;回顾RIFL中的一些组件，我们可以看到有两个组件非常相似：RequestTracker和ResultTracker。&lt;/p&gt;&lt;p&gt;对于客户端的RequestTracker来说，需要生成一系列连续的序列号，并记录这些序列号的接受情况，进而驱动第一个不完整的增加，确认接收到的位置并发送给服务器进行恢复。&lt;/p&gt;&lt;p&gt;同样，服务器端的ResultTracker需要记录来自客户端的序列号，检查是否有重复，最后根据来自客户端的第一个不完整的记录恢复所有以前的记录。&lt;/p&gt;&lt;p&gt;很容易想到下面的序列号序列的线性数据结构设计。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="客户端/服务器的数据结构设计收到服务器/客户端的返回/请求，客户端/服务器未收到服务器/客户端的返回/请求" class="wp-image-110979" height="383" src="https://www.cncf.io/wp-content/uploads/2024/06/image-1.png" width="1400" /&gt;&lt;/figure&gt;&lt;p&gt;绿色表示客户端/服务器收到来自服务器/客户端的返回/请求。&lt;/p&gt;&lt;p&gt;红色表示客户端/服务器尚未收到服务器/客户端的返回/请求。&lt;/p&gt;&lt;p&gt;第一个不完整是第一个未收到 RPC 的序列号。由于第一个不完整是由客户端推送然后同步到服务器的，因此服务器上的第一个不完整通常会滞后一点（如上图中的虚线所示）。&lt;/p&gt;&lt;p&gt;考虑到每个网格只有“绿色”和“红色”两种颜色，这种数据结构设计的最优实现是使用bitvec（位图），这样可以节省大量的内存开销，并且在遍历时可以批量加速。&lt;/p&gt;&lt;p&gt;具体数据结构如下：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class="language-sql" lang="sql"&gt;/// Layout:&lt;br /&gt; ///&lt;br /&gt; /// `010000000101_110111011111_000001000000000`&lt;br /&gt; ///  ^        ^                ^    ^&lt;br /&gt; ///  |        |________________|____|&lt;br /&gt; ///  |________|         len    |____|&lt;br /&gt; ///     head                    tail&lt;br /&gt; #[derive(Debug, Clone)]&lt;br /&gt; struct BitVecQueue {&lt;br /&gt;    /// Bits store&lt;br /&gt;    store: VecDeque&amp;lt;usize&amp;gt;,&lt;br /&gt;    /// Head length indicator&lt;br /&gt;    head: usize,&lt;br /&gt;    /// Tail length indicator&lt;br /&gt;    tail: usize,&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; /// Track sequence number for commands&lt;br /&gt; #[derive(Debug, Default, Clone)]&lt;br /&gt; pub(super) struct Tracker {&lt;br /&gt;    /// First incomplete seq num, it will be advanced by client&lt;br /&gt;    first_incomplete: u64,&lt;br /&gt;    /// inflight seq nums proposed by the client, each bit&lt;br /&gt;    /// represent the received status starting from `first_incomplete`.&lt;br /&gt;    /// `BitVecQueue` has a better memory compression ratio than `HashSet`&lt;br /&gt;    /// if the requested seq_num is very compact.&lt;br /&gt;    inflight: BitVecQueue,&lt;br /&gt; }&lt;/code&gt;&lt;/pre&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;追踪器恢复&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;当上面的核心组件正常工作时，一切看起来都很好，但如果出现问题，情况还会这样吗？&lt;/p&gt;&lt;p&gt;例如，如果发生领导权转移并且新领导者无法从旧领导者跟踪器获取信息怎么办？显然，这将是一个问题，因为出于性能考虑，我们不会访问每次重复数据删除的状态机，而是维护一组基于内存的跟踪器，并且我们必须考虑如何在重复数据删除期间恢复此数据结构。系统迁移。&lt;/p&gt;&lt;p&gt; RIFL论文没有详细描述如何实现tracker恢复，这是我们实现中遇到的具体问题； RIFL 作为通用机制不讨论这种情况。然而，RIFL 论文确实提到需要保存完成记录：&lt;/p&gt;&lt;p&gt;为了实现一次性语义，RIFL 必须解决四个整体问题：RPC 识别、完成记录持久性、重试交会和垃圾收集&lt;/p&gt;&lt;p&gt;另外，建议完成记录和操作对象需要存放在一起。&lt;/p&gt;&lt;p&gt; RIFL 使用单一原则来处理迁移和分布式操作。每个操作都与底层系统中的特定对象相关联，并且完成记录存储在该对象存储的任何位置。&lt;/p&gt;&lt;p&gt;如果我们可以从操作对象或完成记录中恢复跟踪器，我们就可以避免由于跟踪器丢失而导致的错误分类。&lt;/p&gt;&lt;p&gt;第一个问题是在哪里存储完成记录。答案就在日志中，它由系统中的每个节点同步并应用于自己的状态机。&lt;/p&gt;&lt;p&gt;不过CURP系统有一些不同之处，Witness节点也会存储proposal，并且完成记录也可以来自这些proposal，在CURP系统的恢复阶段，我们可以从Witness恢复的proposal中恢复tracker，对于例如，当我们收到 Cmd(client_id=1,first_incomplete=1,first_complete=1,first_complete=1,first_complete=1,first_complete=1,first_complete=1)1,first_incomplete=5) 时，我们可以更新 ResultTracker id为1到5的客户端（注意不要在恢复阶段处理Ack，这会导致后续first_incomplete小于5的命令被过滤）。基于这个机制，我们不需要担心提前提交的提案因为尚未持久化而无法恢复完成记录。&lt;/p&gt;&lt;p&gt;在我们的实现中，我们结合了上述两种场景：从日志中恢复和从恢复的命令中恢复。这样，我们就可以确定我们已经完全恢复了跟踪器。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;真的完全康复了吗？&lt;/strong&gt; &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="显示客户端发送的序列号分为三段的流程图" class="wp-image-110981" height="519" src="https://www.cncf.io/wp-content/uploads/2024/06/image-3.jpg" width="1400" /&gt;&lt;/figure&gt;&lt;p&gt;该图将客户端发送的序列号分为三段，tracker恢复的目标是客户端向服务器确认完成的位置以及客户端传出的所有序列号。&lt;/p&gt;&lt;p&gt;在这三个段中，第一个段无法恢复，如果客户端已经确认，则意味着它已经返回给用户，因此客户端不太可能重试此命令。它之前可能已经重试过这个命令，并且重试请求在网络中延迟了很长时间，但不会到达新的领导者。&lt;/p&gt;&lt;p&gt;第三部分可以从见证人的推测​​池中恢复。&lt;/p&gt;&lt;p&gt;对于第二段，默认读取日志可能无法恢复所有内容，并且使用日志压缩机制，我们无法预测压缩位置是否在第一段中。为了彻底解决这个问题，我们需要对日志压缩施加一个限制：&lt;strong&gt;我们不能允许对存活客户端尚未确认的序列号之后的任何序列号进行压缩。&lt;/strong&gt;&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;租赁服务器可用性问题&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;正如我之前提到的，为了防止Xline依赖于另一个Lease系统，我们在Leader上实现了Lease Server。既然Leader上的Tracker面临可用性问题，那么Lease Server自然也存在可用性问题吗？&lt;/p&gt;&lt;p&gt;其实不是:D，换个角度想，Lease Server充当了所有客户端生存的见证人，如果Lease Server崩溃了，我们不认为Lease Server崩溃了，我们认为所有客户端都崩溃了，从而迫使所有客户端放弃重试，向用户反馈情况，让用户决定是否重试。&lt;/p&gt;&lt;p&gt;现在我们有了跟踪器恢复，恢复过程中的客户端 ID 可用于恢复租约以进行租约服务器恢复。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;&lt;strong&gt;我们在 RIFL 中还没有做的事情&lt;/strong&gt;&lt;/h2&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;完成记录的持久性&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;RIFL 要求完成记录随系统一起保存和迁移，这样即使在新系统中，也可以检查重复项并将其返回给用户以供以前的执行使用。&lt;/p&gt;&lt;p&gt;我们还没有实现完成记录的持久化和迁移，如果实现的话，我们需要将命令的执行结果存储在相应的日志条目中，这对于日志的数据结构重复查找和插入执行并不友好结果。&lt;/p&gt;&lt;p&gt;因此，当领导发生变化后，新的领导会检查重复的命令，但无法获取之前的完成记录。&lt;/p&gt;&lt;p&gt;我们可以考虑优化日志数据结构来实现完成记录的持久化和迁移。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;优化回收机制&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;当您查看上图时，您可能会足够敏捷地意识到这种结构有一个缺点：队头阻塞。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="客户端/服务器的数据结构设计收到服务器/客户端的返回/请求，客户端/服务器未收到服务器/客户端的返回/请求" class="wp-image-110980" height="383" src="https://www.cncf.io/wp-content/uploads/2024/06/image-2.png" width="1400" /&gt;&lt;/figure&gt;&lt;p&gt; HTTP 协议最古老的实现已经解决了这个问题：&lt;a href="https://en.wikipedia.org/wiki/Multiplexing"&gt;多路复用&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;但 RIFL 的作者似乎并不想卷入这种混乱之中。&lt;/p&gt;&lt;p&gt;垃圾收集机制可以使用更细粒度的方法来实现，该方法允许删除较新的序列号的信息，同时保留尚未完成的较旧的序列号的信息。然而，&lt;strong&gt;我们担心这可能会产生额外的复杂性，从而影响 RPC 的延迟&lt;/strong&gt;；因此，我们推迟了这种做法，直到有证据表明有必要为止。&lt;/p&gt;&lt;p&gt;事实上，这并不是什么大问题；与HTTP流水线不同的是，没有收到返回并不会影响后续请求的发送（如上所示），这可能会导致服务器上已经处理过的命令结果没有及时回收，从而占用过多的内存。 RIFL作者提到可以增加一个上限（论文中为512）来解决这个问题，但考虑到这个问题并非不可克服，应该需要进一步优化。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;命令去重下部分结构的优化&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;RIFL不仅可以作为RPC去重机制，还可以用来优化Xline中的一些结构。&lt;/p&gt;&lt;p&gt;事实上，去重的想法是因为发现Xline当前的一些组件的定时GC机制可能会导致正确性问题，而这些问题的触发因素在madsim测试环境中被放大，这迫使我们重新引入一种新的方法来解决这些问题。&lt;/p&gt;&lt;p&gt;目前，Xline后端的GC任务包括Speculative Pool GC和Command Board GC。结合去重机制，我们可以在客户端确认GC后，将这两个区间替换为主动GC，这样就避免了不保守的主动GC造成正确性问题。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;推测池 GC 优化&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;在回收Speculative Pool中剩余的命令时，我们可以改变原来的非保守定时GC，主动要求Leader回收，并且Leader可以利用RIFL机制在一定程度上判断命令是否已经提交。&lt;/p&gt;&lt;p&gt;如果RIFL机制确定该命令已被确认，则必须提交该命令。对于已经提交给客户端，但是客户端还没有确认的命令，RIFL无法立即判断它已经提交，所以需要等待一段时间，当客户端确认这些命令时，然后领导者可以要求领导者恢复命令。当客户端确认命令时，领导者可以检查该命令是否已提交。如果客户端在这期间崩溃了，leader也可以通过Lease Manager判断客户端已经掉线了，那么该客户端传出的所有命令都会失效，我们就可以安全地清理掉下面的所有命令了。该客户端 ID。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt; &lt;strong&gt;CommandBoard GC 优化&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;同样，CommandBoard也有一个GC定时器任务，这个GC任务可能会导致在极端情况下恢复客户端来不及接收的完成记录。通过RIFL机制，我们可以将定时器GC替换为客户端确认后的GC，这样就保证了客户端一定已经收到了完成记录。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;&lt;strong&gt;概括&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;在Xline的CURP系统中，本文讨论了RIFL（Reusable Infrastructure for Linearizability）作为为RPC提供Exactly-Once语义的基础设施的实现以及相关问题的解决方案。主要包括Lease Server的设计，Tracker的构思、优化和可靠恢复，以及命令去重场景下后台GC Task结构的优化。之后，将进一步优化重复数据删除机制，完成记录的持久化和回收机制的优化，这将为Exactly-Once语义提供更完善的保证，并降低性能开销。 &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Wed, 29 May 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/05/30/xline-command-deduplication-mechanism-ii-rifl-implementation/</guid></item><item><title>【Autoscaling consumers in event driven architectures】在事件驱动架构中自动扩展消费者</title><link>https://www.cncf.io/blog/2024/05/29/autoscaling-consumers-in-event-driven-architectures/</link><description>&lt;p&gt;&lt;em&gt;Rob Williamson 的社区帖子&lt;/em&gt;&lt;/p&gt;&lt;p&gt;微服务自动扩展和事件驱动的解耦都是帮助您实现同一目标的途径——实现应用程序的最大性能和效率。不幸的是，这两个目标也可能相互矛盾，需要了解架构差异才能实现。但是，如果做得正确，您可以获得动态性能，而不会破坏异步消息队列。本博客将深入研究 Kubernetes 事件驱动的自动缩放，以及它如何由事件代理触发并提供来自事件代理的数据（以 Solace 为例）。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;问题——如何在你不知情的情况下自动扩展&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;对于事件驱动架构 (EDA)，一个关键原则是生产者和消费者的解耦。事件代理源自纯粹的老式消息传递概念，充当中介者，对事件进行排队以供消费者使用。现代事件代理通过支持许多不同的消息传递模式（发布/订阅、流式传输、扇出等）、许多不同的消息功能（有保证、死消息、智能路由等）和不同级别的可观察性，使事情更进一步（经纪人指标、事件遥测等）。所有这些都会使自动缩放变得复杂。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="事件驱动架构" class="wp-image-110060" height="726" src="https://www.cncf.io/wp-content/uploads/2024/05/autoscaling.jpg" width="1421" /&gt;&lt;/figure&gt;&lt;p&gt;&lt;em&gt;自动缩放！事件驱动架构的企业范围部署可以异步释放数据，并且在有效使用时，消费者自动缩放可以很好地与实时数据和事件的路由配合使用&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;让我们看两张图，它们说明了解耦时扩展的挑战和好处。在第一个中，您有一个简单的独占队列，它将一个消费者绑定到一个生产者，并且没有状态事件。我们的意思是，一个事件可能与另一事件相关或依赖于另一事件，并且交付和消费的顺序很重要。它引入了对队列和缓存等事物的需求。很容易触发活跃消费者的扩展。&lt;/p&gt;&lt;p&gt;但是，如果您的事件是有状态的（简单地说，需要跟踪处理并按顺序进行），那么您无法使用此队列类型进行自动缩放，您唯一的选择是代理上更大的线轴或代理上更快的处理器消费者。如果消费者根本无法跟上（水平或垂直），那么消息就会丢失 - 但如果代理实施良好，内存将处理非常大的线轴。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="显示从生产者到消费者的流程的流程图" class="wp-image-110061" height="592" src="https://www.cncf.io/wp-content/uploads/2024/05/Producer.png" width="1082" /&gt;&lt;/figure&gt;&lt;p&gt;第二张图显示了队列如何触发消费者的扩展，但随后有状态数据集需要绑定到正确的消费者。&lt;/p&gt;&lt;p&gt;通过自动缩放，好处是可以根据需求添加微服务实例，因此您不需要过度配置或服务不足。这意味着应用程序必须公开指标，以便集群知道何时根据负载进行扩展。但是，除非应用程序的两端都发送指标，否则它不会意识到系统范围的负载。这里的问题是，使用基于应用程序的扩展触发器可以有效地耦合应用程序，而架构师会失去 EDA 和解耦的显着优势。&lt;/p&gt;&lt;p&gt;这就是 Kubernetes (K8) 事件驱动自动扩展 (KEDA) 发挥作用的地方。 KEDA 是云原生计算基金会下的一个开源项目，可让您根据需要处理的事件数量来驱动任何 K8 容器的扩展。他们维护一个自动缩放器目录——在 KEDA 的情况下，它是具有队列深度作为外部触发源的事件代理。需要注意的是，严格来说，KEDA 中的“事件”并不是事件驱动架构中的“事件”。在后者中，它通常被认为是 pub/sub 中的“消息”。&lt;/p&gt;&lt;p&gt;好吧——那么问题就解决了，对吧？不幸的是，还没有。对于许多应用程序来说，(1) 事件的顺序至关重要，(2) 相关事件的处理也至关重要。例如，您不应在从购物车中删除商品后触发废弃购物车流程，因为这可能不是昂贵广告费用的最佳用途。您还无法运行使用一个队列中的信用卡数据和另一队列中（其他人的）家庭地址的消费者应用程序。&lt;/p&gt;&lt;p&gt;库存管理、机器操作、交易处理等方面也有类似的示例。它们的共同点是，它们都是需要消息顺序、保证和弹性的操作流程，同时构建在跨不同应用程序（和位置）动态路由事件的发布/订阅模式中。值得注意的是，不同的开发团队正在根据相同的事件构建不同的应用程序，以便从围绕 EDA 构建的真正的企业范围架构中受益。因此，您的规模会根据发布到事件网格的事件的使用而变化。&lt;/p&gt;&lt;p&gt;因此，您在这里可以做出选择，包括维护无益的日志或包含状态元数据的数据存储 - 这些选择会在出口和存储方面花费金钱，并增加应用程序的成本、复杂性和延迟。另一种选择是按锁定步骤扩展消费者和队列——我们已经确定这种方法没有解耦；并且需要在发布/订阅链的两端进行维护和了解。&lt;/p&gt;&lt;p&gt;因此，在事件代理中，您需要能够触发消费者的扩展以响应负载（通常是队列大小），并且您需要确保消费者以相同的顺序获取类似事件。&lt;/p&gt;&lt;p&gt;好的，如果您已经读到这里，那么您希望已经了解消费者自动缩放和 EDA 需要使用正确的工具和正确的配置。让我们看看如何设置。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;示例 – 配置事件代理以触发 KEDA&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在本示例中，我们使用 Solace PubSub+ 事件代理。在下图中，它被配置为 K8 集群的外部触发源。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="KEDA文档流程图" class="wp-image-110971" height="929" src="https://www.cncf.io/wp-content/uploads/2024/06/image-1-1.jpg" width="1200" /&gt;&lt;/figure&gt;&lt;p&gt;来源：KEDA 文档 ( &lt;a href="https://learn.microsoft.com/en-us/azure/aks/keda-about"&gt;https://learn.microsoft.com/en-us/azure/aks/keda-about&lt;/a&gt;&lt;/p&gt;&lt;p&gt;我们假设您已经完成了 KEDA 的设置，并且正在将缩放器连接到集群。为此，队列用于触发新的微服务，但必须至少使用消息计数、消息假脱机使用情况或消息接收率之一。如果同时使用这三个参数，则将根据至少满足其中一个参数来触发缩放。与发布应用程序相比，所有这些都可以响应缓慢的消费者或消费者不足的情况而增长。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;触发器&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;消息计数&lt;/strong&gt;– 只是队列中的总消息数，您可以根据队列的突发性以及需要多快的速度来设置间隔。&lt;br /&gt;&lt;strong&gt;假脱机使用量&lt;/strong&gt;– 队列缓冲区中使用的内存总量。对于您的组织来说，这可能是一个弹性数字，因此您可以根据您的典型使用场景来选择它。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;接收率&lt;/strong&gt;– 您的目标将小于消费者可以作为触发器处理的最大容量/消息数。在这种情况下，经纪商会保持每分钟计算一次的平均汇率。&lt;/p&gt;&lt;p&gt;为了获得最佳结果，我们将消息计数和接收率设置为目标 - 它们显然是相关的，但目标是匹配优化系统的流入和流出。仅选择其中一个指标的问题是，当系统试图达到稳定状态时，消费者会不断地上下旋转，而在现实世界中，这种状态可能不存在。&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;triggers: - type: solace-event-queue metadata: solaceSempBaseURL: http://solace_broker:8080 messageVpn: message-vpn queueName: queue_name messageCountTarget: &amp;#39;100&amp;#39; messageSpoolUsageTarget: &amp;#39;100&amp;#39; ### Megabytes (MB) messageReceiveRateTarget: &amp;#39;50&amp;#39; ### Messages/second over last 1 minute interval activationMessageCountTarget: &amp;#39;10&amp;#39; activationMessageSpoolUsageTarget: &amp;#39;5&amp;#39; ### Megabytes (MB) activationMessageReceiveRateTarget: &amp;#39;1&amp;#39; ### Messages/second over last 1 minute interval username: semp-user password: semp-pwd usernameFromEnv: ENV_VAR_USER passwordFromEnv: ENV_VAR_PWD&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; &lt;a href="https://keda.sh/docs/2.13/scalers/solace-pub-sub"&gt;https://keda.sh/docs/2.13/scalers/solace-pub-sub&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;轮询间隔和消费者数量&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;配置非常简单，在下面的示例中，我们选择了 20 秒的轮询间隔和最大消费者数量为 10。&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class="language-javascript" lang="javascript"&gt;apiVersion: keda.sh/v1alpha1 kind: ScaledObject metadata: name: solace-scaled-object namespace: solace spec: scaleTargetRef: apiVersion: apps/v1 kind: Deployment name: solace-consumer pollingInterval: 20 cooldownPeriod: 60 minReplicaCount: 0 maxReplicaCount: 10&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;活动顺序&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;现在您已经配置了事件代理队列来触发自动缩放，如何确保顺序？这就是队列类型发挥作用的地方。在事件代理中，有两种基本类型。排他队列和非排他队列。它们的定义（希望）是不言自明的，并且传统上它们用于当状态很重要且您使用单个消费者时，或者当规模很重要但状态不重要并且您使用许多消费者时。&lt;br /&gt;&lt;br /&gt;为了在不断变化的消费者之间维护状态，您使用一种称为“分区队列”的非独占队列。每个分区实际上都是一个独占队列，只能有一个以上的绑定消费者，从而可以维持顺序。启用此功能后，应用程序开发人员将定义一个键值，并对该键进行哈希处理，以生成维护分区的键。从逻辑上讲，选择的键值将反映扩展分区数量的需要。例如，如果您想象存储在事件中的帐户# 是适合您的应用程序的逻辑扩展，那么您可以设置该帐户的哈希值。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="显示分区队列的流程图" class="wp-image-110972" height="518" src="https://www.cncf.io/wp-content/uploads/2024/06/image-1-2.jpg" width="760" /&gt;&lt;/figure&gt;&lt;p&gt;那么——后端发生了什么？好吧，对于每个新消费者，事件代理都会在不同分区之间重新平衡队列——每个消费者一个。这可以维护状态，以便类似事件由同一消费者以正确的顺序消费。当它们打开和关闭时，会出现重新平衡延迟，以允许队列被完全消耗。此设置组合是在事件代理中配置的，因此它响应您在 KEDA 中配置的内容。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="显示 Solace 仪表板的流程图" class="wp-image-110973" height="344" src="https://www.cncf.io/wp-content/uploads/2024/06/image-1-3.jpg" width="528" /&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;活动经纪人与科达共舞&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;与探戈一样，需要两个人来设计和部署自动缩放的环境，但一旦掌握了它的窍门，这并不是那么困难。在前面的示例中，我们配置了自动缩放器来响应应用程序的典型事件队列配置文件，并且配置了事件代理来创建队列来响应 KEDA 的行为方式。结果是两者的所有好处，包括：&lt;br /&gt;&lt;br /&gt;在您需要的地方和时间进行容量分配 = 以更低的成本获得更高的性能。&lt;/p&gt;&lt;p&gt;针对应用程序的分区&lt;/p&gt;&lt;p&gt;维护事件上下文&lt;/p&gt;&lt;p&gt;活动秩序维护&lt;/p&gt;&lt;p&gt;智能再平衡&lt;/p&gt;&lt;p&gt;开箱即用的集成（无需维护自定义代码）&lt;/p&gt;&lt;p&gt; Solace 事件代理是代理和事件网格上 KEDA 自动缩放的一种实现。要了解有关事件驱动架构的更多信息，并查看 Solace 为支持 OpenTelemetry、Kubernetes 等开源社区而开展的其他一些活动，&lt;a href="https://solace.com/resources/cncf"&gt;请查阅我们在该领域的最新资源&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关于罗布&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Rob 在技术行业的产品管理和营销方面拥有 20 多年的经验。他的公共活动包括就企业架构、软件开发工具、网络安全和 DNS 等各种主题进行写作、演示和博客。一位热心的产品营销人员，会花时间与 IT 专业人员交谈，提供他们工作所需的信息和详细信息。 &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Tue, 28 May 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/05/29/autoscaling-consumers-in-event-driven-architectures/</guid></item><item><title>【Is testing in production even possible?】生产中的测试是否可能？</title><link>https://www.cncf.io/blog/2024/05/28/is-testing-in-production-even-possible/</link><description>&lt;p&gt;&lt;em&gt;Solo.io 首席解决方案架构师&lt;a href="https://www.linkedin.com/in/antonio-berben/?originalSubdomain=es"&gt;Antonio Berben&lt;/a&gt;的社区帖子&lt;/em&gt;&lt;em&gt;( &lt;a href="https://www.linkedin.com/feed/"&gt;Linkedin&lt;/a&gt; | &lt;a href="https://github.com/antonioberben"&gt;GitHub&lt;/a&gt; )&lt;/em&gt;&lt;/p&gt;&lt;p&gt;在生产测试 (TIP) 场景中，一个关键方面是基于运行时上下文数据路由流量。该数据通常称为路由属性，确定请求是定向到生产环境（绿色部署）还是包含正在测试的新功能的蓝/绿色部署。选择过程依赖于根据预定义的路由规则评估这些属性。&lt;/p&gt;&lt;p&gt;但是，如何跨多个服务传递上下文数据？&lt;/p&gt;&lt;p&gt; Baggage 是在服务之间传播上下文的一种方式。它们是附加到请求并传递到下游服务的键值对。这允许您传递信息。&lt;/p&gt;&lt;p&gt;我们举个例子：&lt;/p&gt;&lt;p&gt;您有一个服务链（svc1、svc2、svc3），并且您希望 svc3 获取 svc1 收到的一些信息。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="显示从 svc1 到 svc3 的消息流的流程图" class="wp-image-110964" height="422" src="https://www.cncf.io/wp-content/uploads/2024/06/image.jpg" width="1525" /&gt;&lt;/figure&gt;&lt;p&gt;您可以将其作为有效负载的一部分传递。这意味着 svc2 知道该数据。所以这不是一个好主意。&lt;/p&gt;&lt;p&gt;您可以使用自定义标头并将其沿链传递。但这也不是一个好主意。因为你必须修改每个服务的代码来传递标头。&lt;/p&gt;&lt;p&gt;如果您已经在使用跟踪库来传播标头，那么最好的方法是使用行李标头。它是沿着链传递的标头，无需修改服务的代码。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="显示 svc1 到 svc3 的流程图" class="wp-image-110965" height="305" src="https://www.cncf.io/wp-content/uploads/2024/06/image-1.jpg" width="1406" /&gt;&lt;/figure&gt;&lt;h2 class="wp-block-heading"&gt;&lt;strong&gt;怎么运行的&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Baggage 标头在 W3C 标准中定义，用于在分布式跟踪上下文中传播用户定义的数据&lt;a href="https://www.w3.org/TR/baggage/"&gt;https://www.w3.org/TR/baggage/&lt;/a&gt; 。&lt;/p&gt;&lt;p&gt;这就是为什么它受到 OpenTelemetry、Jaeger、Zipkin 等许多跟踪系统支持的原因。&lt;/p&gt;&lt;p&gt;因此，当您集成跟踪并且被迫在服务之间传播上下文时，您也可以使用行李标头。&lt;/p&gt;&lt;p&gt;它由跟踪系统透明地传播。&lt;/p&gt;&lt;p&gt;以下是使用 OpenTelemetry 的 Python 示例：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class="language-python" lang="python"&gt;import os import logging from flask import Flask, request import requests from opentelemetry.instrumentation.flask import FlaskInstrumentor from opentelemetry.instrumentation.requests import RequestsInstrumentor from opentelemetry import trace from opentelemetry.sdk.trace import TracerProvider app = Flask(__name__) app.logger.setLevel(logging.INFO) trace.set_tracer_provider(TracerProvider()) FlaskInstrumentor().instrument_app(app) RequestsInstrumentor().instrument() @app.route(&amp;#39;/&amp;#39;) def hello(): headers = dict(request.headers) app.logger.info(f&amp;quot;Received headers: {headers}&amp;quot;) request_url = os.environ.get(&amp;quot;REQUEST_URL&amp;quot;) app.logger.info(f&amp;quot;Calling: {request_url}&amp;quot;) response = requests.get(f&amp;#39;{request_url}&amp;#39;) return f&amp;quot;\nHello from API 2!\n{response.text}&amp;quot; if __name__ == &amp;#39;__main__&amp;#39;: app.run(host=os.environ.get(&amp;quot;HOST&amp;quot;, &amp;quot;0.0.0.0&amp;quot;), port=os.environ.get(&amp;quot;PORT&amp;quot;, 5000))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：在&lt;a href="https://github.com/antonioberben/test-in-production"&gt;存储库文件夹&lt;/a&gt;“app”中，您可以找到利用 OpenTelemetry 库的 Python 完整应用程序集（app1、app2、app3）。&lt;/p&gt;&lt;p&gt;可以看到，函数中没有传递行李头的代码。这是在定义 FlaskInstrumentor 时由跟踪系统完成的。&lt;/p&gt;&lt;p&gt;在其他服务中，您可以像这样访问行李标头：&lt;/p&gt;&lt;pre class="wp-block-code" title=""&gt; &lt;code class="language-sql" lang="sql"&gt;# [...] @app.route(&amp;#39;/&amp;#39;) def hello(): headers = dict(request.headers) app.logger.info(f&amp;quot;Received headers: {headers}&amp;quot;) productid = baggage.get_baggage(&amp;quot;product-id&amp;quot;) # [...]&lt;/code&gt;&lt;/pre&gt;&lt;h2 class="wp-block-heading"&gt;&lt;strong&gt;基于行李标头的路由&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;知道我们可以将透明数据从一个服务传递到另一个服务，我们可以使用它来控制&lt;a href="https://istio.io/latest/docs/reference/config/networking/virtual-service/"&gt;Istio Service Mesh&lt;/a&gt;的路由。&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class="language-javascript" lang="javascript"&gt;apiVersion: networking.istio.io/v1beta1 kind: VirtualService metadata: name: app3 spec: hosts: - app3.my-system.svc.cluster.local http: - name: &amp;quot;new-version&amp;quot; match: - headers: baggage: regex: &amp;quot;.*pr=(.*)?&amp;quot; route: - destination: host: app3-new-version.my-system.svc.cluster.local - name: &amp;quot;live-version&amp;quot; route: - destination: host: app3.my-system.svc.cluster.local&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过此 VirtualDestination，当行李标头包含值 pr=XXX 时，我们将流量重定向到 app3 的蓝色版本。当行李标头不存在时，应用程序 3 的绿色版本。&lt;/p&gt;&lt;p&gt;这用于生产场景中的测试，您可以在本文中阅读：&lt;a href="https://www.solo.io/blog/service-mesh-developers-testing-production/"&gt;面向开发人员的服务网格，第 2 部分：生产中的测试&lt;/a&gt;。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;&lt;strong&gt;演示&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;在此演示中，您将学习如何使用行李标头来控制服务的路由。&lt;/p&gt;&lt;p&gt;建筑学： &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="显示 svc1 到 svc3 和 svc3 new_version 的流程图" class="wp-image-110967" height="510" src="https://www.cncf.io/wp-content/uploads/2024/06/image-2.jpg" width="1600" /&gt;&lt;/figure&gt;&lt;p&gt;克隆存储库&lt;/p&gt;&lt;pre class="wp-block-code"&gt;&lt;code class="language-sql" lang="sql"&gt;git clone git@github.com:antonioberben/test-in-production.git cd test-in-production&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;部署 Istio&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;istioctl install -f ./k8s/istio-values.yaml -y&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;部署服务&lt;/p&gt;&lt;pre class="wp-block-code"&gt;&lt;code class=""&gt;kubectl create ns my-system kubectl label namespace my-system istio.io/rev=1-21 --overwrite kubectl apply -f ./k8s/app.yaml kubectl apply -f ./k8s/app3-new-version.yaml&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;部署 Istio 资源&lt;/p&gt;&lt;pre class="wp-block-code"&gt;&lt;code class=""&gt;kubectl apply -f ./k8s/istio-virtualservice.yaml&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试服务&lt;/p&gt;&lt;pre class="wp-block-code"&gt;&lt;code class=""&gt;kubectl port-forward -n my-system svc/app1 5000&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;进而&lt;/p&gt;&lt;pre class="wp-block-code"&gt;&lt;code class=""&gt;curl localhost:5000/product/123&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;您将同时看到来自 app1、app2 和 app3 的响应：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;Hello from API 1! Hello from API 2! Hello from API 3!&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在，添加将在服务中传播的行李标头：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;curl localhost:5000/product/123 -H &amp;quot;baggage: pr=123&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;您将看到来自 app3 的蓝色版本的响应：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;Hello from API 1! Hello from API 2! Hello from API 3! This is a new version of the app&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;检查代理的日志，&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;kubectl logs -n my-app deploy/app3 -n my-system -c istio-proxy --tail 1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;您将看到输出的传递给应用程序的行李标头。请注意，app1 添加了一些额外的包袱。&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;[ACCES_LOGS] &amp;quot;baggage&amp;quot;: &amp;quot;x=1,pr=123,product-id=123,other-baggage=value2,another-baggage=3,url-baggage=%2Ftest%2F1%3Fattr%3D1&amp;quot; &amp;quot;authority&amp;quot;: &amp;quot;app3.my-system.svc.cluster.local:5000&amp;quot; &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot; &amp;quot;path&amp;quot;: &amp;quot;/&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;h2 class="wp-block-heading"&gt;&lt;strong&gt;结论&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;您已经测试了如何利用 Istio 和 OpenTelemetry 来使用 W3C Baggage 标头标准实现微服务之间的透明上下文传播。这消除了手动代码修改的需要，并启用了基于行李数据的流量路由等功能，从而促进了生产环境中的安全测试。&lt;/p&gt;&lt;p&gt;现在您可以在生产中进行测试，下一个目标是在生产中进行开发。你想知道怎么做吗？&lt;/p&gt;&lt;p&gt;对于这个和其他有趣的技巧，请联系我。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;&lt;strong&gt;有趣的链接&lt;/strong&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://opentelemetry.io/docs/languages/python/propagation/"&gt;官方 OpenTelemetry 传播&lt;/a&gt;&lt;/li&gt;&lt;li&gt;一篇简单的&lt;a href="https://trstringer.com/otel-part5-propagation/"&gt;文章解释了行李标头的传播&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://opentelemetry.io/docs/concepts/signals/baggage/"&gt;OpenTelemetry 行李标头&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://youtu.be/p9dYr23MVv0?t=683"&gt;用例：Lyft 如何在其系统中利用行李标头&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Mon, 27 May 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/05/28/is-testing-in-production-even-possible/</guid></item><item><title>【Reflecting on the success of Kubernetes Community Days Islamabad 2024】反思 2024 年伊斯兰堡 Kubernetes 社区日的成功</title><link>https://www.cncf.io/blog/2024/05/28/reflecting-on-the-success-of-kubernetes-community-days-islamabad-2024/</link><description>&lt;p&gt;&lt;em&gt;CNCF 大使 Saim Safdar 发布的 KCD 帖子&lt;/em&gt;&lt;/p&gt;&lt;p&gt;2020 年 8 月，我踏上了建立&lt;a href="https://www.youtube.com/@CloudNativeIslamabad"&gt;Cloud Native Islamabad 的&lt;/a&gt;旅程，其愿景是培育当地社区、促进知识共享并弥合国际和当地社区之间的差距，以支持开源的可持续性。认识到 CNCF 等基金会在推动开源创新方面的关键作用，我决心创建一个平台，不仅培养本地人才，还提供与全球基金会合作的机会。&lt;/p&gt;&lt;p&gt;在我们的旅程中，我们在伊斯兰堡云原生上举办了 45 场网络研讨会，深入研究了 CNCF 领域的 23 个著名开源项目。召开会议的想法已经在我们脑海中酝酿了一段时间。这次聚会的重点是分享知识、庆祝成功故事以及促进伊斯兰堡社区内外的联系。由此，KCD 伊斯兰堡诞生了。&lt;/p&gt;&lt;p&gt; &lt;strong&gt;KCD 巴基斯坦落成典礼&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;2023 年 2 月，我们将我们的愿望更进一步，在巴基斯坦启动了首届 KCD 活动。反响热烈，激发了我们追求更高目标、实现更大梦想的决心。现在，当我们开始第二次年度活动时，我很高兴看到我们的愿景得以实现。让我们倒转时钟，重温旅程的兴奋。&lt;/p&gt;&lt;p&gt; &lt;strong&gt;KCD – 为当地社区提供类似 KubeCon 的体验&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;大力赞扬&lt;a href="https://www.linkedin.com/in/audramontenegro/"&gt;Audra Montenegro&lt;/a&gt;致力于培育技术社区，并帮助我们解决像 KCD 那样的开源创新所需的所有附加功能。在 Audra 和全球所有组织者的承诺和辛勤工作下，KCD 计划从 2022 年到 2023 年增长了 100%，仅去年一年就有 32 个全球 KCD，目标是将 KubeCon 体验带到当地社区。&lt;/p&gt;&lt;p&gt; &lt;strong&gt;KCD 伊斯兰堡得到企业和当地社区的大力支持&lt;/strong&gt;&lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="2024 年 KCD 伊斯兰堡参赛者" class="wp-image-110952" height="1600" src="https://www.cncf.io/wp-content/uploads/2024/06/image.jpeg" width="1600" /&gt;&lt;/figure&gt;&lt;p&gt;伊斯兰堡 Kubernetes 社区日 (KCD) 最近于&lt;a href="https://www.linkedin.com/feed/update/urn:li:activity:7193552660963192832"&gt;5 月 3 日在 System Limited 亚马逊办事处&lt;/a&gt;结束了第二届年度活动，聚集了对云原生技术充满热情的开发人员、平台工程师和 IT 专业人士。这一社区驱动的活动得到了云原生计算基金会 (CNCF) 的支持，成为分享见解和探索云原生生态系统中最新创新和趋势的平台。&lt;/p&gt;&lt;p&gt;感谢&lt;a href="https://www.systemsltd.com/"&gt;System Limited&lt;/a&gt; 、 &lt;a href="http://clouddev.tech/"&gt;Cloud Dev&lt;/a&gt; 、华为、 &lt;a href="https://owb.com.pk/"&gt;Open Ware Business&lt;/a&gt; 、 &lt;a href="https://community.cncf.io/islamabad/"&gt;Cloud Native Islamabad&lt;/a&gt; 、&lt;a href="https://osfp.org.pk/"&gt;巴基斯坦开源基金会&lt;/a&gt;、 &lt;a href="https://kube.careers/"&gt;Kube Career&lt;/a&gt; 、 &lt;a href="https://kube.events/"&gt;Kube Events&lt;/a&gt;和&lt;a href="https://www.youtube.com/@cloudnativefm"&gt;Cloud Native Podcast&lt;/a&gt;等赞助商的慷慨支持，本次活动拥有多元化的会议和演讲嘉宾阵容。&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Action Pack KCD 伊斯兰堡演讲者阵容&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;活动在巴特·法雷尔 (Bart Farrell) 和科特尼·尼克森 (Cortney Nickerson) 的热烈欢迎和开幕致辞中拉开帷幕，为一天充满启发性的讨论和演讲奠定了基础。 Paula Kennedy 题为“平台即产品：我们已经接近实现了吗”的主题演讲吸引了观众，并强调，随着组织越来越多地采用云原生技术，平台即产品的概念变得越来越重要。通过专注于为内部和外部客户提供价值，平台团队可以推动创新并加速数字化转型计划。然而，平台成熟之路仍在继续，仍然存在需要克服的障碍。平台即产品强调了拥抱产品思维和迭代完善平台产品以满足用户不断变化的需求的重要性。从建立明确的所有权和治理结构到培育协作和反馈文化，有许多因素有助于平台计划的成功。&lt;/p&gt;&lt;p&gt;与会者参加了由 Viktor Farcic 主持的各种内容丰富的演讲，涵盖的主题包括使用 Knative、Crossplane、Dapr 和 KEDA 在 Kubernetes 上实现无服务器。 &lt;strong&gt;Daniel Niasoff&lt;/strong&gt;分享了有关优化私有云基础设施以提高成本效率的宝贵见解。跨集群节点部署 eBPF 程序本身就是一个挑战。 &lt;strong&gt;Qasim Sarfaraz&lt;/strong&gt;分享了使用 eBPF 的超能力调试 Kubernetes 和容器工作负载的提示和技巧。 &lt;strong&gt;Robina Mirbahar 的&lt;/strong&gt;演讲强调了云原生技术之间的紧密集成对于解决共享基础设施和应用程序管理需求的重要性，并强调了利用开源解决方案的灵活性、互操作性和成本效益的优势。&lt;/p&gt;&lt;p&gt; &lt;strong&gt;2024 年开源状况&lt;/strong&gt;&lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="KCD 伊斯兰堡的参与者在房间里观看在线演示" class="wp-image-110953" height="1536" src="https://www.cncf.io/wp-content/uploads/2024/06/image-1.jpeg" width="1536" /&gt;&lt;/figure&gt;&lt;p&gt; &lt;strong&gt;Cortney Nickerson&lt;/strong&gt;主持了一场关于 2024 年开源状况的小组讨论，其中包括&lt;strong&gt;Paula Paul&lt;/strong&gt; 、 &lt;strong&gt;Michale Cade&lt;/strong&gt;和&lt;strong&gt;Nancy Chauhan&lt;/strong&gt;等行业知名人士。形势发生了巨大变化，带来了新的机遇和挑战。一项显着的变化是开源许可证的复杂性不断增加，特别是随着供应商引入商业支持模型。虽然这种演变强调了开源项目不断增长的商业可行性，但它也带来了必须小心应对的复杂性。您现在可以 &lt;a href="https://www.youtube.com/watch?v=8kR8acMfqRw&amp;amp;list=PLJX7DTVGo63xA2Is4ZgE0CeKCljM--Z7Y"&gt;在 KCD Islamabad YouTube 频道上&lt;/a&gt;&lt;a href="https://www.youtube.com/watch?v=5P5k2ghlLW4"&gt;收听此演讲&lt;/a&gt;并观看此播放列表中的所有演讲。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;非常感谢您——我们的明星扬声器&lt;/strong&gt;&lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="投影屏幕上显示一位绅士在伊斯兰堡 KCD 上讲话" class="wp-image-110955" height="1600" src="https://www.cncf.io/wp-content/uploads/2024/06/image-2.jpeg" width="1600" /&gt;&lt;/figure&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="一群绅士在伊斯兰堡 KCD 上高举奖杯" class="wp-image-110956" height="1600" src="https://www.cncf.io/wp-content/uploads/2024/06/image-3.jpeg" width="1600" /&gt;&lt;/figure&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="投影仪上播放了一位女士在团队会议上讲话" class="wp-image-110957" height="1600" src="https://www.cncf.io/wp-content/uploads/2024/06/image-4.jpeg" width="1600" /&gt;&lt;/figure&gt;&lt;p&gt;这次活动是一个很好的机会，可以向所有与社区慷慨分享知识和见解的演讲者所做出的宝贵贡献表示感谢。特别感谢我们当地的演讲者，包括&lt;strong&gt;Yousuf Jawad、Robina Mirbahar、Saleem Rafik、Tariq Rasheed、Ghazi Salahuddin、Shakeel Ahmed、Aftab Ahmed、Sannan Ahmed&lt;/strong&gt;和&lt;strong&gt;Muhammad Mustafa&lt;/strong&gt; 。我们还要向所有虚拟加入我们的演讲者表示最深切的谢意&lt;strong&gt;：Viktor Farcic、Daniel Niasoff、Qasim Sarfraz、Hamza Rashid、Osama Tahir、Sergio Méndez、Mike Ashley Cedric、Nitish Kumar、Paula Kennedy、Paula Paul、Michael Cade&lt;/strong&gt;和&lt;strong&gt;Nancy Chauhan 。&lt;/strong&gt;与我们的与会者分享他们丰富的经验。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;向 KCD 伊斯兰堡组织者大声喊叫&lt;/strong&gt;&lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="一位女士在伊斯兰堡 KCD 接受证书" class="wp-image-110958" height="1600" src="https://www.cncf.io/wp-content/uploads/2024/06/image-5.jpeg" width="1600" /&gt;&lt;/figure&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="一位绅士在 KCD 伊斯兰堡接受证书" class="wp-image-110959" height="1600" src="https://www.cncf.io/wp-content/uploads/2024/06/image-6.jpeg" width="1600" /&gt;&lt;/figure&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="一位绅士在 KCD 伊斯兰堡接受证书" class="wp-image-110960" height="1600" src="https://www.cncf.io/wp-content/uploads/2024/06/image-7.jpeg" width="1600" /&gt;&lt;/figure&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="一位先生在伊斯兰堡 KCD 上接受证书" class="wp-image-110961" height="1600" src="https://www.cncf.io/wp-content/uploads/2024/06/image-8.jpeg" width="1600" /&gt;&lt;/figure&gt;&lt;p&gt;最后但并非最不重要的一点是，我们向当地组织者&lt;strong&gt;Danyal Ejaz、Taskeen Fatima、Hamza Shabbir、Hasnaat Iftikhar、Shaista Aman、Muhammad Farhan Ashraf、Usman Hamid&lt;/strong&gt; &lt;strong&gt;、Babar Zahoor、Ali Abdullah&lt;/strong&gt;和&lt;strong&gt;Abid Zahoor&lt;/strong&gt;表示热烈的掌声，他们的不懈努力和坚定不移的承诺在促成这一巨大成功的过程中发挥了关键作用。从精心策划到无缝执行，您真正做到了超越，确保 KCD 伊斯兰堡为所有人带来难忘的体验。我们还向 CNCF 社区和组织者表示最深切的谢意，他们实际上加入了我们的&lt;strong&gt;Salman Iqbal、Faisal Afzal、Bart Farrel&lt;/strong&gt; l 和&lt;strong&gt;Cortney Nickerson&lt;/strong&gt; ，并在每一步中分享了宝贵的见解、想法和专业知识。&lt;/p&gt;&lt;p&gt; &lt;strong&gt;KCD 伊斯兰堡的摇滚明星巴特和科特尼&lt;/strong&gt;&lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="一群绅士在教室里工作并聆听屏幕上播放的演示" class="wp-image-110962" height="1200" src="https://www.cncf.io/wp-content/uploads/2024/06/image-9.jpeg" width="1600" /&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href="https://www.linkedin.com/in/bart-farrell/"&gt;巴特·法雷尔&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt;和&lt;a href="https://www.linkedin.com/in/cortney-nickerson-26836413a/"&gt;Cortney Nickerson&lt;/a&gt;对卓越的不懈追求，加上他们对推进 Kubernetes 和云原生社区的热情，对 KCD Islamabad 的成功发挥了重要作用。我们代表整个&lt;strong&gt;KCD 伊斯兰堡社区&lt;/strong&gt;，向巴特·法雷尔 (Bart Farrell) 和科特尼·尼克森 (Cortney Nickerson) 的非凡承诺、领导力和贡献表示衷心感谢。您的贡献将在未来的岁月里被珍惜和铭记。 &lt;a href="https://www.linkedin.com/feed/update/urn:li:activity:7192208208189411330"&gt;Bart 10/10 KCD 伊斯兰堡回顾&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;有了协作智慧社区，协作与成长将持续&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;KCD Islamabad 2024 取得了巨大成功，促进了云原生爱好者之间的协作、知识共享和交流。随着社区的不断发展和发展，像 KCD 这样的活动在推动创新和突破云原生技术的界限方面发挥着至关重要的作用。我们期待 KCD 的未来版本以及伊斯兰堡云原生社区的持续成功。 &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Mon, 27 May 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/05/28/reflecting-on-the-success-of-kubernetes-community-days-islamabad-2024/</guid></item><item><title>【KCD Argentina 2024: mastering the Kubernetes tango and scoring goals in container orchestration】KCD 阿根廷 2024：掌握 Kubernetes 探戈并在容器编排中取得进球</title><link>https://www.cncf.io/blog/2024/05/24/kcd-argentina-2024-mastering-the-kubernetes-tango-and-scoring-goals-in-container-orchestration/</link><description>&lt;p&gt;&lt;em&gt;KCD 帖子最初由 Cuemby 首席执行官 Angel Ramirez 在&lt;a href="https://www.linkedin.com/pulse/kcd-argentina-2024-mastering-kubernetes-tango-scoring-angel-ramirez-c4nae/"&gt;Linkedin&lt;/a&gt;上发布 | CNCF 和 OSPO 大使 |公共演讲者 |云计算和 Kubetronaut&lt;/em&gt;&lt;/p&gt;&lt;p id="ember44"&gt;作为&lt;a href="https://www.linkedin.com/company/cloud-native-computing-foundation/"&gt;云原生计算基金会 (CNCF)&lt;/a&gt;和&lt;a href="https://www.linkedin.com/company/todo-group/"&gt;TODO (OSPO) 集团&lt;/a&gt;的大使，我最近很高兴参加&lt;a href="https://www.linkedin.com/company/kcd-argentina/"&gt;KCD 阿根廷&lt;/a&gt;活动。此次活动体现了社区精神和创新精神。我尊敬的同事和大使&lt;a href="https://www.linkedin.com/in/cristhercastro/"&gt;克里斯特·卡斯特罗&lt;/a&gt;和&lt;a href="https://www.linkedin.com/in/adawolfs/"&gt;阿尔文·埃斯特拉达&lt;/a&gt;也加入了我的行列，他们对拉丁美洲社区的发展表现出无条件的支持。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="参赛者在KCD阿根廷横幅前合影" class="wp-image-109530" height="1000" src="https://www.cncf.io/wp-content/uploads/2024/05/image-9.jpeg" width="1333" /&gt;&lt;/figure&gt;&lt;p id="ember48"&gt;我们前往阿根廷支持充满活力的当地社区和出色的组织团队： &lt;a href="https://www.linkedin.com/in/agustincelano/"&gt;Agustin Celano&lt;/a&gt; 、 &lt;a href="https://www.linkedin.com/in/a10o/"&gt;☁️🛡 Alfredo Pardo&lt;/a&gt; 、 &lt;a href="https://www.linkedin.com/in/orsifacundo/"&gt;Facundo Orsi&lt;/a&gt; 、 &lt;a href="https://www.linkedin.com/in/matiasmospan/"&gt;Matías Mospan&lt;/a&gt; 、 &lt;a href="https://www.linkedin.com/in/milagros-zea-c%C3%A1rdenas-56212217/"&gt;Milagros Zea Cárdenas&lt;/a&gt;以及凭借专业精神和奉献精神走出公园的志愿者&lt;a href="https://www.linkedin.com/in/pabloesquerra/"&gt;Pablo Esquerra Veas&lt;/a&gt; （期待 2025 年智利 KCD！）、 &lt;a href="https://www.linkedin.com/in/camilasofiafernandez/"&gt;Camila Sofía Fernández&lt;/a&gt; ，由&lt;a href="https://www.linkedin.com/in/eduardo-spotti/"&gt;Eduardo Spotti&lt;/a&gt;领导，他的奉献精神使该活动取得了巨大成功。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="KCD 阿根廷舞台上的阿根廷社区" class="wp-image-109531" height="748" src="https://www.cncf.io/wp-content/uploads/2024/05/image-31.png" width="1600" /&gt;&lt;/figure&gt;&lt;p id="ember58"&gt;该活动很好地展示了阿根廷社区的热情和专业知识。富有洞察力的演讲和实践研讨会以 Marcos Nils 的精彩开场开始，随后由&lt;a href="https://www.linkedin.com/in/octavio-serpez/"&gt;Octavio Serpez&lt;/a&gt;和&lt;a href="https://www.linkedin.com/in/martin-medina-a06519129/"&gt;Martin Medina&lt;/a&gt;介绍了 K8s Security； &lt;a href="https://www.linkedin.com/in/julianommartins/"&gt;Juliano Martins&lt;/a&gt;和 Marcelo Quadros 进行了关于 Kubernetes 采用的精彩演讲， &lt;a href="https://www.linkedin.com/in/adawolfs/"&gt;Alvin Estrada&lt;/a&gt;介绍了内核空间中的 eBPF， &lt;a href="https://www.linkedin.com/in/roxsross/"&gt;Rossana Suarez&lt;/a&gt;和&lt;a href="https://www.linkedin.com/in/axelglabruna/"&gt;Axel Gabriel Labruna&lt;/a&gt;介绍了如何利用 KubeChaos 让自己坚不可摧，然后与&lt;a href="https://www.linkedin.com/in/mferreyra/"&gt;Mauricio&lt;/a&gt;进行了有趣的 GenAI 小组讨论&lt;a href="https://www.linkedin.com/in/mferreyra/"&gt;Ferreyra&lt;/a&gt; 、 &lt;a href="https://www.linkedin.com/in/ulisesmartins/"&gt;Ulises Martins&lt;/a&gt;和&lt;a href="https://www.linkedin.com/in/pcasas/"&gt;Pablo Casas&lt;/a&gt;在&lt;a href="https://www.linkedin.com/in/eduardo-spotti/"&gt;Eduardo Spotti&lt;/a&gt;的带领下， &lt;a href="https://www.linkedin.com/in/igor-eulalio-morgado-lopes-310687163/"&gt;Igor Eulalio Morgado Lopes&lt;/a&gt;发表了关于 Kubernetes 自动威胁响应引擎的精彩演讲。有很多选择，我希望我能参加所有的选择。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="四位演讲者在 2024 年阿根廷 Kubernetes 社区日舞台上发言" class="wp-image-109533" height="850" src="https://www.cncf.io/wp-content/uploads/2024/05/image-32.png" width="1600" /&gt;&lt;/figure&gt;&lt;p id="ember71"&gt;此次活动在美丽的 Ciudad Cultura Konex 举行，这是与老朋友和新面孔交流的绝佳机会。 &lt;a href="https://www.linkedin.com/in/emilia-vicini/"&gt;Emilia Vicini&lt;/a&gt; 、 &lt;a href="https://www.linkedin.com/in/hernanfarruggia/"&gt;Hernán Farruggia&lt;/a&gt; 、 &lt;a href="https://www.linkedin.com/in/edsmon/"&gt;Edward Monzon&lt;/a&gt; 、 &lt;a href="https://www.linkedin.com/in/axelglabruna/"&gt;Axel Gabriel Labruna&lt;/a&gt; 、 &lt;a href="https://www.linkedin.com/in/lucio-bassani-419106195/"&gt;Lucio Bassani&lt;/a&gt; 、 &lt;a href="https://www.linkedin.com/in/sergio-canales-espinoza/"&gt;Sergio Canales&lt;/a&gt;等，如果我漏掉了任何人，请原谅我。特别感谢&lt;a href="https://www.linkedin.com/company/wearekadre/"&gt;Kadre&lt;/a&gt;团队、Emilia 和 Hernan 勇敢地加入我们。作为 CNCF 大使，我想表达我的谢意。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="KCD 阿根廷队参赛者在足球桌前合影" class="wp-image-109534" height="1500" src="https://www.cncf.io/wp-content/uploads/2024/05/image-10.jpeg" width="1125" /&gt;&lt;/figure&gt;&lt;p id="ember79"&gt;这些活动以独特的方式弥合了在线联系和现实生活互动之间的差距，将网络友谊变成了真正的拥抱和握手。友情和共同的目标让每个人都感到在社区中受到重视。照片转储来了警报！ &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="KCD 阿根廷队参赛者在足球桌前合影" class="wp-image-109535" height="1000" src="https://www.cncf.io/wp-content/uploads/2024/05/image-11.jpeg" width="1333" /&gt;&lt;/figure&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="参与者在 KCD 阿根廷活动中自拍" class="wp-image-109536" height="1000" src="https://www.cncf.io/wp-content/uploads/2024/05/image-12.jpeg" width="1333" /&gt;&lt;/figure&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="参与者在 KCD 阿根廷活动上合影" class="wp-image-109537" height="1500" src="https://www.cncf.io/wp-content/uploads/2024/05/image-13.jpeg" width="1125" /&gt;&lt;/figure&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="参与者在 KCD 阿根廷活动中自拍" class="wp-image-109538" height="1000" src="https://www.cncf.io/wp-content/uploads/2024/05/image-14.jpeg" width="1333" /&gt;&lt;/figure&gt;&lt;p id="ember84"&gt;作为&lt;a href="https://www.linkedin.com/company/cuemby/"&gt;Cuemby&lt;/a&gt;的首席执行官，我坚信支持社区，尤其是在开源世界快速变化和不确定的时期。我们在 KCD 阿根廷的存在，以及&lt;a href="https://www.linkedin.com/company/crubyt/"&gt;Crubyt&lt;/a&gt; 、 &lt;a href="https://www.linkedin.com/company/wearekadre/"&gt;Kadre&lt;/a&gt; 、 &lt;a href="https://www.linkedin.com/company/whitestack/"&gt;Whitestack&lt;/a&gt; 、 &lt;a href="https://www.linkedin.com/company/craftech-io/"&gt;Craftech&lt;/a&gt; 、 &lt;a href="https://www.linkedin.com/company/bgh-tech-partner/"&gt;BGH Tech Partner&lt;/a&gt; 、 &lt;a href="https://www.linkedin.com/company/mercadolibre/"&gt;Mercado Libre&lt;/a&gt; 、 &lt;a href="https://www.linkedin.com/company/dinocloud/"&gt;DinoCloud&lt;/a&gt;和&lt;a href="https://www.linkedin.com/company/sysarmy10/"&gt;Sysarmy&lt;/a&gt;等其他支持公司的存在，强调了我们对促进协作和创新的承诺。我们通过与社区的沉浸、合作和共同创造来展示这一承诺。我们集体支持的影响是鼓舞人心的，强化了这样一种理念：我们齐心协力，利用技术创造一个更美好、更可持续的世界。&lt;/p&gt;&lt;p id="ember85"&gt;在活动期间，我介绍了一个成功采用云原生的案例研究。我分享了现实生活中的挑战示例，例如云原生和 Kubernetes 的复杂采用，胜利，例如减少发布新功能的时间，以及成功所需的持续演进。公司内各个部门（包括工程和管理）之间的协作努力是我演讲的一大亮点。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="Angel Ramirez 在《平台工程对云运营的影响》的舞台上发表演讲，同时避免过度工程" class="wp-image-109539" height="1000" src="https://www.cncf.io/wp-content/uploads/2024/05/image-15.jpeg" width="1333" /&gt;&lt;/figure&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="Angel Ramirez 在《平台工程对云运营的影响》的舞台上发表演讲，同时避免过度工程" class="wp-image-109540" height="1000" src="https://www.cncf.io/wp-content/uploads/2024/05/image-16.jpeg" width="1333" /&gt;&lt;/figure&gt;&lt;p id="ember88"&gt;此外，我还主持了与&lt;a href="https://www.linkedin.com/in/hernanfarruggia/"&gt;Hernán Farruggia&lt;/a&gt; 、 &lt;a href="https://www.linkedin.com/in/adawolfs/"&gt;Alvin Estrada&lt;/a&gt; 、 &lt;a href="https://www.linkedin.com/in/roxsross/"&gt;Rossana Suarez&lt;/a&gt;和&lt;a href="https://www.linkedin.com/in/eduardo-spotti/"&gt;Eduardo Spotti&lt;/a&gt;的动态圆桌炉边聊天，我们深入探讨了人工智能的多方面主题。我们探讨了其成本影响、采用策略、人才获取和演变，甚至比较了区块链趋势。我还要感谢观众的积极参与和参与。你们的问题和见解丰富了讨论，让 KCD 阿根廷队令人难忘。 KCD 阿根廷不仅仅是一场赛事；它庆祝社区、协作以及利用技术产生积极影响的共同愿景。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="阿根廷社区齐聚一堂，参加 KCD 阿根廷活动" class="wp-image-109541" height="1000" src="https://www.cncf.io/wp-content/uploads/2024/05/image-33.jpg" width="1333" /&gt;&lt;/figure&gt;&lt;p id="ember94"&gt;我要衷心感谢 Eduardo Spotti 的热情接待以及营造出宾至如归的环境。我真诚地感谢他作为社区领袖和个人的热情接待。社区就是每个人，我要感谢 Edu 的家人，他们欢迎我们并允许我们成为他们的一部分，使这成为一次美妙的经历。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="阿根廷KCD拼贴图片" class="wp-image-109542" height="1000" src="https://www.cncf.io/wp-content/uploads/2024/05/image-33.png" width="1331" /&gt;&lt;/figure&gt;&lt;p id="ember96"&gt;对于 Edu 的家人，我对他们的支持和参与表示由衷的感谢和认可，使这个社区变得独一无二。每个人都是其中的一部分！ &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Thu, 23 May 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/05/24/kcd-argentina-2024-mastering-the-kubernetes-tango-and-scoring-goals-in-container-orchestration/</guid></item><item><title>【Happy 7th Birthday, Istio!】七岁生日快乐，Istio！</title><link>https://www.cncf.io/blog/2024/05/24/happy-7th-birthday-istio/</link><description>&lt;p&gt;&lt;em&gt;项目帖子最初由 Lin Sun (Solo.io) 为 Istio 指导委员会发布在&lt;a href="https://istio.io/latest/blog/2024/happy-7th-birthday/"&gt;Istio 博客&lt;/a&gt;上&lt;/em&gt;&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;em&gt;庆祝 Istio 的发展势头和令人兴奋的未来。&lt;/em&gt; &lt;/h3&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="7 岁生日快乐，Istio 旗帜" class="wp-image-109082" height="1080" src="https://www.cncf.io/wp-content/uploads/2024/05/7th-birthday.jpg" width="1080" /&gt;&lt;/figure&gt;&lt;p&gt; 2017 年的今天， &lt;a href="https://techcrunch.com/2017/05/24/google-ibm-and-lyft-launch-istio-an-open-source-platform-for-managing-and-securing-microservices/" rel="noreferrer noopener" target="_blank"&gt;Google 和 IBM 宣布推出 Istio 服务网格&lt;/a&gt;。 Istio 是一项开放技术，使开发人员能够无缝连接、管理和保护不同服务的网络 - 无论平台、来源或供应商如何。我们简直不敢相信 Istio 今天已经七岁了！为了庆祝该项目的七岁生日，我们想要强调 Istio 的发展势头及其令人兴奋的未来。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="rapid-adoption-among-users"&gt;用户快速采用&lt;a href="https://istio.io/latest/blog/2024/happy-7th-birthday/#rapid-adoption-among-users"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt; Istio 是全球采用最广泛的服务网格项目，自 2017 年成立以来一直保持着强劲的发展势头。去年，随着&lt;a href="https://www.cncf.io/announcements/2023/07/12/cloud-native-computing-foundation-reaffirms-istio-maturity-with-project-graduation/" rel="noreferrer noopener" target="_blank"&gt;CNCF 的毕业，&lt;/a&gt; Istio 加入了 Kubernetes、Prometheus 和云原生生态系统的其他中坚力量的行列。最终用户范围从数字原生初创公司到全球最大的金融机构和电信公司，&lt;a href="https://istio.io/latest/about/case-studies/"&gt;案例研究&lt;/a&gt;来自 eBay、T-Mobile、Airbnb、Splunk、FICO、T-Mobile、Salesforce 等公司。&lt;/p&gt;&lt;p&gt; Istio 的控制平面和 sidecar 是 Docker Hub 上下载量排名第三和第四的镜像，每个镜像的&lt;a href="https://hub.docker.com/search?q=istio" rel="noreferrer noopener" target="_blank"&gt;下载量都超过 100 亿次&lt;/a&gt;。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="显示 Docker Hub 下载 Istio 的屏幕截图！" class="wp-image-109525" height="764" src="https://www.cncf.io/wp-content/uploads/2024/05/image-30-1.jpg" width="1874" /&gt;&lt;/figure&gt;&lt;p&gt;我们在&lt;a href="https://github.com/istio/istio/" rel="noreferrer noopener" target="_blank"&gt;Istio 的主存储库&lt;/a&gt;上拥有超过 35,000 个 GitHub star，并且还在持续增长。感谢所有为 istio/istio 存储库加注星标的人。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="显示 istio/istio 存储库的 GitHub star 的流程图！" class="wp-image-109527" height="1443" src="https://www.cncf.io/wp-content/uploads/2024/05/image-30.png" width="1999" /&gt;&lt;/figure&gt;&lt;p&gt;在 Istio 七岁生日之际，我们询问了一些用户的想法： &lt;/p&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p class="has-gray-300-background-color has-background"&gt;如今，Istio 成为 Airbnb 服务网格的支柱，管理着数十万个工作负载之间的所有流量。自采用 Istio 五年以来，我们一直对这个决定感到满意。能够成为这个充满活力和支持性社区的一部分真是太棒了。生日快乐，伊斯蒂奥！&lt;/p&gt; &lt;cite&gt;— 何伟波，Airbnb 高级软件工程师&lt;/cite&gt;&lt;/blockquote&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote has-pink-400-color has-gray-200-background-color has-text-color has-background has-link-color wp-elements-fa614a7c81809409e1640f8e9e15d50b is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p class="has-black-color has-gray-300-background-color has-text-color has-background has-link-color wp-elements-9b51468b695269ddc38b867150ddede8"&gt; Istio 增强了我们在类似生产的隔离环境中快速部署和测试微服务以及依赖服务的能力。这种称为隔离的方法使 eBay 的开发人员能够在开发生命周期的早期识别缺陷，通过减少不稳定来提高实时环境的稳定性，并建立对自动化生产部署的信心。最终，这加快了开发进程并提高了生产部署的成功率。&lt;/p&gt; &lt;cite&gt;— Sudheendra Murthy，eBay 首席工程师兼服务网格架构师&lt;/cite&gt;&lt;/blockquote&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p class="has-gray-300-background-color has-background"&gt; Istio 通过集成分布式跟踪和 OpenTelemetry 增强了云平台的安全性，同时简化了可观察性。这种组合提供了强大的安全功能和对系统性能的深入洞察，从而能够更有效地监控我们的分布式服务并进行故障排除。&lt;/p&gt; &lt;cite&gt;— Sathish Krishnan，瑞银集团杰出工程师&lt;/cite&gt;&lt;/blockquote&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p class="has-gray-300-background-color has-background"&gt;在我们采用基于微服务的架构的过程中，采用 Istio 改变了我们的工程组织的游戏规则。其包含电池的方法使我们能够轻松管理流量路由，深入了解我们的服务与分布式跟踪的服务交互，以及通过 WASM 插件进行扩展。其全面的功能集使其成为我们基础设施的重要组成部分，并允许我们的工程师将应用程序代码与基础设施管道分离。&lt;/p&gt; &lt;cite&gt;— Shray Kumar，Bluecore 首席软件工程师&lt;/cite&gt;&lt;/blockquote&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p class="has-gray-300-background-color has-background"&gt; Istio 太棒了，我已经使用它 4 到 5 年了，发现它可以非常轻松地以非常低的延迟管理数以万计的 pod 的数千个网关。如果您需要建立一个非常安全的基础设施，Istio 是一个很好的朋友。此外，它非常适合需要大量安全性并且需要符合 PCI/HIPAA/SoC2 标准的基础设施。&lt;/p&gt; &lt;cite&gt;— Ezequiel Arielli，SIGMA Financial AI 云平台主管&lt;/cite&gt;&lt;/blockquote&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p class="has-gray-300-background-color has-background"&gt; Istio 帮助我们在为不同客户的所有部署中以标准化的方式保护我们的环境。 Istio 的灵活性和可定制性确实帮助我们通过将加密、授权和身份验证委托给服务网格来构建更好的应用程序，而不必在我们的应用程序代码库中实现这些功能。&lt;/p&gt; &lt;cite&gt;— Joel Millage，BCubed 软件工程师&lt;/cite&gt;&lt;/blockquote&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p class="has-gray-300-background-color has-background"&gt;我们在 Predibase 广泛使用 Istio 来简化多集群网格之间的通信，帮助部署和训练具有低延迟和故障转移的开源微调 LLM 模型。借助 Istio，我们获得了许多开箱即用的功能，否则这些功能需要我们花费数周的时间才能实现。&lt;/p&gt; &lt;cite&gt;— Gyanesh Mishra，Predibase 云基础设施工程师&lt;/cite&gt;&lt;/blockquote&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p class="has-gray-300-background-color has-background"&gt;毫无疑问，Istio 是市场上最完整、功能最齐全的 Service Mesh 平台。这一成功是社区积极参与的直接结果，该社区能够自助并始终包含在项目方向中。祝贺周年纪念日，Istio！&lt;/p&gt; &lt;cite&gt;— Daniel Requena，iFood 的 SRE&lt;/cite&gt; &lt;/blockquote&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p class="has-gray-300-background-color has-background"&gt;我们多年来一直在生产中使用 Istio，它是我们基础设施的关键组件，使我们能够安全地连接微服务，并提供入口/出口流量管理和一流的可观察性。社区很棒，每个版本都带来了许多令人兴奋的功能。&lt;/p&gt; &lt;cite&gt;— Frédéric Gaudet，BblalaCar 高级 SRE&lt;/cite&gt;&lt;/blockquote&gt;&lt;h2 class="wp-block-heading" id="amazing-diversity-of-contributors-and-vendors"&gt;贡献者和供应商的惊人多样性&lt;a href="https://istio.io/latest/blog/2024/happy-7th-birthday/#amazing-diversity-of-contributors-and-vendors"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在过去的一年里，我们的社区在贡献公司的数量和贡献者的数量方面都出现了巨大的增长。还记得 Istio 三岁时就有 500 名贡献者吗？去年我们有超过 1,700 名贡献者！&lt;/p&gt;&lt;p&gt;随着微软开放服务网格团队加入 Istio 社区，我们将 Azure 添加到提供 Istio 兼容解决方案&lt;a href="https://istio.io/latest/about/ecosystem/"&gt;的云和企业 Kubernetes 供应商列表&lt;/a&gt;中，包括 Google Cloud、Red Hat OpenShift、VMware Tanzu、华为云、DaoCloud、Oracle Cloud、腾讯云、Akamai 云和阿里云。我们也很高兴看到 Amazon Web Services 团队发布了&lt;a href="https://aws-ia.github.io/terraform-aws-eks-blueprints/patterns/istio/" rel="noreferrer noopener" target="_blank"&gt;Istio 的 EKS 蓝图，&lt;/a&gt;因为希望在 AWS 上运行 Istio 的用户需求很高。&lt;/p&gt;&lt;p&gt;专业网络软件提供商也在推动 Istio 向前发展，Solo.io、Tetrate 和 F5 Networks 都提供可在任何环境中运行的企业 Istio 解决方案。&lt;/p&gt;&lt;p&gt;以下是过去一年贡献最大的公司，其中 Solo.io、Google 和 DaoCloud 占据前三名。虽然这些公司中的大多数都是 Istio 供应商，但 Salesforce 和 Ericsson 是最终用户，在生产中运行 Istio！ &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="过去一年对 Istio 贡献最大的公司截图" class="wp-image-109528" height="1146" src="https://www.cncf.io/wp-content/uploads/2024/05/image-31.jpg" width="1782" /&gt;&lt;/figure&gt;&lt;p&gt;以下是我们社区领袖的一些想法： &lt;/p&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote has-gray-300-background-color has-background is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p&gt;随着各行业云原生采用的成熟，服务网格的采用在过去几年中一直在稳步上升。自从他们去年从 CNCF 毕业以来，Istio 帮助推动了这一成熟，我们祝他们生日快乐。随着 Istio 团队添加环境模式等新功能并简化服务网格体验，我们期待观察并支持这种持续增长。&lt;/p&gt; &lt;cite&gt;— CNCF 首席技术官 Chris Aniszczyk&lt;/cite&gt; &lt;/blockquote&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p class="has-gray-300-background-color has-background"&gt;服务网格是微服务架构的核心，是云原生的标志。 Istio 的生日不仅庆祝了可观察性和流量管理的普及和重要性，还庆祝了对通过加密、相互身份验证和许多其他简化采用、集成和部署体验的其他核心安全原则实现默认安全通信的日益增长的需求。&lt;/p&gt; &lt;cite&gt;— Emily Fox，CNCF TOC 主席兼红帽高级首席软件工程师&lt;/cite&gt;&lt;/blockquote&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p class="has-gray-300-background-color has-background"&gt;在我看来，Istio 不是一个服务网格。这是一个由用户和贡献者组成的协作社区，他们恰好提供了世界上最受欢迎的服务网格。祝这个神奇的社区生日快乐！这是美妙的七年，我期待着在 Istio 社区中与来自世界各地的朋友和同事一起庆祝更多！&lt;/p&gt; &lt;cite&gt;— Mitch Connors，Istio 技术监督委员会成员兼 Microsoft 首席工程师&lt;/cite&gt;&lt;/blockquote&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p class="has-gray-300-background-color has-background"&gt;在过去的两年里，成为世界上最受欢迎的服务网格团队的一员是一种荣幸和充实的经历。很高兴看到 Istio 从 CNCF 孵化阶段成长为毕业项目，更高兴看到最新、最伟大的 1.22 版本发布时的动力和热情。祝愿未来几年有更多成功的发布。&lt;/p&gt; &lt;cite&gt;— Faseela K，Istio 指导委员会成员兼爱立信云原生开发人员&lt;/cite&gt;&lt;/blockquote&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p class="has-gray-300-background-color has-background"&gt; Istio 的独特之处在于，社区由来自世界各地的开发人员、用户和供应商共同努力，使 Istio 成为业界最好、最强大的开放服务网格。正是社区的力量使 Istio 如此成功，现在在 CNCF 的领导下，我期待看到 Istio 成为所有云原生应用程序事实上的服务网格标准。&lt;/p&gt; &lt;cite&gt;— Neeraj Poddar，Istio 技术监督委员会成员兼 Solo.io 工程副总裁&lt;/cite&gt;&lt;/blockquote&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p class="has-gray-300-background-color has-background"&gt;在过去的 5 年里，我很荣幸能够与 Istio 社区合作。有大量的贡献者，他们的奉献、热情和辛勤工作让我在这个项目上度过了真正愉快的时光。社区中有许多用户提供反馈，帮助 Istio 成为最好的服务网格。我仍然对社区所做的事情感到惊讶，并期待看到我们未来将取得的成功。&lt;/p&gt; &lt;cite&gt;— Eric Van Norman，Istio 技术监督委员会成员兼 IBM 咨询软件工程师&lt;/cite&gt;&lt;/blockquote&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p class="has-gray-300-background-color has-background"&gt; Istio 是 Salesforce 服务网格基础设施的支柱，目前每天为我们所有服务提供数万亿个请求。我们用网格解决了很多复杂的问题。很高兴成为这段旅程的一部分并为社区做出贡献。多年来，Istio 已经成熟为可靠的服务网格，同时不断创新。我们对未来感到兴奋！&lt;/p&gt; &lt;cite&gt;— Rama Chavali，Istio 网络工作组负责人兼 Salesforce 软件工程架构师&lt;/cite&gt;&lt;/blockquote&gt;&lt;h2 class="wp-block-heading" id="continuous-technical-innovation"&gt;持续技术创新&lt;a href="https://istio.io/latest/blog/2024/happy-7th-birthday/#continuous-technical-innovation"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;我们坚信多元化推动创新。最让我们惊讶的是Istio社区的不断创新，从让升级变得更容易，到采用Kubernetes Gateway API，到添加新的无sidecar环境数据平面模式，再到让Istio变得易于使用和尽可能透明。&lt;/p&gt;&lt;p&gt; Istio 的环境模式于 2022 年 9 月推出，旨在简化操作、更广泛的应用程序兼容性并降低基础设施成本。 Ambient 模式引入了轻量级、共享的第 4 层 (L4) 节点代理和可选的第 7 层 (L7) 代理，从而消除了数据平面对传统 sidecar 代理的需要。环境模式背后的核心创新在于它将 L4 和 L7 处理分为两个不同的层。这种分层方法允许您逐步采用 Istio，实现从无网格到安全覆盖 (L4)，再到可选的完整 L7 处理的平滑过渡 - 根据需要，在整个队列中基于每个命名空间。&lt;/p&gt;&lt;p&gt;作为&lt;a href="https://istio.io/latest/news/releases/1.22.x/announcing-1.22/"&gt;Istio 1.22 版本&lt;/a&gt;的一部分，&lt;a href="https://istio.io/latest/blog/2024/ambient-reaches-beta/"&gt;环境模式已达到 Beta 版&lt;/a&gt;，您可以在生产环境中运行 Istio，无需使用 sidecar，但需采取预防措施。&lt;/p&gt;&lt;p&gt;以下是我们的贡献者和用户的一些想法和祝福： &lt;/p&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p class="has-gray-300-background-color has-background"&gt;自 Istio 准备投入生产之前起，Auto Trader 就一直在生产中使用 Istio！它显着提高了我们的运营能力，标准化了我们保护、配置和监控服务的方式。升级已经从艰巨的任务演变为几乎不是什么大事，而 Ambient 的推出证明了我们对简化的持续承诺——使新用户比以往任何时候都更容易以最小的努力获得真正的价值。&lt;/p&gt; &lt;cite&gt;— Karl Stoney，AutoTrader UK 技术架构师&lt;/cite&gt;&lt;/blockquote&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote has-gray-300-background-color has-background is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p&gt; Istio 是 Akamai 云的云原生堆栈的核心组件，为产品和服务提供安全的服务网格，每个集群可提供数百万 RPS 和数百 GB 的吞吐量。我们期待该项目的未来路线图，并很高兴能够在今年晚些时候评估新功能，例如环境网格。&lt;/p&gt; &lt;cite&gt;— Alex Chircop，Akamai 首席产品架构师&lt;/cite&gt;&lt;/blockquote&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote has-gray-300-background-color has-background is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p&gt; Istio 的网络和安全功能已成为我们基础设施运营的基本组成部分。 Istio 环境模式的引入极大地简化了管理，并将我们的 Kubernetes 集群节点的大小减少了大约 20%。我们成功地将生产系统迁移到使用环境数据平面。&lt;/p&gt; &lt;cite&gt;— Saarko Eilers，EISST International Ltd 基础设施运营经理&lt;/cite&gt;&lt;/blockquote&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote has-gray-300-background-color has-background is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p&gt;祝 Istio 生日快乐！多年来，我很荣幸成为这个伟大社区的一员，特别是当我们继续利用环境模式构建世界上最好的服务网格时。&lt;/p&gt; &lt;cite&gt;— John Howard，最多产的 Istio 贡献者、Istio 技术监督委员会成员、Solo.io 高级架构师&lt;/cite&gt;&lt;/blockquote&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p class="has-gray-300-background-color has-background"&gt;很高兴看到像 Istio 这样的成熟项目继续发展和蓬勃发展。成为 CNCF 项目的毕业项目吸引了一批新的开发人员，为其持续成功做出了贡献。同时，环境网格和网关 API 支持有望迎来服务网格采用的新时代。我很高兴看到即将发生的事情！&lt;/p&gt; &lt;cite&gt;— Justin Pettit，Istio 指导委员会成员兼 Google 高级工程师&lt;/cite&gt;&lt;/blockquote&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p class="has-gray-300-background-color has-background"&gt;祝这个令人难以置信的 Istio 项目生日快乐，它不仅彻底改变了我们处理服务网格技术的方式，而且还培养了一个充满活力和包容性的社区！见证 Istio 从 CNCF 孵化项目到毕业项目的演变是非常了不起的。最近发布的 Istio 1.22 强调了其持续发展和对卓越的承诺，提供了增强的功能和改进的性能。期待该项目的下一步。&lt;/p&gt; &lt;cite&gt;— Iris Ding，Istio 指导委员会成员兼英特尔软件工程师&lt;/cite&gt;&lt;/blockquote&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p class="has-gray-300-background-color has-background"&gt;我很荣幸从一开始就成为 Istio 项目的一部分，见证了它和社区多年来的成熟和发展。就我个人而言，过去八年里，Istio 一直是我职业生涯的核心！我坚信 Istio 的最佳状态尚未到来，在未来几年中，我们将看到 Istio 的持续增长、成熟和采用。为美好的社区共同实现这一里程碑干杯。&lt;/p&gt; &lt;cite&gt;— Zack Butcher，Istio 指导委员会成员兼 Tetrate 创始人兼首席工程师&lt;/cite&gt;&lt;/blockquote&gt;&lt;h2 class="wp-block-heading" id="learn-more-about-istio"&gt;了解有关 Istio 的更多信息&lt;a href="https://istio.io/latest/blog/2024/happy-7th-birthday/#learn-more-about-istio"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt; 如果您是 Istio 新手，这里有一些资源可以帮助您了解更多信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;查看&lt;a href="https://istio.io/"&gt;项目网站&lt;/a&gt;和&lt;a href="https://github.com/istio/istio/" rel="noreferrer noopener" target="_blank"&gt;GitHub 存储库&lt;/a&gt;。&lt;/li&gt;&lt;li&gt;阅读&lt;a href="https://istio.io/latest/docs/"&gt;文档&lt;/a&gt;。&lt;/li&gt;&lt;li&gt;加入&lt;a href="https://slack.istio.io/" rel="noreferrer noopener" target="_blank"&gt;Slack&lt;/a&gt;社区。&lt;/li&gt;&lt;li&gt;在&lt;a href="https://twitter.com/IstioMesh" rel="noreferrer noopener" target="_blank"&gt;Twitter&lt;/a&gt;和&lt;a href="https://www.linkedin.com/company/istio" rel="noreferrer noopener" target="_blank"&gt;LinkedIn&lt;/a&gt;上关注该项目。&lt;/li&gt;&lt;li&gt;参加&lt;a href="https://github.com/istio/community/blob/master/README.md#community-meeting" rel="noreferrer noopener" target="_blank"&gt;用户社区会议&lt;/a&gt;。&lt;/li&gt;&lt;li&gt;参加&lt;a href="https://github.com/istio/community/blob/master/WORKING-GROUPS.md#working-group-meetings" rel="noreferrer noopener" target="_blank"&gt;工作组会议&lt;/a&gt;。&lt;/li&gt;&lt;li&gt;合并拉取请求后，通过提交&lt;a href="https://github.com/istio/community/blob/master/ROLES.md#member" rel="noreferrer noopener" target="_blank"&gt;成员资格请求&lt;/a&gt;成为 Istio 贡献者和开发人员。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如果您已经是 Istio 社区的一员，请祝 Istio 项目七岁生日快乐，并在社交媒体上分享您对该项目的想法。感谢您的帮助和支持！ &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Thu, 23 May 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/05/24/happy-7th-birthday-istio/</guid></item><item><title>【Kubestronaut in Orbit: Yongkang He】在轨宇航员：何永康</title><link>https://www.cncf.io/blog/2024/05/23/kubestronaut-in-orbit-yongkang-he/</link><description>&lt;h2 class="wp-block-heading"&gt;认识永康&lt;/h2&gt;&lt;p&gt;永康是我们首批&lt;a href="https://www.cncf.io/training/kubestronaut/"&gt;Kubetronaut&lt;/a&gt;之一，总部位于新加坡，为亚太地区的一家公司提供支持。他将重点转向云原生技术，现已获得 Kubernetes 的全面认证（KCNA、CKA、CKAD、CKS 和 KCSA）。他致力于开源，在多个国家组织了主要的 Kubernetes 聚会，并在 GitHub 上提供自动化脚本，用于快速设置 Kubernetes 集群。他还运营着一个专注于 Kubernetes 数据管理和安全性的 YouTube 频道。&lt;/p&gt;&lt;p&gt;在这里查看永康的 K8s 频道： &lt;a href="http://k8sug.com/"&gt;http://k8sug.com、http&lt;/a&gt; &lt;a href="http://g.k8sug.com/"&gt;://g.k8sug.com、http&lt;/a&gt; &lt;a href="http://y.k8sug.com/"&gt;://y.k8sug.com&lt;/a&gt;&lt;/p&gt;&lt;p&gt;如果您想成为 Kubetronaut，请在&lt;a href="https://www.cncf.io/training/kubestronaut/"&gt;CNCF Kubetronaut&lt;/a&gt;页面上获取更多详细信息。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;您什么时候开始使用 Kubernetes ——您的第一个项目是什么？&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt; 2021 年，我启动了一个项目，通过自动化展示 Kubernetes 备份、灾难恢复 (DR) 和迁移功能。这一努力促使我开发了全面的自动化脚本，现在可以在 GitHub 上访问这些脚本&lt;a href="https://github.com/yongkanghe"&gt;：https://github.com/yongkanghe。&lt;/a&gt;&lt;/p&gt;&lt;p&gt;借助这些脚本，任何人都可以在 AWS、Azure 或 GCP 等平台上快速部署托管 Kubernetes 环境，并在几分钟内启用容器备份，从而轻松进行实验和探索。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;您现在从事或使用的主要 CNCF 项目是什么？在您的职业生涯中，您最喜欢哪些项目？&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;我的主要关注点是 Kubernetes，它构成了我工作的支柱。在 CNCF 项目中，我特别喜欢使用&lt;a href="https://github.com/vmware-tanzu/velero"&gt;Velero&lt;/a&gt; 、 &lt;a href="https://github.com/falcosecurity/falco"&gt;Falco&lt;/a&gt; 、 &lt;a href="https://github.com/kubearmor/KubeArmor"&gt;KubeArmor&lt;/a&gt; 、 &lt;a href="https://github.com/aquasecurity"&gt;Trivy&lt;/a&gt; 、 &lt;a href="https://github.com/kubescape/kubescape"&gt;Kubescape&lt;/a&gt;等数据管理和安全工具。这些项目不仅增强了我的工作流程，而且还有助于确保数据完整性和防范潜在的安全威胁。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;是什么促使您获得所有 Kubernetes 证书？&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;对我来说，这是要突破自己的界限，接受掌握新事物的挑战，并扩大我的知识基础。此外，当我知道我的旅程可以激励其他人开始探索 Kubernetes 和多云环境时，我感到非常满意。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;这些证书对您的职业生涯有何帮助？&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;我拥有涵盖多云、Kubernetes、安全、DevOps 和相关领域的 60 多项认证，我的职业生涯腾飞的原因如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;丰富专业知识&lt;/strong&gt;：每项认证都加深了我的知识，使我成为云、容器和自动化领域的专家。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;证书验证&lt;/strong&gt;：这些认证验证了我的技能，推动我获得工作机会和职业发展。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;职业发展：&lt;/strong&gt;凭借这些专业知识，我已做好在云架构、Kubernetes 管理和 DevOps 工程方面取得进步的准备。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;解决问题的技能：&lt;/strong&gt;我多样化的技能使我能够轻松应对复杂的挑战，从构建弹性云基础设施到自动化复杂流程。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;行业认可：&lt;/strong&gt;我被视为该领域的领导者，指导团队、分享知识并推动创新。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;社区参与：&lt;/strong&gt;通过认证与同行互动可以促进集体学习和成长。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;总之，我的认证是在云计算、DevOps 等领域取得成功的关键！&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;您为想要使用 k8s 的人推荐了哪些其他书籍/网站/课程？&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;说到学习，我个人更喜欢在线课程。在成为一名 Kubetronaut 的过程中，我尝试了各种学习平台。经过比较后，我发现 KodeKloud 是最有效的实践学习平台，特别是如果您的目标是获得实践经验并通过 CKA、CKAD 和 CKS 等基于实践的考试。为了准备参加朝中社，我利用了 YouTube 上安德鲁·布朗 (Andrew Brown) 的免费课程。&lt;/p&gt;&lt;p&gt;此外，我强烈建议尝试 Killer.sh 进行考试模拟。注册后，您将获得 36 小时的在线模拟平台访问权限，这对于准备考试非常宝贵。&lt;/p&gt;&lt;p&gt;至于书籍，我听说过 Nigel Poulton 的《The Kubernetes Book》和 Chad M. Crowell 的《Acing the Certified Kubernetes Administrator Exam》。这些资源受到强烈推荐，并且众所周知对考试准备很有帮助。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;你在空闲时间做什么？&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;我热爱旅行，喜欢探索不同的目的地，同时珍惜与家人在一起的美好时光。最近，我开始了一次激动人心的冒险，首先是参观在西雅图举行的 Microsoft MVP 全球峰会。从那里，我继续前往巴黎的 KubeCon + CloudNativeCon Europe，然后前往圣克拉拉的英特尔博物馆，然后前往拉斯维加斯的 Google Next &amp;#39;24。在回家之前，我在奥克兰进行了一次愉快的停留，沿途欣赏了每个地方的美丽景色。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;正如您所知，Kubernetes 今年已满 10 岁了，您对 Kubernetes 未来 10 年最兴奋的是什么？&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;成熟度增强，巩固了其作为容器编排标准的地位。&lt;/li&gt;&lt;li&gt;加速服务网格、无服务器和 AI/ML 集成等云原生技术的创新。&lt;/li&gt;&lt;li&gt;使用新工具和平台扩展生态系统，以简化开发。&lt;/li&gt;&lt;li&gt;在无缝工作负载编排的混合云和多云采用中发挥核心作用。&lt;/li&gt;&lt;li&gt;通过资源优化关注可持续性和效率。&lt;/li&gt;&lt;li&gt;持续的社区合作推动成功和创新。我很自豪能够领导全球最活跃的 Kubernetes 用户组，迄今为止拥有超过 14,000 名成员。随着我们的不断发展，我们准备在未来产生更大的影响。&lt;/li&gt;&lt;/ul&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;您会对刚刚开始 K8s 认证之旅的人说些什么？有什么提示或技巧吗？&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;踏上 Kubernetes 认证之旅永远不会太晚。随着 Kubernetes 在本地、多云和边缘环境中得到广泛采用，对经验丰富的 Kubernetes 专家的需求在未来十年只会继续增长。如果您拥有强大的 Kubernetes 技能，这将为您的职业发展提供绝佳的机会。因此，如果您对 Kubernetes 充满热情并渴望在该领域取得优异成绩，那么现在正是投入并抓住这一职业成长和发展机会的最佳时机。&lt;/p&gt;&lt;p&gt;精通 Kubernetes 需要持续学习；没有捷径。通过持续的教育，掌握就会随之而来。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;如今，云原生生态系统的意义远不止 Kubernetes。您是否计划获得 CNCF 的其他云原生认证？&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;如果有时间，我渴望获得剩余的云原生认证：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; &lt;a href="https://www.cncf.io/training/certification/capa/"&gt;Argo 认证项目助理 (CAPA)&lt;/a&gt;&lt;/li&gt;&lt;li&gt; &lt;a href="https://www.cncf.io/training/certification/cca/"&gt;Cilium 认证助理 (CCA)&lt;/a&gt;&lt;/li&gt;&lt;li&gt; &lt;a href="https://www.cncf.io/training/certification/ica/"&gt;Istio 认证工程师 (ICA)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.cncf.io/training/certification/pca/"&gt;普罗米修斯认证工程师 (PCA)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;您是如何涉足云原生和 Kubernetes 的？&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;这一切都始于一次挫折：我之前工作中的概念验证 (POC) 失败，当时我很难有效地备份容器。这激发了我对容器和 Kubernetes 的浓厚兴趣。巧合的是，大约在同一时间，我与那个雇主分道扬镳。我没有被吓倒，决定通过获得 Kubernetes 管理员认证 (CKA) 认证来加深我的理解。成功完成 CKA 认证后，我抓住机会加入了一家专门从事容器备份、灾难恢复 (DR) 和迁移的公司。这标志着我进入 Kubernetes 和容器管理世界的旅程的开始。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;还有其他想法吗？&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;尽管人工智能目前是一个非常突出的领域，无疑是一个值得追求的方向，但认识到 Kubernetes 作为其基础设施至关重要。事实上，大多数人工智能工作负载都在 Kubernetes 上运行。因此，掌握 Kubernetes 势在必行，因为它是该领域的关键技术&lt;/p&gt;&lt;p&gt;如果您想成为像永康一样的 Kubetronaut，请在&lt;a href="https://www.cncf.io/training/kubestronaut/"&gt;CNCF Kubetronaut&lt;/a&gt;页面上获取更多详细信息。 &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Wed, 22 May 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/05/23/kubestronaut-in-orbit-yongkang-he/</guid></item></channel></rss>