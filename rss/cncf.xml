<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>CNCF - 博客</title><link>https://www.cncf.io/blog/</link><description>CNCF - 博客 - 由 RSSHub 用爱制作(https://github.com/DIYgod/RSSHub)</description><lastBuildDate>Sun, 07 Jul 2024 03:06:07 GMT</lastBuildDate><generator>rfeed v1.1.1</generator><docs>https://github.com/svpino/rfeed/blob/master/README.md</docs><item><title>【Kubestronaut in Orbit: Peter Barczi】</title><link>https://www.cncf.io/blog/2024/07/05/kubestronaut-in-orbit-peter-barczi/</link><description>&lt;h2 class="wp-block-heading"&gt;认识彼得·巴尔奇&lt;/h2&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="彼得·巴尔奇" class="wp-image-113542" height="866" src="https://www.cncf.io/wp-content/uploads/2024/06/Kubestronaut-in-Orbit-4.jpg" width="1650" /&gt;&lt;/figure&gt;&lt;p&gt; Peter 是我们首批 Kubetronaut 之一，他从 2021 年才开始使用 Kubernetes，但仍然设法通过了 CNCF 的所有 Kubernetes 认证。他目前是一家公司的高级 DevOps 工程师/技术主管，该公司致力于构建专注于机密计算的云产品。在他的职位上，他还管理物理服务器、云、大规模操作 Linux 操作系统和 Kubernetes 集群，并且是一名内部 Linux 培训师。&lt;/p&gt;&lt;p&gt;如果您想成为 Kubetronaut，请在&lt;a href="https://www.cncf.io/training/kubestronaut/"&gt;CNCF Kubetronaut&lt;/a&gt;页面上获取更多详细信息。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;您什么时候开始使用 kubernetes——您的第一个项目是什么？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我于 2021 年开始自学 K8s。我的第一个项目（毫不奇怪）是在 Kubernetes 上运行的 NGINX Web 服务器。  后来，我在将基础设施服务迁移到 Kubernetes 的过程中使用了 K8s。&lt;/p&gt;&lt;p&gt;如今，在我当前的项目中，几乎所有东西都是 Kubernetes 对象，甚至是网络交换机，所以我每天都使用它。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;您现在从事或使用的主要 CNCF 项目是什么？  在您的职业生涯中，您最喜欢哪些项目？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我参与最多的主要 CNCF 项目是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/kubernetes"&gt;库伯内斯&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/fluxcd/"&gt;助焊剂CD&lt;/a&gt;&lt;/li&gt;&lt;li&gt; &lt;a href="https://github.com/prometheus"&gt;Prometheus&lt;/a&gt;和&lt;a href="https://github.com/grafana"&gt;Grafana&lt;/a&gt;堆栈&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/cilium"&gt;纤毛&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/rook"&gt;车&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;发现 GitOps 方法真正改变了我的工作生活。  得益于&lt;a href="https://github.com/argoproj/argo-cd"&gt;ArgoCD&lt;/a&gt;和&lt;a href="https://github.com/fluxcd/"&gt;FluxCD 等工具，&lt;/a&gt;我意识到使用 git 部署和跟踪应用程序是多么“容易”。&lt;/p&gt;&lt;p&gt;此外，感谢&lt;a href="https://rook.io/"&gt;Rook-ceph 存储提供商&lt;/a&gt;，我现在能够在几分钟内启动和配置存储集群。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;是什么促使您获得所有 Kubernetes 证书？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;每个认证都有自己的故事。&lt;/p&gt;&lt;ul&gt;&lt;li&gt; KCNA 是我的第一个认证。我在工作面试前拍摄了它，以便对我的 Kubernetes 技能更有信心。&lt;/li&gt;&lt;li&gt; CKA 和 CKAD 是我需要帮助完成我正在从事的项目的两个证书。&lt;/li&gt;&lt;li&gt; CKS 是我作为个人目标而获得的证书。&lt;/li&gt;&lt;li&gt; KCSA 是我的最后一个。 Kubecon 之后，当 Kubetronaut 计划宣布时，我得到了这个，并意识到我只需要再一个。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;这些证书对您的职业生涯有何帮助？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这些认证使我能够练习和学习我日常不使用的技术和工具。准备认证是获得为未来项目做好准备所需教育的一种方式。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;您为想要使用 k8s 的人推荐了哪些其他书籍/网站/课程？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我发现这些在线课程是我的 Kubernetes 学习之旅的一个很好的起点：&lt;/p&gt;&lt;p&gt; – 来自 kodekloud.com 的 CKA 和 CKAD 课程&lt;/p&gt;&lt;p&gt;– Kim Wuestkamp 在 YouTube 上提供的 CKS 在线课程&lt;/p&gt;&lt;p&gt;– 来自 aclodguru/pluralsight 的 CKA/CKAD/CKS 模拟考试&lt;/p&gt;&lt;p&gt;&lt;strong&gt;你在空闲时间做什么？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我所有的空闲时间都和家人一起度过，我 15 个月大的女儿是我目前唯一的兴趣点。我也花时间在我的小屋里，所以我在那里平衡我的工作时间。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;正如您所知，Kubernetes 今年已满 10 岁了，您对 Kubernetes 未来 10 年最兴奋的是什么？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我的魔法球到目前为止还没有答案:)&lt;/p&gt;&lt;p&gt;&lt;strong&gt;您会对刚刚开始 K8s 认证之旅的人说些什么？有什么提示或技巧吗？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;没有比练习、练习、再练习更好的提示和技巧了。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;如今，云原生生态系统的意义远不止 Kubernetes。您是否计划获得 CNCF 的其他云原生认证？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;当然，我的下一个挑战是深入研究 Prometheus 堆栈并足够熟悉它，从而成为&lt;a href="https://www.cncf.io/training/certification/pca/"&gt;Prometheus 认证助理 (PCA)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;您是如何涉足云原生和 Kubernetes 的？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我有 Linux 管理背景，因此从那时起，发展到 Kubernetes 和云原生是合乎逻辑且自然的。&lt;/p&gt;&lt;p&gt;如果您想成为 Kubetronaut，请在&lt;a href="https://www.cncf.io/training/kubestronaut/"&gt;CNCF Kubetronaut&lt;/a&gt;页面上获取更多详细信息。 &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Thu, 04 Jul 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/07/05/kubestronaut-in-orbit-peter-barczi/</guid></item><item><title>【A new App Development WG has now been launched!】</title><link>https://www.cncf.io/blog/2024/07/05/a-new-app-development-wg-has-now-been-launched/</link><description>&lt;p&gt;&lt;em&gt;来自 TAG App Delivery 的 TAG 帖子&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;呼叫所有开发人员！&lt;/strong&gt;我们很高兴地宣布在&lt;a href="https://tag-app-delivery.cncf.io/"&gt;TAG App Delivery&lt;/a&gt;内启动新的&lt;a href="https://tag-app-delivery.cncf.io/wgs/app-development/"&gt;应用程序开发工作组&lt;/a&gt;。该小组致力于弥合开发人员和直接影响您日常工作流程的 CNCF 项目之间的差距。&lt;/p&gt;&lt;p&gt;参与并帮助塑造云原生应用程序开发的未来！该&lt;a href="https://tag-app-delivery.cncf.io/wgs/app-development/charter/charter.md/"&gt;章程&lt;/a&gt;提供了有关工作组目标和方向的更多信息。&lt;/p&gt;&lt;p&gt;该工作组由来自 Red Hat 的 Daniel Oh、来自 Systematic 的 Thomas Vitale 和来自 Diagrid 的 Mauricio Salatino 担任联合主席。利用联合主席和小组成员（例如 Ryan Nowak – Microsoft、Eli Aleyner – Docker、Marcos Lilljedahl – Dagger、Sonali Srivastava – InfraCloud Technologies 和 Yacine Kheddache – Microcks）在开发实践、平台工程和在 CNCF 生态系统中，该小组最初专注于突出直接使开发人员受益的毕业和孵化项目。&lt;/p&gt;&lt;p&gt;除了提高认识之外，工作组还通过对工具进行分类并促进 CNCF 项目和应用程序开发人员之间的协作，积极塑造云原生开发格局。这使得开发人员更容易找到合适的工具并分享最佳实践。该工作组还积极寻找并集成新项目，优先考虑云原生应用程序开发的最佳实践。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;加入运动吧！&lt;/h2&gt;&lt;p&gt;您是一位热衷于改进开发的云原生开发人员吗？我们希望您能成为其中的一部分！&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://tag-app-delivery.cncf.io/wgs/app-development/"&gt;每两周一次的会议&lt;/a&gt;：在每个月的第一个和第三个星期三参加我们的讨论。&lt;/li&gt;&lt;li&gt; &lt;a href="https://docs.google.com/document/d/1L7e2szHX_gpYnC0cs_BTQH6hTNzh8acWzqkzhrPOJds/edit#wg-app-developmen"&gt;CNCF Slack 频道&lt;/a&gt;：通过 CNCF Slack 工作区的 #wg-app-development 频道与我们联系：&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;您打算参加&lt;a href="https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/"&gt;2024 年 KubeCon + CLoudNativeCon 北美&lt;/a&gt;会议吗？不要错过在同期举行的&lt;a href="https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/"&gt;AppDevelopmentCon&lt;/a&gt;活动中与其他开发人员交流的机会！我们还将参加&lt;a href="https://events.linuxfoundation.org/kubecon-cloudnativecon-india/"&gt;KubeCon + CloudNativeCon India 2024&lt;/a&gt; 。让我们聚在一起聊聊云原生开发吧。 &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Thu, 04 Jul 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/07/05/a-new-app-development-wg-has-now-been-launched/</guid></item><item><title>【Building the future of 5G with cloud native tech: insights from Joel and Ashan from Swisscom】</title><link>https://www.cncf.io/blog/2024/07/02/building-the-future-of-5g-with-cloud-native-tech-insights-from-joel-and-ashan-from-swisscom/</link><description>&lt;p&gt;&lt;em&gt;成员帖子，作者：Zenduty 技术作家&lt;a href="https://www.linkedin.com/in/anjali-udasi/"&gt;Anjali Udasi&lt;/a&gt;和 Zenduty 开发者关系工程师&lt;a href="https://www.linkedin.com/in/shubham67/"&gt;Shubham Srivastava&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt; &lt;a href="https://www.linkedin.com/in/joelstudler/"&gt;Joel Studler&lt;/a&gt;和&lt;a href="https://www.linkedin.com/in/ashan-senevirathne/"&gt;Ashan Senevirathne&lt;/a&gt;在巴黎 KubeCon + CloudNativeCon Europe 上发表了题为“&lt;a href="https://www.youtube.com/watch?v=crmTnB6Zwt8"&gt;从 GitOps 到 Kubernetes 资源模型&lt;/a&gt;”的演讲，重点介绍了 Swisscom 在 5G 核心网的自动化之旅，并反映了该公司从电信公司到 TechCo 的演变。&lt;/p&gt;&lt;p&gt;他们的演讲确实引人入胜，激发了我们更多地了解他们在&lt;a href="https://www.linkedin.com/company/swisscom/"&gt;瑞士电信&lt;/a&gt;的经历和旅程的兴趣。&lt;/p&gt;&lt;p&gt;目前领导&lt;a href="https://www.zenduty.com/"&gt;Zenduty&lt;/a&gt;开发者关系的&lt;a href="https://www.linkedin.com/in/shubham67/"&gt;Shubham Srivastava&lt;/a&gt;有幸与这对充满活力的二人组进行了交谈：Joel 是一名 DevOps 工程师和系统架构师，致力于使用云原生技术构建下一代移动网络，而 Ashan 是产品负责人监督移动组织的云原生编排框架的设计、实施和交付。 &lt;/p&gt;&lt;figure class="wp-block-image"&gt;&lt;img alt="利用云原生技术构建 5G 的未来" src="https://lh7-us.googleusercontent.com/docsz/AD_4nXeo2KJO74q6dIqELQJ8BxN1xHNeSu6Goi8Hg1Cx42D_7bGe4r3LEqLKz4BQxyz1He2T9X8VW4QHt740bvUvTo-_9jPnOzrtAndgpRZ2DeHGcF5PaDx-jf6ZMELAMsKUnXmQ4ntV2LqMhEQ66NZFMBuBOZ7S?key=lT7KktZ0GpveM3_XS7mMvg" /&gt;&lt;/figure&gt;&lt;p&gt;在这篇由 Joel 和 Ashan 主演的博客中，我们将揭开电信世界的面纱、现代化的斗争以及这些人所使用的尖端工具。这是您不想错过的对话！&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Shubham&lt;/strong&gt; ：很高兴与你们俩聊天。我们很想知道你们俩的平均一天是什么样的。您在电信公司领导 DevOps 和可靠性工作，错误预算和失败空间都非常紧张。那么幕后情况是怎样的呢？&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Ashan：&lt;/strong&gt;对我们来说，我们的主要重点是为即将到来的 5G 核心技术开发工具功能，我们发现这也适用于业务的其他领域。我们非常重视社区驱动的举措。虽然我们的主要重点是 Kubernetes 环境，但我们还解决从基于遗留的变更管理到云原生方法的过渡，这需要组织思维方式的转变。&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Joel&lt;/strong&gt; ：我的职责包括处理产品的技术接口，并与 Ashan 在架构和工程方面密切合作。我们的日常任务包括主要通过&lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt;操作员构建可靠的工具和自动化。我们优先考虑设计可持续且高效的解决方案，同时优化现有工作负载。测试和部署通常发生在实时或预生产集群上。&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Shubham&lt;/strong&gt; ：Ashan，你提到一半的工作不是迁移流程，而是迁移人们的思维方式。因此，您认为在电信行业中维护和更新可靠性和工具最困难的部分是什么？电信行业通常被视为非常陈旧且拥有大量遗留流程？&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Ashan：&lt;/strong&gt;电信行业最大的障碍是适应更加开放和灵活的网络管理方法。传统上，电信依赖于供应商提供的“黑匣子”软件，这使得可靠地维护和更新工具变得困难。&lt;/p&gt;&lt;p&gt;但是，现在我们通过以下方式解决这个问题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;全新方法：&lt;/strong&gt;从头开始构建新的 5G 核心工具，而不是依赖遗留系统。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;采用 CNCF：&lt;/strong&gt;利用云原生计算基金会 (CNCF) 的工具和概念实现自动化和容器化。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;转变心态：&lt;/strong&gt;从“黑匣子”转变为“白匣子”心态，其中软件是开放且可修改的，以实现更好的控制和可靠性。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;乔尔：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;此外，我们战略性地决定推进 Kubernetes 操作员和 Kubernetes 自动化概念，这对变更管理等许多其他主题产生了重大影响。&lt;/p&gt;&lt;p&gt;例如：你如何实施变革？您如何规划 Kubernetes 资源？您无法控制更改何时发生。运营商只是偶尔推出它。你无法控制它。&lt;/p&gt;&lt;p&gt;这是一个动态系统，引发了我们将在不久的将来大量讨论的一系列问题。这种转变不仅影响技术，还需要组织内部的文化变革。该公司正致力于教育和示范，以推广这种新的工作方式。&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Shubham&lt;/strong&gt; &lt;strong&gt;：&lt;/strong&gt;作为一个如此庞大的组织，每天为数百万人提供关键任务服务，您如何处理向 Kubernetes 的过渡？具体来说，您如何支持 Kubernetes 和其他增强其功能的开源工具？您如何审查来自 CNCF 生态系统或其他地方的开源工具和新技术，以确保它们稳定且适合我们的组织？&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Ashan：&lt;/strong&gt;从 Kubernetes 的角度来看，我们的基础设施使用供应商提供的发行版。对于部署，我们利用&lt;a href="https://fluxcd.io/"&gt;Flux&lt;/a&gt;以及外部秘密运算符、证书管理器和生态系统中的其他几个成熟工具。&lt;/p&gt;&lt;p&gt;对于电信特定的任何事情，我们经常开发我们的解决方案，并在内部提供强有力的支持来开源这些项目。这使我们能够为社区做出贡献，并鼓励其他运营商做出贡献，将电信特定用例集成到 Kubernetes 生态系统中。&lt;/p&gt;&lt;p&gt;在选择工具时，我们优先考虑社区和其他行业参与者的成熟度和支持，而不是新颖性。这确保我们选择可靠、支持良好的工具，而不仅仅是最新趋势。&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Shubham&lt;/strong&gt; ：Joel，最近有哪些工具引起了您的注意，您喜欢使用并密切关注的工具吗？&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Joel&lt;/strong&gt; ：对于开发流程，我对&lt;a href="https://microcks.io/"&gt;Microcks&lt;/a&gt;感兴趣。它是一个模拟框架，其创新在于它在 IDE 和 Kubernetes 集群中的可用性。&lt;/p&gt;&lt;p&gt;我们还在探索测试工具，例如用于&lt;a href="https://www.zenduty.com/blog/chaos-engineering/"&gt;混沌工程的&lt;/a&gt;&lt;a href="https://litmuschaos.io/"&gt;Litmus&lt;/a&gt;和测试包装器&lt;a href="https://testkube.io/"&gt;Testkube&lt;/a&gt; 。&lt;/p&gt;&lt;p&gt;例如，我们正在采用证书管理器，但在具有黑盒应用程序的 Mobile Core 本地环境中，这具有挑战性。我们正在推动供应商确保与 cert-manager 的兼容性，尽管他们倾向于分叉和维护自己的版本。&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Ashan&lt;/strong&gt; ：此外，我们正在研究一个名为&lt;a href="https://nephio.org/"&gt;Nephio&lt;/a&gt;的项目，该项目由 Linux 基金会驱动。它旨在以云原生方式部署和管理 5G 核心。虽然我们不直接使用 Nephio 工具，但我们调整了它的框架和思维。例如，我们正在项目中贡献并利用&lt;a href="https://docs.sdcio.dev/"&gt;SDC（架构驱动配置）&lt;/a&gt;工具。&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Shubham&lt;/strong&gt; ：你们目前面临什么问题并且正在等待工具的出现来解决它吗？就像你们不想构建一些东西来解决一个难题，而你们正在寻找其他人来解决？&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Ashan&lt;/strong&gt; ：我们看到的问题是，或者我们面临的技术挑战是，我们有这些电信应用程序，并且它被视为一种设备。在生命周期空间或部署和配置阶段，我们需要以云原生的方式进行部署。&lt;/p&gt;&lt;p&gt;然后，在设备级别或配置之上，它是通过电信方式完成的。因此，电信标准定义了这个专有接口，您需要在 Kubernetes 层之外进行此配置或应用或定义这些网络服务。为了实现这一目标，您需要在我们需要实现自定义运算符的基础上执行所有这些解决方法，或者找到某些方法将其（在 Kubernetes 层之外所做的工作）更多地引入到内置 Kubernetes 层中。&lt;/p&gt;&lt;p&gt;如果有要求，要求将以 Kubernetes 本机方式完成此配置，这意味着从这些基于&lt;a href="https://en.wikipedia.org/wiki/NETCONF"&gt;NETCONF&lt;/a&gt;的文件转移到 Kubernetes 资源模型中。这种转变将带来显着的好处，特别是考虑到我们目前在 Kubernetes 原生配置方面投入的时间和精力。&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Joel&lt;/strong&gt; ：我们现在最大的痛点是我们无法像真正的云原生公民一样处理我们的应用程序。我们从供应商那里收到的应用程序仍然被视为传统硬件，手动配置类似于将服务器放入机架或设置裸机设备。&lt;/p&gt;&lt;p&gt;这种心态仍然与永久系统的想法联系在一起，比如&lt;a href="https://helm.sh/"&gt;Helm&lt;/a&gt;版本，其中的更改直接在运行的系统上进行。这种方法使我们无法实施蓝绿部署等实践，而且由于涉及手动步骤，即使是简单的重新部署也会变得巨大。&lt;/p&gt;&lt;p&gt;我们相信，引入云原生配置界面将简化生命周期管理、更新和配置。&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Shubham&lt;/strong&gt; &lt;strong&gt;：&lt;/strong&gt;可观察性在你的旅程中必须至关重要，尤其是在你成长的过程中。您的可观察性框架是什么样的？您花费大部分时间监控哪些指标？我们很想了解更多有关 Swisscom 如何处理&lt;a href="https://www.zenduty.com/blog/observability-vs-monitoring/"&gt;监控和可观察性的信息&lt;/a&gt;。&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Joel：&lt;/strong&gt;目前，我们在集群中使用标准的可观测性堆栈&lt;a href="https://prometheus.io/"&gt;Prometheus&lt;/a&gt; ，并使用&lt;a href="https://grafana.com/oss/loki/"&gt;Loki&lt;/a&gt;进行日志记录。对于集中部署，我们使用&lt;a href="https://thanos.io/"&gt;Thanos&lt;/a&gt; 。此外，我们还使用任何 Swisscom 团队都可以使用的内部可观察性即服务堆栈，该堆栈基于标准 Prometheus-Grafana 堆栈构建，可与我们的事件管理工具很好地集成。&lt;/p&gt;&lt;p&gt;我们专注于最小的相关指标子集，以确保服务健康。 5G 核心和应用程序由于其黑盒性质而更加复杂，因此我们与供应商密切合作以确定正确的指标。&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Ashan：&lt;/strong&gt;我们使用基于 HTTP 的请求来监控黄金信号和关键性能指标 (KPI)，例如用户附件、延迟和 DNS 指标。例如，在 5G 核心中，我们将了解连接了多少用户、延迟是多少或 DNS 上的一些指标。&lt;/p&gt;&lt;p&gt;虽然有些指标是标准的，但其他指标则更针对电信公司，需要供应商协作。&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Shubham&lt;/strong&gt; &lt;strong&gt;：&lt;/strong&gt;您刚才提到，您正在花费大量精力来支持组织内的站点可靠性活动。 SRE 的要求可能非常高，因为我们都熟悉它。您的组织有什么故事？您如何管理工作与生活的平衡，尤其是在一个万无一失的电信环境中？&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Ashan&lt;/strong&gt; ：我可以代表瑞士电信的移动部门发言。我们也有重要的 IT 方面，但我们的重点是移动领域。&lt;/p&gt;&lt;p&gt;在我们的 SRE 之旅中，我们了解到并非所有 Google 定义的站点可靠性工程实践都直接适用于电信领域。相反，我们已将重点转向服务可靠性，定义我们的移动组织提供的特定服务。&lt;/p&gt;&lt;p&gt;例如，5G 是基础设施，但服务是移动数据，就像用户浏览 YouTube 一样。我们首先定义这些服务，识别底层资源，并为每项服务建立&lt;a href="https://www.zenduty.com/blog/understanding-sla-slo-and-sli/"&gt;SLA 和 SLO&lt;/a&gt; 。从此，我们在发布工程、可观察性、可靠性和安全性方面实施最佳实践。&lt;/p&gt;&lt;p&gt;在 4G 时代，特别是虚拟机上的演进分组核心，我们在这些原则上投入了大量资金。当我们过渡到 5G 核心时，我们将应用相同的原则，但以云原生的方式简化流程。 SRE 和云原生转换的融合是我们在 5G 领域方法的关键。&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Joel&lt;/strong&gt; ：瑞士电信方法的另一个独特之处是鼓励我们的工程师进行文化转变。我们强调，工程或运营中的每个决策都会对可靠性产生影响。鼓励个人责任和持续改进运营至关重要。此外，拥有支持和鼓励这种心态的管理层至关重要。这种文化转变对我们的组织产生了最重大的影响。&lt;/p&gt;&lt;p&gt;我们已经开始定义 SLO 并维护服务的错误预算，但我们有选择地应用它们，而不是在每个资源级别上应用它们。当迁移到 Kubernetes Operator 时，许多 SRE 概念（例如协调）都由 Kubernetes 层自动化。这种自动化使我们走上了正确的道路，我们很高兴看到它将为组织带来的好处。&lt;/p&gt;&lt;p&gt;我们与乔尔和阿山的对话就到此结束！讨论可观察性、SRE 的要求本质以及这些可靠性英雄用来构建数百万人使用的产品的创新工具总是很有洞察力的。&lt;/p&gt;&lt;p&gt;如果您对可靠性和从停机中恢复的复杂过程着迷，请查看我们的&lt;a href="https://www.zenduty.com/podcast/"&gt;播客 – 顺便可靠&lt;/a&gt;，其中来自 Docker、Amazon、沃尔玛和其他行业领先组织的资深人士分享了他们的经验、挑战和成功故事云原生世界。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;作者：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt; &lt;a href="https://www.linkedin.com/in/anjali-udasi/"&gt;Anjali Udasi&lt;/a&gt; （技术作家）、 &lt;a href="https://www.linkedin.com/in/shubham67/"&gt;Shubham Srivastava&lt;/a&gt; （开发者关系工程师）&lt;/p&gt;&lt;p&gt;&lt;strong&gt;作者头像：&lt;/strong&gt; &lt;/p&gt;&lt;figure class="wp-block-image aligncenter is-resized"&gt;&lt;img alt="安贾利·乌达西爆头" src="https://lh7-us.googleusercontent.com/docsz/AD_4nXdfqSvr7e4iuo-qNdqqH6QCJTjswoWC43ygqopBh3H5hXUKBDAX-gd2QRKV8bqRWgpEnFtUuB7G94eFESlzCAloxrnhSJyOgQZf4estWRRI_4NyZBYpMN3Ew7oTJVrZCELVhkmCt5uciqjuzcfnn1b_0dY?key=lT7KktZ0GpveM3_XS7mMvg" style="width: 220px; height: auto;" /&gt;&lt;figcaption class="wp-element-caption"&gt;&lt;strong&gt;安贾利·乌达西&lt;/strong&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class="wp-block-image aligncenter size-full is-resized"&gt;&lt;img alt="舒巴姆·斯里瓦斯塔瓦爆头" class="wp-image-113537" height="1004" src="https://www.cncf.io/wp-content/uploads/2024/06/Screenshot-2024-06-28-at-07.31.19.jpg" style="width: 218px; height: auto;" width="746" /&gt;&lt;figcaption class="wp-element-caption"&gt;&lt;strong&gt;舒巴姆·斯里瓦斯塔瓦&lt;/strong&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Mon, 01 Jul 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/07/02/building-the-future-of-5g-with-cloud-native-tech-insights-from-joel-and-ashan-from-swisscom/</guid></item><item><title>【How WebAssembly components extend the frontiers of Kubernetes to multi-cloud, edge, and beyond】</title><link>https://www.cncf.io/blog/2024/07/01/how-webassembly-components-extend-the-frontiers-of-kubernetes-to-multi-cloud-edge-and-beyond/</link><description>&lt;p&gt;&lt;em&gt;CNCF 大使兼 Cosmonic 工程总监 Taylor Thomas 担任大使&lt;/em&gt;&lt;/p&gt;&lt;p&gt;WebAssembly (Wasm) 组件已经出现并且已经解锁了新的计算模式。与此同时，CNCF 的&lt;a href="https://wasmcloud.com/"&gt;&lt;strong&gt;wasmCloud&lt;/strong&gt;&lt;/a&gt;为分布式组件提供 Wasm 原生编排——本质上是 WebAssembly 的 Kubernetes。&lt;/p&gt;&lt;p&gt;这对于在大规模生产环境中使用组件来说非常有用，但有一个问题：&lt;em&gt;为什么要更换整个基础设施？&lt;/em&gt;如果您投资了 Kubernetes，那么您已经解决了强大的基础设施管理问题，并且您不希望在节点级别进行更改，更不用说切换您的编排器了。&lt;/p&gt;&lt;p&gt;幸运的是，wasmCloud 以快速、非侵入性、Kubernetes 原生的方式与您现有的云原生设置无缝集成。无需摆弄自定义节点池或配置：Kubernetes 的运算符模式为我们提供了一种将 WebAssembly 视为不仅仅是运行时并充分利用组件功能的方法。凭借组件的灵活性，我们可以在多区域、多集群、多云和边缘环境等传统挑战领域扩展 Kubernetes 的前沿。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt; Kubernetes，遇见组件&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;WebAssembly 组件&lt;/strong&gt;是 Wasm 二进制文件，它们像构建块一样组合在一起，无论它们最初是用什么语言编写的。一项服务可能是用 Go 编写的，另一项是用 Rust 编写的，另一项是用 JavaScript 编写的，但它们都可以通过共享 API 相互通信。与任何 Wasm 二进制文件一样，它们可以在任何操作系统和任何架构上运行。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="多语言图" class="wp-image-113602" height="992" src="https://www.cncf.io/wp-content/uploads/2024/07/compile.jpg" width="2358" /&gt;&lt;/figure&gt;&lt;p&gt;组件是可移植的、小型的（从千字节到个位数兆字节），并且打包为&lt;a href="https://tag-runtime.cncf.io/wgs/wasm/deliverables/wasm-oci-artifact/"&gt;OCI 工件&lt;/a&gt;，因此不可避免地会与容器进行某种类比。但它们也是全新的：根据众所周知的 API 和接口编写的可重用构建块，具有真正的多语言互操作性。&lt;/p&gt;&lt;p&gt;在一个有组件的世界中，软件开发变得更加灵活，平台工程也不再是一种修复错误的活动。开发人员不必担心为他们选择的语言重写某些内容，平台工程师可以灵活地以最适合他们要求的方式构建他们的平台。&lt;/p&gt;&lt;p&gt;组件的可插拔性质是在设计时考虑到云原生世界的。如果您希望最大限度地减少网络边界上的通信，您可以 &lt;a href="https://wasmcloud.com/docs/concepts/linking-components/linking-at-build#overview"&gt;&lt;strong&gt;将&lt;/strong&gt;所有这些服务组合成一个二进制文件&lt;/a&gt;。如果您想要独立扩展（或维护）这些服务，或者服务需要在分布式数据源附近运行，您可以使用 wasmCloud 分布式运行各种组件，它充当 WebAssembly 组件的协调器。 （当然，您也可以在 wasmCloud 上运行构建时组合组件。）&lt;/p&gt;&lt;p&gt;如果组件比作容器，那么 wasmCloud 就类似于 Kubernetes，提供 Wasm 原生编排，以便团队可以在分布式环境中大规模地充分利用组件。该架构具有一些高级相似之处： &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="K8s &amp;amp; wasmCloud 对比图" class="wp-image-113603" height="1264" src="https://www.cncf.io/wp-content/uploads/2024/07/k8s-wasmCloud-v2.jpg" width="2400" /&gt;&lt;/figure&gt;&lt;ul&gt;&lt;li&gt; &lt;strong&gt;wasmCloud 应用程序部署管理器 (wadm)&lt;/strong&gt;是系统的编排层，类似于 Kubernetes 调度程序、控制器管理器和 API 服务器（针对 API 的子集）。&lt;/li&gt;&lt;li&gt; wasmCloud 的&lt;strong&gt;控制接口&lt;/strong&gt;在连接层（称为“网格”）上路由消息，就像 API 服务器充当 Kubernetes 的空中交通控制系统一样。&lt;/li&gt;&lt;li&gt; wasmCloud 的工作负载是组件而不是 Pod 中的容器，但它们类似地打包为&lt;strong&gt;OCI 工件&lt;/strong&gt;（因此可以从相同的注册表中拉取）。&lt;/li&gt;&lt;li&gt;在 wasmCloud 中，WebAssembly 运行时&lt;strong&gt;Wasmtime&lt;/strong&gt;在给定主机环境中运行组件，而 Kubelet 则在 Kubernetes 节点上协调 pod 执行。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;与组件和容器一样，存在一些重要的区别：例如，wasmCloud 使用 CNCF 的&lt;a href="https://nats.io/"&gt;NATS&lt;/a&gt;项目作为“分布式优先”方法的连接层，&lt;em&gt;以及&lt;/em&gt;状态的分布式键值存储。这些特性使得 wasmCloud 非常适合跨云、集群和区域轻松、安全地分配工作负载，而 Kubernetes 的可扩展性意味着可以使用 CRD 和操作员模式轻松地将这些功能引入现有的云原生基础设施。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;多云、边缘及其他&lt;/h2&gt;&lt;p&gt;通过开源&lt;a href="https://github.com/wasmCloud/wasmcloud-operator"&gt;&lt;strong&gt;&lt;code&gt;wasmcloud-operator&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;与 Kubernetes 集成，wasmCloud 在多集群、多云和边缘等历来面临挑战的领域补充和扩展了 Kubernetes。 WebAssembly 二进制文件和 wasmCloud 的大小和效率使得在资源受限的环境中运行分布式应用程序更加实用。同时，wasmCloud 网格提供了一种方法，不仅可以跨不同云或区域连接 Kubernetes 集群，还可以安全、大规模地移动关键任务工作负载。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="部署图" class="wp-image-113605" height="855" src="https://www.cncf.io/wp-content/uploads/2024/07/regions.png" width="2048" /&gt;&lt;/figure&gt;&lt;p&gt;借助这些工具，构建由较小集群组成的“超级集群”变得相当简单，并根据区域或其他标准将工作负载安排到一个或另一个集群。以前极具挑战性的架构模式是 wasmCloud 和 Kubernetes 协同工作的一流用例，无需更改底层基础设施。&lt;/p&gt;&lt;p&gt;使用&lt;code&gt;wasmcloud-operator&lt;/code&gt; ，您可以&lt;em&gt;像在 Kubernetes 中运行其他任何东西一样&lt;/em&gt;运行组件工作负载。此外，您可以直接使用&lt;code&gt;kubectl apply&lt;/code&gt;部署 wasmCloud 应用程序清单，并使用&lt;code&gt;kubectl get applications&lt;/code&gt;检查 wasmCloud 应用程序的状态。&lt;/p&gt;&lt;p&gt;该操作员已在工厂车间投入使用。借助组件，制造分析公司&lt;a href="https://www.youtube.com/watch?v=fQdkNGZqYZA&amp;amp;list=PLj6h78yzYM2MQteKoXxICTWiUdZYEw6RI&amp;amp;index=6"&gt;MachineMetrics&lt;/a&gt;可以直接在边缘设备上处理高频数据，并实时传输到云端——在对容器极具挑战性的环境中运行，并始终与 Kubernetes 集成。 MachineMetrics 的数据平台团队工程师 Jochen Rau 指出：“wasmCloud-operator 使使用我们现有工具的管理变得非常简单。我们将计算工作负载部署在 wasmCloud 上的网格上。我们正在跨越边缘和云之间的界限。”&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;结论&lt;/h2&gt;&lt;p&gt;组件正在引领新的计算浪潮，其中新的互操作性和可重用性模式成为可能。 Kubernetes 的可扩展性意味着想要立即开始利用组件的团队可以在不改变基础设施的情况下实现这一目标，并且可以在策略、可观察性和打包等领域集成现有的云原生工具。&lt;/p&gt;&lt;p&gt;您现在可以在 Kubernetes 上尝试 wasmCloud — 查看&lt;a href="https://wasmcloud.com/docs/deployment/k8s/"&gt;wasmCloud 文档中的演练&lt;/a&gt;。如果您刚刚开始使用 WebAssembly 组件， &lt;a href="https://wasmcloud.com/docs/tour/hello-world"&gt;wasmCloud 快速入门&lt;/a&gt;是一个很好的起点。如果您想了解有关在 Kubernetes 上运行组件的更多信息，或者对生态系统有疑问，&lt;a href="https://slack.wasmcloud.com/"&gt;请加入 wasmCloud Slack&lt;/a&gt; 。 &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Sun, 30 Jun 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/07/01/how-webassembly-components-extend-the-frontiers-of-kubernetes-to-multi-cloud-edge-and-beyond/</guid></item><item><title>【Celebrating 10 years of Kubernetes: the evolution of database operators】</title><link>https://www.cncf.io/blog/2024/06/28/celebrating-10-years-of-kubernetes-the-evolution-of-database-operators/</link><description>&lt;p&gt;&lt;em&gt;会员帖子最初发布于&lt;/em&gt;&lt;/p&gt;&lt;p&gt;自 2014 年 6 月推出以来，Kubernetes 彻底改变了容器编排，改变了应用程序的管理和扩展方式。  Data on Kubernetes Community (DoKC) 创建了一个信息图来庆祝 Kubernetes 十周年，并强调了关键里程碑和社区对管理有状态应用程序的操作员发展的贡献。该信息图是通过 DoKC 几位成员的合作而得以实现的：Sergey Pronin、Robert Hodges、Gabriele Bartolini、Chris Malarky、 &lt;a href="mailto:mark.kember@onebite.co.uk"&gt;Mark Kember&lt;/a&gt; 、 &lt;a href="mailto:paul@constantia.io"&gt;Paul Au&lt;/a&gt;和&lt;a href="mailto:luciano.stabel@percona.com"&gt;Luciano Stabel&lt;/a&gt; 。 &lt;/p&gt;&lt;figure class="wp-block-image"&gt;&lt;img alt="Kubernetes 上数据库的时间表" src="https://lh7-us.googleusercontent.com/docsz/AD_4nXfbOR47Bxm5z351hgi_Yxupi9aInPvIzGW1fjYGI4WBW0EnsUBkHOMPTop90hAEc-QPFynVrKcYC6fxn5v7Ef3R9m4mwcjgKvE2N3_nJJuVquVT2j1Lx2RLT-NGdY0pnPNkQBGq2L1I-F7zEJzrhLk-3q0?key=uCCTZ3Jj3x6COah7duSf3A" /&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;早期和主要发展&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;2014 年&lt;/strong&gt;：Google 推出 Kubernetes 作为开源容器编排平台。最初的1.0版本于2015年7月发布，支持无状态应用程序，但不支持数据库等有状态工作负载。&lt;/li&gt;&lt;li&gt; &lt;strong&gt;2015年&lt;/strong&gt;：Kubernetes 1.1带来了性能升级和新功能。然而，数据和存储管理仍然不发达。&lt;/li&gt;&lt;li&gt; &lt;strong&gt;2016 年&lt;/strong&gt;：CoreOS 引入了 Operator 概念，显着简化了复杂应用程序的部署和管理，包括 Kubernetes 上的数据库。还引入了 StatefulSet，提供稳定的网络标识符和持久存储，这对于数据库管理至关重要。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;数据库运营商和社区创新&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;2017 年&lt;/strong&gt;：第一个数据库 Kubernetes Operator 出现：&lt;ul&gt;&lt;li&gt; &lt;strong&gt;MySQL Operator&lt;/strong&gt; ：由 Oracle 推出。&lt;/li&gt;&lt;li&gt; &lt;strong&gt;MongoDB Operator&lt;/strong&gt; ：由 MongoDB Inc. 开发&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;2018年&lt;/strong&gt;：引入Couchbase和PostgreSQL Operators，增强Couchbase集群的自动化管理并提供对PostgreSQL数据库的支持。&lt;/li&gt;&lt;li&gt; &lt;strong&gt;2019 年&lt;/strong&gt;：ClickHouse 和&lt;strong&gt;Cassandra Operators&lt;/strong&gt;推出。 &lt;a href="https://www.percona.com/software/percona-operators"&gt;Percona&lt;/a&gt;推出了自己的一套 Kubernetes Operators，用于管理 MySQL 和 MongoDB 的 Percona 服务器实例，从而提高 Kubernetes 环境中的数据库管理能力。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;社区成长和协作努力&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;到 2020 年，Data on Kubernetes Community (DoKC) 成立，主要目标是协作和分享在 Kubernetes 上运行数据密集型应用程序的最佳实践。&lt;/p&gt;&lt;p&gt;后来，专注于存储、大数据和应用程序的 Kubernetes 特别兴趣组 (SIG) 成为关键的协作工作组。这些小组提供了宝贵的资源，例如与 CNCF Storage TAG 合作制作的&lt;a href="https://github.com/cncf/tag-storage/blob/master/data-on-kubernetes-whitepaper/data-on-kubernetes-whitepaper-databases.md"&gt;《Kubernetes 数据白皮书》&lt;/a&gt; 。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;采用和影响&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;根据 CNCF 的数据，84% 的组织正在使用或评估 Kubernetes，70% 的组织在生产中在 Kubernetes 上运行有状态应用程序。随着时间的推移，添加了更多的用户和容器，贡献者数量的增加、云原生技术的更多采用以及在 Kubernetes 中处理有状态应用程序的更多用例就证明了这一点。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;展望未来&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在我们庆祝 Kubernetes 十周年之际，在社区协作和技术进步的推动下，数据库的集成不断发展。 Percona Everest 就是一个很好的例子。 Percona Everest 不仅仅是一个数据库 Kubernetes Operator。它代表了 Kubernetes 上数据库的未来。它提供了一种在云中的 Kubernetes 集群上运行任何类型数据库的简单方法，并且完全开源。您想尝试一下吗？请随时访问我们的 GitHub 存储库，如果您觉得它有用，请给我们一个星星。如需任何反馈或意见，您可以在我们&lt;a href="https://forums.percona.com/c/percona-everest/81"&gt;的 Percona Everest 佩科纳论坛&lt;/a&gt;中给我们写信。 &lt;/p&gt;&lt;figure class="wp-block-image"&gt;&lt;img alt="图像" src="https://lh7-us.googleusercontent.com/docsz/AD_4nXcvALf7adIu7bfSqcaMCIVW7Luur9OzAnq61qbzArMZIQalEt-FM3UYWL_4XvokpydY5tLHVqlgPk4QeYpQetjxVLDB0Mz8kGUn-YzZKn6WxHckSshbY3RsL-GzRuIHWxtJmrYwJZh2NUneMN2TXsHq3Os?key=uCCTZ3Jj3x6COah7duSf3A" /&gt;&lt;/figure&gt;&lt;p&gt;有关更多详细信息，请在&lt;a href="https://dok.community/"&gt;Kubernetes 社区数据&lt;/a&gt;中探索 Kubernetes 生态系统的丰富历史和持续发展，并加入关于 Kubernetes 数据库管理未来的对话。 &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Thu, 27 Jun 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/06/28/celebrating-10-years-of-kubernetes-the-evolution-of-database-operators/</guid></item><item><title>【Vitess 20 is now Generally Available】</title><link>https://www.cncf.io/blog/2024/06/27/vitess-20-is-now-generally-available/</link><description>&lt;p&gt;&lt;em&gt;Vitess 维护者团队&lt;/em&gt;&lt;em&gt;在&lt;a href="https://vitess.io/blog/2024-06-27-announcing-vitess-20/"&gt;Vitess 博客&lt;/a&gt;上交叉发布的项目帖子&lt;/em&gt;&lt;/p&gt;&lt;p&gt;我们很高兴地宣布发布&lt;a href="https://github.com/vitessio/vitess/releases/tag/v20.0.0"&gt;Vitess 20&lt;/a&gt;以及 Vitess Kubernetes Operator &lt;a href="https://github.com/planetscale/vitess-operator/releases/tag/v2.13.0"&gt;2.13.0 版本&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;版本 20 侧重于现有功能的可用性和成熟度，并继续建立在先前版本中建立的可扩展性和性能的坚实基础上。我们坚定不移地致力于为您的数据库扩展需求提供强大、可扩展且可靠的解决方案。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt; Vitess 20 的新功能&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;查询兼容性&lt;/strong&gt;：增强的 DML 支持，包括改进的查询兼容性、Vindex 提示以及对各种分片&lt;code&gt;update&lt;/code&gt;和&lt;code&gt;delete&lt;/code&gt;操作的扩展支持。&lt;/li&gt;&lt;li&gt; &lt;strong&gt;VReplication&lt;/strong&gt; ：多租户导入（实验性）。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;在线 DDL&lt;/strong&gt; ：改进了对各种架构更改场景的支持，放弃了对&lt;code&gt;gh-ost&lt;/code&gt;的支持。&lt;/li&gt;&lt;li&gt; &lt;strong&gt;Vitess Operator&lt;/strong&gt; ：自动和计划备份。&lt;/li&gt;&lt;/ul&gt;&lt;h2 class="wp-block-heading"&gt;深入研究&lt;/h2&gt;&lt;p&gt;让我们来看看这个版本的一些主要亮点。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;查询兼容性&lt;/h3&gt;&lt;p&gt;最新的 Vitess 版本通过 Vindex 提示、带限制的分片更新、多表更新和高级删除操作等功能增强了 DML 支持。&lt;/p&gt;&lt;p&gt; Vindex 提示使用户能够影响分片路由：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;SELECT * FROM user USE VINDEX (hash_user_id, secondary_vindex) WHERE user_id = 123; SELECT * FROM order IGNORE VINDEX (range_order_id) WHERE order_date = &amp;#39;2021-01-01&amp;#39;;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在支持有限制的分片更新：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;UPDATE t1 SET t1.foo = &amp;#39;abc&amp;#39;, t1.bar = 23 WHERE t1.baz &amp;gt; 5 LIMIT 1;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;多表更新和多目标更新增强灵活性：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;UPDATE t1 JOIN t2 ON t1.id = t2.id JOIN t3 ON t1.col = t3.col SET t1.baz = &amp;#39;abc&amp;#39;, t1.apa = 23 WHERE t3.foo = 5 AND t2.bar = 7; UPDATE t1 JOIN t2 ON t1.id = t2.id SET t1.foo = &amp;#39;abc&amp;#39;, t2.bar = 23;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;包括带有子查询和多目标支持的高级删除操作：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class=""&gt;DELETE FROM t1 WHERE id IN (SELECT col FROM t2 WHERE foo = 32 AND bar = 43); DELETE t1, t3 FROM t1 JOIN t2 ON t1.id = t2.id JOIN t3 ON t1.col = t3.col;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这些功能为管理分片数据提供了更好的控制和效率。更多详情请参考Vitess和MySQL文档。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt; VReplication：多租户导入（实验性）&lt;/h3&gt;&lt;p&gt;许多网络规模的应用程序使用多租户架构，其中每个租户都有自己的数据库（具有相同的架构）。这种方法存在一些挑战，例如配置和扩展可能数以万计的数据库，以及跨这些数据库统一更新数据库模式。&lt;/p&gt;&lt;p&gt;对于具有为所有租户提供服务的单一逻辑数据库的系统来说，分片 Vitess&lt;a href="https://vitess.io/docs/concepts/keyspace/"&gt;键空间&lt;/a&gt;是一个不错的选择。 Vitess 20 添加了对将数据从此类多租户设置导入到单个 Vitess&lt;a href="https://vitess.io/docs/concepts/keyspace/"&gt;键空间&lt;/a&gt;的支持，并为&lt;a href="https://vitess.io/docs/reference/vreplication/movetables/"&gt;MoveTables 工作流程&lt;/a&gt;提供了新的&lt;a href="https://vitess.io/docs/reference/programs/vtctldclient/vtctldclient_movetables/vtctldclient_movetables_create/"&gt;&lt;code&gt;--shards&lt;/code&gt;和&lt;code&gt;--tenant-id&lt;/code&gt;标志&lt;/a&gt;。您将为每个租户运行一个这样的工作流程，导入的租户由 Vitess 集群提供服务。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;在线DDL&lt;/h3&gt;&lt;p&gt; Vitess 迁移现在支持&lt;code&gt;enum&lt;/code&gt;定义重新排序。 Vitess 选择通过别名（它们的字符串表示形式）而不是通过序数值（内部整数表示形式）来使用&lt;code&gt;enum&lt;/code&gt; 。&lt;/p&gt;&lt;p&gt; Vitess 现在可以通过&lt;code&gt;--prefer-instant-ddl&lt;/code&gt; DDL&lt;a href="https://vitess.io/docs/20.0/user-guides/schema-changes/ddl-strategy-flags/"&gt;策略标志&lt;/a&gt;启用，更好地分析&lt;code&gt;INSTANT&lt;/code&gt; DDL 场景。它能够预测是否可以通过&lt;code&gt;INSTANT&lt;/code&gt;算法完成迁移，如果可以则使用该算法。&lt;/p&gt;&lt;p&gt;它还改进了对范围分区迁移的支持，并在适当的情况下选择通过 Online DDL 使用直接分区查询。&lt;/p&gt;&lt;p&gt; VDiff 现在可以在仍在进行中（即尚未切换）的在线 DDL 工作流程上运行。&lt;/p&gt;&lt;p&gt; 20.0 版本放弃了对 Online DDL 的&lt;code&gt;gh-ost&lt;/code&gt;支持，因为我们继续投资基于 VReplication 的&lt;code&gt;vitess&lt;/code&gt;迁移。 &lt;code&gt;gh-ost&lt;/code&gt;策略仍然被认可；然而：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; Vttablet 二进制文件不再捆绑&lt;code&gt;gh-ost&lt;/code&gt;二进制文件。用户应该提供自己的&lt;code&gt;gh-ost&lt;/code&gt;二进制文件，并提供&lt;code&gt;vttablet --gh-ost-path&lt;/code&gt; 。&lt;/li&gt;&lt;li&gt; Vitess 不再在 CI/端到端测试中测试&lt;code&gt;gh-ost&lt;/code&gt; 。&lt;/li&gt;&lt;/ul&gt;&lt;h3 class="wp-block-heading"&gt; Vitess算子&lt;/h3&gt;&lt;p&gt;自动和计划备份现已作为 v2.13.0 中的实验性功能提供。我们为此功能添加了&lt;a href="https://vitess.io/docs/20.0/user-guides/operating-vitess/backup-and-restore/scheduled-backups/"&gt;新的用户指南&lt;/a&gt;。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt; Vitess 和社区&lt;/h2&gt;&lt;p&gt;作为一个开源项目，Vitess 依靠社区的贡献、见解和反馈而蓬勃发展。您的经验和投入对于塑造 Vitess 的未来非常宝贵。我们鼓励您在&lt;a href="https://github.com/vitessio/vitess"&gt;GitHub&lt;/a&gt;或我们的&lt;a href="http://vitess.io/slack"&gt;Slack 社区&lt;/a&gt;中分享您的故事并提出问题。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;入门&lt;/h2&gt;&lt;p&gt;为了无缝过渡到&lt;a href="https://github.com/vitessio/vitess/releases/tag/v20.0.0"&gt;Vitess 20&lt;/a&gt; ，我们强烈建议您查看&lt;a href="https://github.com/vitessio/vitess/blob/main/changelog/20.0/20.0.0/release_notes.md"&gt;详细的发行说明&lt;/a&gt;。此外，您可以浏览&lt;a href="https://vitess.io/docs/20.0/"&gt;我们的文档&lt;/a&gt;，获取指南、最佳实践和技巧，以充分利用 Vitess 20。无论您是从以前的版本升级还是首次运行 Vitess，我们的资源都旨在为您的每一步提供支持道路。&lt;/p&gt;&lt;p&gt;感谢您对Vitess项目的支持和贡献！&lt;/p&gt;&lt;hr class="wp-block-separator has-alpha-channel-opacity" /&gt;&lt;p&gt;&lt;em&gt;维特斯团队&lt;/em&gt;&lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Wed, 26 Jun 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/06/27/vitess-20-is-now-generally-available/</guid></item><item><title>【Your guide to observability engineering in 2024】</title><link>https://www.cncf.io/blog/2024/06/25/your-guide-to-observability-engineering-in-2024/</link><description>&lt;p&gt;会员帖子最初&lt;em&gt;由 Jake O&amp;#39;Donnell&lt;/em&gt;&lt;em&gt;发布在&lt;a href="https://logz.io/blog/observability-engineering/?utm_medium=referral&amp;amp;utm_source=cncf"&gt;Logz.io 博客&lt;/a&gt;上&lt;/em&gt;&lt;/p&gt;&lt;p&gt;这听起来可能很复杂且令人畏惧，但可观察性很大程度上是为了发现关键系统中未知的未知因素。&lt;/p&gt;&lt;p&gt;可观测性工程的能力可以帮助您做出这些发现。&lt;/p&gt;&lt;p&gt;大多数组织都有某种形式的监控、警报和故障排除，这些在某种程度上可能足够，但在试图确定意外中断的根本原因时却不够。另一方面，可观测性工程提供了一种快速发展流程和工具的方法，以揭示这些问题背后的原因。&lt;/p&gt;&lt;p&gt;使用这种方法，团队可以更有效地查询遥测数据，可视化异常，隔离特性、峰值和瓶颈，然后探索解决它们的可能性。事实上，可观测性工程是专门为解决当今复杂的云环境中这些独特的一次性事件而设计的。&lt;/p&gt;&lt;p&gt;到 2024 年，究竟需要什么才能拥抱可观测性工程，以及如何为您的组织利用其力量？我们很快就会讨论这个问题，但让我们首先设置一些参数，以准确表达我们谈论全堆栈可观察性时的含义。 &lt;/p&gt;&lt;h2 class="wp-block-heading" id="m_-4735072010867219956gmail-definition-and-scope-of-observability"&gt;可观察性的定义和范围&lt;/h2&gt;&lt;p&gt;&lt;a href="https://logz.io/learn/modern-observability-101/?utm_medium=referral&amp;amp;utm_source=cncf" rel="noreferrer noopener" target="_blank"&gt;可观察性&lt;/a&gt;定义为通过检查系统输出来测量系统内部状态的能力。这就是现代组织如何处理发现给定服务的问题、了解其本质并确定最佳解决方案的过程。&lt;/p&gt;&lt;p&gt;人们普遍误解可观察性和监控是同义词，但事实并非如此。可观察性扩展了监控的概念，不仅检测出现问题的时间，还提供必要的数据来了解问题发生的原因和方式——希望在它影响生产系统之前。&lt;/p&gt;&lt;p&gt;可观测性的范围具体包括遥测数据的收集、分析和可视化，包括指标、日志、跟踪和其他信号。这种整体视图使团队能够更有效地诊断问题并确保系统按预期运行。当给定服务中可能有数千个事件需要分析和理解以实现正确、有效的可观察性时，这一点尤其必要。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="m_-4735072010867219956gmail-key-components-of-observability"&gt; 可观察性的关键组成部分&lt;/h2&gt;&lt;p&gt;可观测性的关键组成部分通常被定义为遥测数据的“三大支柱”——日志、指标和跟踪。但这些信号本身并不构成可观察性的组成部分，也不意味着仅通过查看和分析这些数据就可以真正执行可观察性实践。&lt;/p&gt;&lt;p&gt;相反，您可以将这些组件用作整体可观测性数据关联策略的一部分，该策略还必须包括其他关键组件，例如持续分析、业务指标、 &lt;a href="https://logz.io/blog/continuous-observability-cicd-pipelines/?utm_medium=referral&amp;amp;utm_source=cncf" rel="noreferrer noopener" target="_blank"&gt;CI/CD 管道&lt;/a&gt;性能以及与客户的交互和反馈。 &lt;/p&gt;&lt;h2 class="wp-block-heading" id="m_-4735072010867219956gmail-the-role-of-an-observability-engineer"&gt;可观测性工程师的角色&lt;/h2&gt;&lt;p&gt;“可观测性工程师”的角色没有一个统一的定义。在我们的领域，我们看到具有这些角色和职责的客户有很多不同的头衔，其中包括站点可靠性工程师 (SRE)、平台工程师、DevOps 工程师、系统架构师、软件工程师等。&lt;/p&gt;&lt;p&gt;无论如何，可观测性工程师是负责构建、维护、监控和/或观察数据管道，以及处理所涉及的遥测数据的人（请参阅上述可观测性组件）。&lt;/p&gt;&lt;p&gt;可观测性工程师需要知道如何分析和解释系统提供的数据。至少，他们需要知道关于系统状态的正确问题，以及是否需要采取任何措施来纠正出现的任何问题。 &lt;/p&gt;&lt;h2 class="wp-block-heading" id="m_-4735072010867219956gmail-challenges-in-observability-engineering"&gt;可观测性工程的挑战&lt;/h2&gt;&lt;p&gt;可观察性工程师需要在组织中担任多种角色，从管理和理解系统到故障排除和解决任何以云为中心的业务可能出现的一些最关键的问题。&lt;/p&gt;&lt;p&gt;对于组织中的任何可观察性拥护者来说，推销可观察性业务案例可能是一项重大挑战，该组织受到一系列问题的驱动，这些问题包括从总体影响到潜在成本的问题。这可能涉及倡导能够推进可观察性目标的技术，或者倡导能够围绕概念实现更好流程的思维方式转变。&lt;/p&gt;&lt;p&gt;这些领域的具体挑战包括：&lt;/p&gt;&lt;p&gt;数据过载。可观察性的主要挑战之一是管理现代系统生成的海量数据。过滤掉噪音并专注于最相关的信息可能很困难。可观测性工程旨在解决这个问题。&lt;/p&gt;&lt;p&gt;分布式系统的复杂性。随着系统变得更加分布式，理解组件之间的交互变得越来越复杂。确保跨多个服务和平台的端到端可观测性对于可观测性工程师来说可能是一个重大挑战。&lt;/p&gt;&lt;p&gt;工具集成。集成各种可观察性工具并确保它们无缝地协同工作需要仔细的规划和执行。不兼容性和集成问题可能会阻碍许多可观测性解决方案的有效性。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="m_-4735072010867219956gmail-best-practices-in-observability"&gt; 可观察性的最佳实践&lt;/h2&gt;&lt;p&gt;一套经过验证的可观测性工程最佳实践对于任何组织来说都至关重要。其中包括流程、技术以及确保您拥有合适的人员和专业知识以确保成功。&lt;/p&gt;&lt;p&gt;此列表并不详尽，但组织需要考虑以下最佳实践步骤来启动可观察性策略：&lt;/p&gt;&lt;p&gt;定义明确的目标。通过可观察性确定您想要实现的目标。你想从你的实践中得到什么？您将衡量什么以及如何取得成功？定义与您的业务目标相符的具体目标和关键绩效指标 (KPI)。&lt;/p&gt;&lt;p&gt;标准化数据收集。实施标准化方法来收集整个系统的指标、日志和跟踪。这可以使组织保持一致，并使每个参与人员都保持在同一页面上。一致性是有效分析和故障排除的关键。&lt;/p&gt;&lt;p&gt;自动报警。根据预定义阈值设置自动警报，以确保及时发现问题。使用机器学习来减少误报并确定关键警报的优先级。重要的是不要设置太多警报，以免在您的组织中造成警报疲劳 - 专注于您需要警报的事情，而不是其他事情。&lt;/p&gt;&lt;p&gt;投资培训。确保您的团队精通可观察性工具和实践。持续培训和知识共享对于保持有效的可观察性至关重要。可观察性的世界不断变化，因此保持领先趋势至关重要。&lt;/p&gt;&lt;p&gt;定期审查和完善。 &lt;a href="https://logz.io/blog/what-does-observability-mean-for-developers/?utm_medium=referral&amp;amp;utm_source=cncf" rel="noreferrer noopener" target="_blank"&gt;对于开发人员和其他利益相关者来说，可观察性&lt;/a&gt;并不是一次性设置的。定期审查您的可观察性实践，并根据反馈和不断变化的系统要求对其进行完善。 &lt;/p&gt;&lt;h2 class="wp-block-heading" id="m_-4735072010867219956gmail-benefits-of-effective-observability-engineering"&gt;有效可观测性工程的好处&lt;/h2&gt;&lt;p&gt;当您在组织中成功实施可观测性工程时，您将获得无数且持久的好处。它们将直接影响您的利润，不仅帮助您的企业更快地从生产问题中恢复过来，而且有助于从一开始就防止这些问题发生。&lt;/p&gt;&lt;p&gt;改进事件响应。 &lt;a href="https://logz.io/observability-pulse-2024/?utm_medium=referral&amp;amp;utm_source=cncf" rel="noreferrer noopener" target="_blank"&gt;2024 年可观测性脉搏调查报告&lt;/a&gt;显示，82% 的组织认为生产事件的平均解决时间 (MTTR) 超过一个小时。有效的可观察性使团队能够快速识别和诊断问题，减少 MTTR 并最大限度地减少停机时间。&lt;/p&gt;&lt;p&gt;增强的性能。通过监控关键指标和分析系统行为，团队可以识别性能瓶颈并优化系统以提高效率。&lt;/p&gt;&lt;p&gt;主动问题检测。可观察性使团队能够在异常和潜在问题升级为严重问题之前检测到它们，从而形成更加稳定和可靠的系统。&lt;/p&gt;&lt;p&gt;更好的决策。通过全面了解系统性能和行为，组织可以就架构、扩展和资源分配做出更明智的决策。 &lt;/p&gt;&lt;h2 class="wp-block-heading" id="m_-4735072010867219956gmail-future-trends-in-observability-engineering"&gt;可观测性工程的未来趋势&lt;/h2&gt;&lt;p&gt;就可观察性而言，未来已来： &lt;a href="https://logz.io/blog/observability-iq-assistant/?utm_medium=referral&amp;amp;utm_source=cncf" rel="noreferrer noopener" target="_blank"&gt;当今大多数供应商（包括 Logz.io）已将生成式 AI 以及长期专有的 AI 功能集成到其平台中&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;生成式人工智能集成旨在为可观测性工程师提供扩展团队并消除一些任务的机会，以更快地找到问题的根源。这些技术可以帮助在问题发生之前进行预测，并提供智能的修复建议。&lt;/p&gt;&lt;p&gt;可观察性方面需要监测的其他一些未来趋势包括：&lt;/p&gt;&lt;p&gt;统一的可观测平台。将指标、日志和跟踪集成到单个界面中（支持应用程序和 Kubernetes 分析等关键用例）的统一可观察性平台的趋势可能会持续下去。这些平台简化了可观测性过程并提供系统性能的整体视图。&lt;/p&gt;&lt;p&gt;更加注重安全。随着人们对网络安全的日益关注，可观测性工程将越来越多地纳入安全监控。实时检测和响应安全事件将成为可观察性的一个关键方面。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="m_-4735072010867219956gmail-how-Logz.io-can-help-you"&gt; Logz.io 如何帮助您实现可观测性工程目标&lt;/h2&gt;&lt;p&gt;有效的可观测性工程只能通过合作伙伴提供的正确工具和专业知识来实现​​，这些合作伙伴可以帮助扩展您的内部能力。这就是我们试图通过我们的平台在 Logz.io 上提供的服务。&lt;/p&gt;&lt;p&gt; &lt;a href="https://logz.io/platform/?utm_medium=referral&amp;amp;utm_source=cncf" rel="noreferrer noopener" target="_blank"&gt;Logz.io Open 360™&lt;/a&gt;是一个云原生可观测性平台，为您提供工具，以面向未来的方式监控您的关键应用程序和基础设施，对遥测数据中出现的问题进行可视化、故障排除和修复。我们的平台使用直观，设置非常简单，几分钟内即可开始传输您的数据。&lt;/p&gt;&lt;p&gt;借助 Open 360，您将通过一个平台来实现您的可观测性工程目标，该平台可以帮助您：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;通过人工智能驱动的对话术语自动查询和与平台交互，以快速找出问题的根源&lt;/li&gt;&lt;li&gt;使用直观的高性能搜索过滤器快速探索日志记录、指标和跟踪数据，以便您可以通过尖峰、低谷和其他趋势的可视化来加速故障排除并缩短 MTTR&lt;/li&gt;&lt;li&gt;快速深入了解各个交易以诊断根本原因问题&lt;/li&gt;&lt;li&gt;通过关联事件数据的统一平台充分利用开源工具和流程&lt;/li&gt;&lt;li&gt;通过预构建或可定制的监控仪表板，获得根据特定需求和用例定制的环境的完整可视化&lt;/li&gt;&lt;li&gt;过滤掉不相关的遥测数据，以便您可以将信号与噪声分开，并大幅降低数据管理、分析和存储成本&lt;/li&gt;&lt;li&gt;结合 Kubernetes 日志、指标和跟踪进行统一分析、故障排除，并通过按节点或部署组织的相关数据获得自动上下文&lt;/li&gt;&lt;li&gt;通过基于可观察性的传统 APM 替代方案，以及自动服务发现、检测和遥测数据收集，全面了解应用程序运行状况和性能&lt;/li&gt;&lt;li&gt;持续优化数据和成本效率，确保您只关注对您的独特需求最重要的遥测数据并为其付费&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;了解 Logz.io Open 360 如何帮助您实现现代可观测性目标， &lt;a href="https://logz.io/lp/free-trial/?utm_medium=referral&amp;amp;utm_source=cncf" rel="noreferrer noopener" target="_blank"&gt;立即注册免费试用&lt;/a&gt;。 &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Mon, 24 Jun 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/06/25/your-guide-to-observability-engineering-in-2024/</guid></item><item><title>【Why you do not want a visualization of your Infrastructure as Code】</title><link>https://www.cncf.io/blog/2024/06/24/why-you-do-not-want-a-visualization-of-your-infrastructure-as-code/</link><description>&lt;p&gt;&lt;em&gt;最初由 Asif Awan 发布在&lt;a href="https://blog.appcd.com/why-you-do-not-want-a-visualization-of-your-infrastructure-as-code"&gt;appCD 博客&lt;/a&gt;上&lt;/em&gt;&lt;/p&gt;&lt;figure class="wp-block-image"&gt;&lt;img alt="屏幕截图模型的图像" src="https://blog.appcd.com/hs-fs/hubfs/Blog-Images/Vector-1.png?height=630&amp;amp;name=Vector-1.png" /&gt;&lt;/figure&gt;&lt;p&gt;您一直在为您的公司开发一个新的应用程序。它将满足取悦客户所需的业务需求。但是，当您准备好交付代码时，您现在需要设置基础架构。好消息是基础设施即代码 (IaC) 的存在，并有望让您更轻松地编写应用程序平稳运行所需的所有组件：计算集群、网络设置以及所需的数据库和存储桶等平台资源仅举几例。我们的想法是，开发团队在基础设施上花费更少的时间，而花更多的时间来实际构建和交付有助于推动销售的酷东西。&lt;/p&gt;&lt;p&gt; IaC 承诺通过可轻松调整和调整的自动化来帮助我们所有人避免错误。问题在于 IaC 是一个包含要配置的基础设施所有部分的庞大列表；从技术上讲，你无法看到它，因此你必须将所有单独的组件以及它们之间的相互关系保留在你的大脑中。这意味着您需要将您的专业知识扩展到开发以外的基础设施的各个方面，以便您可以对基础设施进行编码，而不会犯过度许可或过度配置资源等错误。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;基础设施即代码挑战&lt;/h2&gt;&lt;p&gt;基础设施即代码确实加速了部署，它绝对比手动配置更快。用户可以更轻松地使用 IaC 交付应用程序或功能。但这并不完美，真正获得所需的云基础设施仍然是一个缓慢的过程。&lt;/p&gt;&lt;p&gt;我认识的大多数开发人员都会使用平台工程师或 DevOps 团队提供的模板。这些“&lt;a href="https://blog.appcd.com/infrastructure-as-code-standards-vs-templates"&gt;黄金模板”&lt;/a&gt;是基础设施团队希望如何配置基础设施的时间点表示。但由于我们都在快速行动，该模板已经被开发人员复制和粘贴了多次并进行了修改。可能缺少最新更新。它当然不涵盖新的安全要求，因此开发团队要么：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;推动不安全、过度配置或不合规的 IaC 或&lt;/li&gt;&lt;li&gt;要求基础设施团队充当帮助台，以便可以交付应用程序。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;开发人员因其开发方面的专业知识而被聘用。虽然许多人都有基础设施方面的经验或曾经使用过基础设施，但当我们要求开发人员编写 IaC 时，我们要求他们也成为基础设施、安全和合规性专家。所发生的事情是大量的猜测、互联网研究和从其他来源复制粘贴，浪费了每个人的时间。&lt;/p&gt;&lt;p&gt;这种猜测是因为我们再次无法看到或触摸我们的云基础设施。相反，我们必须编写 IaC 并测试、测试、测试……&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;架构部署可视化可以提供帮助&lt;/h2&gt;&lt;p&gt;IaC 的可视化可能会有所帮助，但为什么要添加另一个步骤来部署应用程序呢？现在您必须绘制一个拓扑来显示您正在配置的基础设施。或者您可以使用代码基础设施。&lt;/p&gt;&lt;p&gt;代码基础设施使用您的应用程序代码作为您的应用程序所需的基础设施的真实来源，并且需要安全、可靠和高效。借助代码基础架构，您可以节省数小时、数天甚至数周的时间来部署应用程序。&lt;/p&gt;&lt;p&gt;通过代码基础架构，您实际上可以查看应用程序的 IaC。只需连接存储库，选择目标计算服务和策略（例如 AWS 架构良好的框架），您就可以创建 IaC 的可视化。&lt;/p&gt;&lt;p&gt;从那里，您可以通过拖放界面增强它，并实际验证它是否可以工作。例如，假设您尝试连接具有过多权限的资源或不允许的数据库，则将不允许您建立该连接。如果存在任何验证或验证错误，代码基础设施将不允许导出任何 IaC。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;但为什么要这么做呢？&lt;/h2&gt;&lt;p&gt;但你为什么要因为申请发送延迟而欺骗自己呢？为什么你想从你的工作的基础设施部分中消除猜测（你不喜欢）。拖放界面可能会剥夺您真正想要的乏味编码体验。&lt;/p&gt;&lt;p&gt;你为什么要避免这一切？因为如果您可以跳过这个痛苦并从您的应用程序代码生成 IaC，您就可以完成您被雇用要做的工作。这意味着您对您的组织更有价值，因为您可以在您的编码内容与您的组织如何为客户提供服务之间建立直接的联系。&lt;/p&gt;&lt;p&gt;另外，当您生成正确、安全且合规的 IaC 时。对于那些基础设施窥视者来说，你会显得很聪明，而且感觉很好。&lt;/p&gt;&lt;hr class="wp-block-separator has-alpha-channel-opacity" /&gt;&lt;p&gt;尝试&lt;a href="https://www.appcd.com/get-started"&gt;通过代码构建基础设施&lt;/a&gt;。连接存储库，免费获取您的部署架构。您可以在几分钟内生成 IaC，而无需使用 Reddit、Hacker News 或 Google 来提供帮助！ &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Sun, 23 Jun 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/06/24/why-you-do-not-want-a-visualization-of-your-infrastructure-as-code/</guid></item><item><title>【Exploring team dynamics and the role of Internal Developer Platforms】</title><link>https://www.cncf.io/blog/2024/06/21/exploring-team-dynamics-and-the-role-of-internal-developer-platforms/</link><description>&lt;p&gt;&lt;em&gt;会员帖子最初由 Mia-Platform 全栈开发人员 Giovanna Monti 发布在 Mia-Platform 博客上&lt;/em&gt;&lt;/p&gt;&lt;p&gt;进入快节奏的科技公司的世界感觉就像一头扎进复杂的海洋，了解组织结构往往是次要的问题。&lt;/p&gt;&lt;p&gt;我并没有对这个话题进行太多思考，直到在我与公司平台工程协会举行的一次例行会议上这个话题突然出现。在讨论过程中，我意识到我对&lt;strong&gt;团队组织和协作&lt;/strong&gt;知之甚少，但我也开始了解到&lt;strong&gt;内部开发人员平台（通常称为 IDP）的存在&lt;/strong&gt;会对团队的结构和交互方式产生影响，基于其采用阶段。&lt;/p&gt;&lt;p&gt;本文旨在探讨 IT 公司内部的团队组织策略，重点介绍 IDP 的采用如何帮助塑造团队动力以提高效率和合作。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;团队拓扑：了解您的公司结构&lt;/h2&gt;&lt;p&gt;我问自己的第一个问题是，IT 公司的团队组织是否存在模式，因为似乎每个人的做法都不同。 “黄金”的组织结构很难找到。我发现了功能结构、基于产品的结构、矩阵结构等等。但如何才能使这一切合理化，并重点关注 IT 领域呢？&lt;/p&gt;&lt;p&gt;就在那时，我遇到了&lt;a href="https://teamtopologies.com/key-concepts-content/team-interaction-modeling-with-team-topologies" rel="noreferrer noopener" target="_blank"&gt;团队拓扑&lt;/a&gt;，这是一个用于组织和构建软件开发团队的框架，以改善流程、沟通和整体效率。它由 Matthew Skelton 和 Manuel Pais 开发，定义了四种团队类型以及三种可能的合作方式。与我发现的详细模型相比，该模型提供了更高级别的抽象，因为公司中的各种团队都可以重新映射到团队拓扑的四种团队类型。事实上，重新映射是采用此模型的公司的第一个建议步骤，以识别当前结构中可能的痛点并做出明智的改进决策。&lt;/p&gt;&lt;p&gt;在团队拓扑中，团队的主要类型是&lt;strong&gt;流对齐团队&lt;/strong&gt;，它与公司的特定业务领域长期保持一致，无论是产品、服务还是业务的任何持久部分。这与项目团队相反，项目团队只在项目正在进行时存在，并在项目完成后消失。流式团队是最常见的团队类型，一切都围绕着他们：他们遵循“你构建，你运行”的方法，这意味着他们处理工作的各个方面，而无需将工作交给其他团队。&lt;/p&gt;&lt;p&gt;其他三种团队类型都有助于流对齐团队的顺利运作。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;赋能团队&lt;/strong&gt;通过提供专家指导并帮助他们采用新工具和技术，减少认知负荷并增加流对齐团队的流程。他们提供专业知识并检测缺失的功能，而无需自己拥有任何软件组件。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;复杂的子系统团队&lt;/strong&gt;管理需要专门知识和专业知识的工作流程部分，通常是因为它们对于流对齐团队来说太复杂而无法自行处理。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;平台团队&lt;/strong&gt;提供基础服务和工具，使流联盟团队能够更快、更有效地交付工作，而无需重新发明轮子。它们处理基础设施配置并自动执行琐碎任务，从而降低复杂性。&lt;/li&gt;&lt;/ul&gt;&lt;h2 class="wp-block-heading"&gt;平台团队和开发团队&lt;/h2&gt;&lt;p&gt;意识到这一切听起来很熟悉：在讨论内部开发人员平台时，我们经常最终谈论&lt;strong&gt;平台团队&lt;/strong&gt;，它构建和发展一个平台以减少开发人员的认知负荷并增强开发人员体验，以及&lt;strong&gt;开发团队&lt;/strong&gt;，它使用平台轻松执行任务，仅专注于功能实现，并以速度、一致性和质量提供最佳价值。&lt;/p&gt;&lt;p&gt;这里的重新映射很简单：IDP 中的平台团队对应于团队拓扑中的平台团队，而开发团队是流对齐的团队。&lt;/p&gt;&lt;p&gt;当我们谈论 IDP 时，平台团队负责&lt;strong&gt;开发、维护和发展内部开发者平台&lt;/strong&gt;。他们的目标是提供一套工具，组织内的开发团队可以使用这些工具来有效地工作。平台团队在支持组织内高效的软件开发和部署方面发挥着关键作用，提供了坚实的技术基础。&lt;/p&gt;&lt;p&gt;相反，开发团队是&lt;strong&gt;提供端到端功能&lt;/strong&gt;的团队，利用 IDP 提供的功能&lt;strong&gt;仅专注于实施&lt;/strong&gt;，而平台则处理工具和基础设施配置。这使得这些团队能够专注于快速、一致地提供高质量的功能。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;不同的需求需要不同的交互模式&lt;/h2&gt;&lt;p&gt;如上所述，团队拓扑定义了团队交互的三种主要类型：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;协作&lt;/strong&gt;：团队在一段时间内联手实现特定成果，例如处理关键事件，或结合专业知识为新的复杂项目奠定基础。协作努力通常是激烈的，汇集不同的技能和观点来应对复杂的挑战或探索新的想法和解决方案。这通常是暂时的并且专注于特定目标，这意味着一旦达到目标就应该结束。&lt;/li&gt;&lt;li&gt; &lt;strong&gt;X-as-a-Service&lt;/strong&gt; ：一个团队通过自助服务方法向另一个团队提供定义明确的标准化服务。消费团队与服务​​提供团队分离，这意味着他们可以独立工作，无需等待支持或资源。这种交互模型支持持续、稳定的关系，其中一个团队提供特定的能力或资源，其他团队可以使用这些能力或资源来提高他们的生产力并专注于他们的核心任务。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;促进&lt;/strong&gt;：一个团队帮助另一个团队在某一领域进行改进，例如采用新技术或克服特定挑战。这种互动通常是暂时的，并且高度集中于向接收团队传递知识、技能和能力。这可以通过培训、辅导或实际帮助来实现。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我们可以注意到，后两种团队互动的目的是&lt;a href="https://mia-platform.eu/blog/platform-engineering-reduces-cognitive-load/"&gt;减少认知负担&lt;/a&gt;：大多数涉及合作的情况旨在减少流对齐团队肩上的（外部或内在）负担。这也是内部开发者平台的主要目标之一，通常旨在隐藏复杂性以改进 DevX。&lt;/p&gt;&lt;p&gt; IDP 的另一个重要目标是&lt;a href="https://mia-platform.eu/blog/self-serving-developers/"&gt;促进自助服务&lt;/a&gt;，这反映了团队拓扑的一个关键原则，即提倡有限的直接合作，支持异步和独立工作。&lt;/p&gt;&lt;p&gt;那么为什么自助服务如此重要呢？那么，从流对齐团队的角度来看，自主解决问题和访问资源的能力可以带来更高的满意度和更好的整体体验。另一方面，对于平台团队来说，采用可扩展的与开发团队的交互模式至关重要，以避免被服务请求和对实践支持的持续需求淹没。最后，从公司管理的角度来看，&lt;strong&gt;自助服务降低了组织成本和额外资源分配的需要&lt;/strong&gt;。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt; IDP 采用阶段及其如何塑造团队互动&lt;/h2&gt;&lt;p&gt;在下面的段落中，我们将尝试将迄今为止所学到的知识付诸实践，了解如何利用&lt;strong&gt;不同的交互模式&lt;/strong&gt;来&lt;strong&gt;成功采用 IDP&lt;/strong&gt; 。&lt;/p&gt;&lt;p&gt;采用内部开发人员平台不是一次性事件，而是一个渐进的过程，它将深刻影响团队的互动和协作方式。 IDP 的成功取决于有多少团队采用它，因此平台团队必须确保流联盟团队能够充分利用该平台并了解将其集成到其工作流程中的优势。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;初始采用阶段&lt;/h3&gt;&lt;p&gt;在平台采用的早期阶段，平台团队应主要关注让开发团队将平台集成到他们的日常工作中。&lt;strong&gt;变更的驱动者是平台团队，但受影响的代码库的实际所有者是开发团队&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;一般来说，流对齐团队已经拥有自己的工作流程，并且没有动力去改变以采用平台的功能。这是因为所需的努力可能很高，而且他们不会立即获得切实的好处，因此他们会优先考虑迁移到平台而不是其他更紧急的活动。&lt;/p&gt;&lt;p&gt;在此阶段，平台团队必须确保有效地采用。理论上，向开发团队提交票证是一种可扩展且易于管理的方法，但它可能会失败，因为开发团队无法确定任务的优先级，或者难以理解如何采用新平台。&lt;/p&gt;&lt;p&gt;这就是为什么在这个阶段，密切合作通常是首选：&lt;strong&gt;平台团队可能经常承担促进角色，帮助流一致的团队了解如何使用正在引入的新工具和服务&lt;/strong&gt;。这可能包括频繁的直接支持，以确保顺利过渡到新平台，甚至临时将平台团队的一名或多名成员嵌入开发团队以简化过渡。&lt;/p&gt;&lt;p&gt;这种实践方法可确保开发团队能够快速克服最初的障碍并开始看到该平台的优势。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;扩展阶段&lt;/h3&gt;&lt;p&gt;随着 IDP 开始稳定并且其采用扩展到更多团队，平台团队的重点转向增强其功能并容纳更多用户。与前一阶段的不同之处在于，交互围绕开发团队的需求展开：他们有一个要达到的目标，并且他们正在利用平台的功能来实现这一目标，而在第一阶段，变革的驱动力是平台团队。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;随着 IDP 更加成熟，交互模型通常会转向 X 即服务方法&lt;/strong&gt;。平台团队提供开发团队可以独立使用的标准化服务。这减少了对持续直接交互的需求，并允许流一致的团队毫不延迟地访问他们所需的工具和基础设施。&lt;/p&gt;&lt;p&gt;虽然主要的交互模式是自助服务，但当引入新功能或重大升级时，可能仍然需要便利。平台团队可以提供指导和支持，以帮助流联盟团队充分利用新功能。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;平台演进阶段&lt;/h3&gt;&lt;p&gt;在 IDP 采用的最后阶段，该平台已完全集成到组织的工作流程中，并且其使用无处不在。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;交互模式的特点是自主性增加和偶尔的创新协作&lt;/strong&gt;：流式团队高度自治，依赖于平台团队提供的标准化服务（X-as-a-Service 协作），平台团队仍然可以承担需要时发挥促进作用。&lt;/p&gt;&lt;p&gt;有时，开发团队可能会建议将新功能集成到平台中。这与第一个采用阶段相反，因为开发团队推动变革，但平台团队拥有代码库。在这种情况下，开发团队可以向平台团队提交票证或直接为平台添加新功能和改进做出贡献。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;底线&lt;/h2&gt;&lt;p&gt;据我们所知，团队拓扑和内部开发人员平台都倡导自助服务和减少认知负荷的原则，引导组织走向更高效和自主的工作流程。&lt;/p&gt;&lt;p&gt;团队拓扑可以帮助对不同的团队类型进行分类并定义清晰的交互模式，提供结构化的方法来提高团队动力并减少不必要的复杂性。&lt;/p&gt;&lt;p&gt;同样，采用 IDP 可以让开发团队独立访问工具和资源，而无需平台团队的持续干预，从而促进自助服务。这种独立性对于最大限度地减少认知负荷至关重要，使团队能够专注于快速有效地交付高质量的功能。&lt;/p&gt;&lt;p&gt;在 IDP 采用的各个渐进阶段（从最初的密切协作到广泛的自主使用），&lt;strong&gt;重点仍然是增强团队能力并简化其工作流程&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;通过将团队拓扑策略与 IDP 的采用相结合，组织可以创建一个协同环境，在该环境中，两个框架可以加强彼此的目标。这种一致性培育了一种高效、创新和持续改进的文化，最终推动了成功的软件开发实践。 &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Thu, 20 Jun 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/06/21/exploring-team-dynamics-and-the-role-of-internal-developer-platforms/</guid></item><item><title>【Kubestronaut in Orbit: Zhilong Wang】</title><link>https://www.cncf.io/blog/2024/06/20/kubestronaut-in-orbit-zhilong-wang/</link><description>&lt;h2 class="wp-block-heading"&gt;认识王志龙&lt;/h2&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="社交卡" class="wp-image-113083" height="866" src="https://www.cncf.io/wp-content/uploads/2024/06/Kubestronaut-in-Orbit-2-1.jpg" width="1650" /&gt;&lt;/figure&gt;&lt;p&gt;王志龙是中国首批宇航员之一。作为云原生技术专家，拥有超过10年的互联网开发和架构一线经验，专注于Service Mesh、Serverless和云平台。精通微服务架构和性能优化。他还为 https://landscape.cncf.io/ 上列出的多个开源项目的开发做出了贡献，包括 Kubernetes、Istio、Envoy、Mosn 和 Layotto。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;您什么时候开始使用 Kubernetes？您的第一个项目是什么？&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;我从 2016 年开始使用 Kubernetes。我的第一个项目涉及将传统的单体应用程序迁移到微服务架构，并将它们从 Mesos 和 Marathon 部署到 Kubernetes。这显着提高了并行开发效率、用户体验和自动化管理能力，同时增强了应用程序的灵活性和可扩展性。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;您目前从事或使用的主要 CNCF 项目是什么？您认为哪些项目在您的职业生涯中最有价值？&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;我目前正在开发和使用的 CNCF 项目包括&lt;a href="https://github.com/Kubernetes"&gt;Kubernetes&lt;/a&gt; 、 &lt;a href="https://github.com/istio"&gt;Istio&lt;/a&gt; 、 &lt;a href="https://github.com/Envoy"&gt;Envoy&lt;/a&gt; 、 &lt;a href="https://github.com/Mosn"&gt;Mosn&lt;/a&gt; 、 &lt;a href="https://github.com/Dapr"&gt;Dapr&lt;/a&gt; 、 &lt;a href="https://github.com/Layotto"&gt;Layotto&lt;/a&gt;和&lt;a href="https://github.com/Containerd"&gt;Containerd&lt;/a&gt; 。在我的职业生涯中，我最喜欢的项目是 Kubernetes，因为它从根本上改变了我们管理和部署应用程序的方式，充当云时代的“操作系统”。&lt;/p&gt;&lt;p&gt;除了 Kubernetes 之外，我还经常使用 Service Mesh 控制平面 Istio、Service Mesh 数据平面 Envoy 和 Mosn，以及分布式运行时框架 Dapr 和 Layotto。 Service Mesh与分布式运行时的结合有助于在多语言、多协议的分布式系统中提供灵活的通信和流量控制，并简化第三方组件的集成。事实证明，这在商业应用中非常有用。&lt;/p&gt;&lt;p&gt;我还必须提到 Containerd 项目。它是一个工业级容器运行时，提供更加开放和稳定的容器运行时基础设施。特别是containerd-shim-v2让Containerd能够实现更好的模块化设计，提供更高的可靠性和灵活性。它还可以更轻松地集成和支持不同的自定义容器运行时，从而带来安全容器、加速容器和特定无服务器容器等创新，从而使 Kubernetes 能够支持更广泛的场景。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;是什么促使您获得所有 Kubernetes 认证？&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;这是一个有趣的故事。我第一次获得&lt;a href="https://www.cncf.io/training/certification/cka/"&gt;CKA认证&lt;/a&gt;是在2018年，当时我在腾讯工作。当年我的导师给了我一张 LinuxCon + ContainerCon + CloudOpen China 的门票，并且在 CNCF 展位上，我获得了免费认证考试的机会。我把认证考试当成一次学习经历，后来把我的认证历程分享到了腾讯内网。另外我的CKA认证也帮助腾讯云申请了&lt;a href="https://www.cncf.io/training/certification/kcsp/"&gt;KCSP&lt;/a&gt; 。&lt;/p&gt;&lt;p&gt;认证和学习的过程让我认识到理论与实践相结合的重要性。有些概念不常用，也很难理解，系统地学习它们可以帮助我更好地掌握知识。因此，我申请了&lt;a href="https://www.cncf.io/training/certification/ckad/"&gt;CKAD&lt;/a&gt;认证，以提高设计、构建和部署云原生应用程序的技能。后来，我追求了&lt;a href="https://www.cncf.io/training/certification/cks/"&gt;CKS&lt;/a&gt;认证，以证明我在确保容器化应用程序和Kubernetes平台在开发、部署和运营过程中的安全性方面的能力。认证确实可以帮助我增强知识和技能，避免工作中的陷阱并验证我的熟练程度。&lt;/p&gt;&lt;p&gt;最后， &lt;a href="https://www.cncf.io/training/certification/KCNA/"&gt;KCNA&lt;/a&gt;认证提供了 Kubernetes 和云原生概念的全面知识，使个人具备有效分析和解决问题的能力。 &lt;a href="https://www.cncf.io/training/certification/kcsa/"&gt;KCSA&lt;/a&gt;认证确保持有者有能力对Kubernetes集群进行安全配置基线并满足合规性要求。这些认证是对Kubernetes技术栈和企业级安全生产环境的重要补充。为了确保系统和全面的理解，我也追求并完成了这两项认证。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;这些认证对您的职业生涯有何帮助？&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;这些认证极大地将我的职业生涯提升到了一个新的水平。他们不仅提高了我的专业技能，也开阔了我的视野和信心。当工作中遇到挑战和问题时，我能够创新、有效地解决它们。&lt;/p&gt;&lt;p&gt;例如，我之前在阿里巴巴工作时，利用自己的云原生专业知识，设计了一个基于Service Mesh的去中心化网关解决方案，解决高德地图中心网关的性能、资源利用率、可扩展性、稳定性等问题。此外，结合阿里巴巴集团的云原生技术生态和研发部门，提出了“统一控制平面，多样化数据平面”的Service Mesh架构，并与阿里云和蚂蚁集团合作，使用Mosn on Envoy实现了数据平面解决方案，平衡开发效率和运行时性能。&lt;/p&gt;&lt;p&gt;同样，在我目前在京东的职位上，我在使用 Service Mesh 和 Serverless 时，面临着与 Kubernetes 多集群管理和计算密集型和数据密集型应用（例如搜索、推荐和广告）中的高可用性相关的众多挑战。得益于认证中全面的云原生知识，我设计并实现了多模式数据平面（sidecar模式、业务容器内进程内模式、节点模式）和多主控制平面Service Mesh架构。对于Serverless，我开发了一个由业务集群外的高可用Kubernetes主集群和类似于边缘计算的轻量级节点（Docker中的Docker（Containerd）和Container中的Kubernetes Node）组成的解决方案。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;对于那些想要更多地了解 Kubernetes 的人，您会推荐哪些其他书籍/网站/课程？&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;图书：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; “Kubernetes 启动并运行”&lt;/li&gt;&lt;li&gt; “Kubernetes 在行动”&lt;/li&gt;&lt;li&gt; 《Kubernetes 最佳实践》&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;网站：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; Kubernetes 官方文档&lt;/li&gt;&lt;li&gt;CNCF官方网站&lt;/li&gt;&lt;li&gt;GitHub Kubernetes 代码（代码永远不会说谎，注释有时会说谎。有时代码是最好的文档）&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;培训班：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; Coursera 上的 Kubernetes 相关课程&lt;/li&gt;&lt;li&gt;Linux 基础课程&lt;/li&gt;&lt;li&gt;Udemy 上的 Kubernetes 掌握&lt;/li&gt;&lt;/ul&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;你业余时间做什么（爱好/兴趣）？&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;我喜欢阅读技术书籍、参与开源社区活动、探索和实践新技术。此外，我喜欢旅行和摄影，并在社交网络上分享有趣的照片和视频。有时，我也会通过滑雪、冲浪、攀岩等极限运动来挑战自己，以保持身体健康。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt; &lt;strong&gt;Kubernetes 现在已经 10 岁了。您对 Kubernetes 未来 10 年有何期望？&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;希望Kubernetes在自动化和可用性方面取得更多突破，让其更加易用，覆盖更广泛的用户群，推动云原生技术在各行业、各领域的应用。此外，我也期待它在无服务器、边缘计算、物联网等领域的应用和发展。具体来说，无服务器被认为是继 Kubernetes 和 Service Mesh 之后的第三大云原生创新，进一步细化和标准化了微服务和分布式系统的可扩展性、灵活性和弹性。然而，Serverless 的许多方面，例如标准化和性能，仍然需要改进。因此，我热切期待 Kubernetes 加强对 Serverless 的支持，并见证这一领域的重大突破。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;您想对刚刚开始 Kubernetes 认证之旅的人们说些什么？有什么提示或技巧吗？&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;书本上的理论知识终究是肤浅的；你必须练习它才能彻底理解它。因此，我建议初学者进行实践，将理论与实际项目相结合。&lt;/p&gt;&lt;p&gt;利用社区资源，参与技术交流和讨论，为开源项目做出贡献。从源码角度回顾知识可以加深理解。&lt;/p&gt;&lt;p&gt; “追求卓越，成功就会随之而来。”认证就是结果；系统的学习就是一个过程。对于我们的成长来说，学习的过程远比结果重要。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;如今，云原生生态系统已经超越了 Kubernetes。您是否计划获得其他 CNCF 云原生认证？&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;是的，我计划参加更多的CNCF认证，比如&lt;a href="https://www.cncf.io/training/certification/pca/"&gt;PCA&lt;/a&gt;和&lt;a href="https://www.cncf.io/training/certification/ica/"&gt;ICA&lt;/a&gt; ，以进一步增强我在云原生监控和Service Mesh方面的能力。这将帮助我更好地利用和利用 Kubernetes 和云原生技术。我希望看到 CNCF 提供更多认证，例如无服务器认证。如果需要，我愿意参与课程设计并教授这些课程，以帮助需要这些知识和经验的社区成员。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;您如何参与和使用云原生和 Kubernetes 技术？&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;除了工作之外，我还积极为开源项目做出贡献。目前参与 Kubernetes、Istio、Envoy、Mosn、Layotto 等项目的开发。我是 Kubernetes 成员、Layotto Wasm 维护者，也是 Mosn 和 Envoy 的贡献者（更多详细信息请参阅&lt;a href="https://github.com/rayowang"&gt;GitHub&lt;/a&gt;页面）。&lt;/p&gt;&lt;p&gt;此外，我还参加行业会议并发表演讲并分享我的经验。最近，我在&lt;a href="https://archsummit.infoq.cn/2023/shenzhen/presentation/5326"&gt;全球架构峰会&lt;/a&gt;上发表了一场深入探讨服务网格的会议，并在&lt;a href="https://qcon.infoq.cn/202309/beijing/presentation/5447"&gt;全球软件开发大会&lt;/a&gt;上分享了创新的云原生无服务器主题。&lt;/p&gt;&lt;p&gt;在我的工作中，我管理托管在私有云和公共云上的多个 Kubernetes 集群，创新地开发和使用 Service Mesh 和 Serverless 技术。我还积极推广这些技术，鼓励团队采用云原生开发和运营实践。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;&lt;strong&gt;您还有什么想在这里分享的吗？&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;我想强调的是，云原生技术不仅仅是一个工具，更是一个工具。它代表了一种新的思维方式。云原生领域正在快速发展，因此保持持续学习和开放的心态至关重要。我鼓励大家积极参与社区活动和开源项目，与其他从业者交流，及时了解最新的行业趋势和最佳实践。&lt;/p&gt;&lt;p&gt;作为一名 CNCF Kubetronaut，我将继续为开源项目做出贡献并分享我的知识，成为榜样。我也会进一步加深对云原生技术的学习和应用。希望更多的人加入我们，继续共同推动科技的发展。&lt;/p&gt;&lt;p&gt;希望以上分享对大家有所帮助，感谢CNCF给我这个分享的机会！如果您有任何其他问题，请随时通过 rayo.wangzl@gmail.com 与我联系。让我们一起学习，一起超越自己。 &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Wed, 19 Jun 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/06/20/kubestronaut-in-orbit-zhilong-wang/</guid></item></channel></rss>