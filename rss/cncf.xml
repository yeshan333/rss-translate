<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>CNCF - 博客</title><link>https://www.cncf.io/blog/</link><description>CNCF - 博客 - 由 RSSHub 用爱制作(https://github.com/DIYgod/RSSHub)</description><lastBuildDate>Sun, 16 Jun 2024 05:33:49 GMT</lastBuildDate><generator>rfeed v1.1.1</generator><docs>https://github.com/svpino/rfeed/blob/master/README.md</docs><item><title>【Kubernetes is ten years old!】Kubernetes 十岁了！</title><link>https://www.cncf.io/blog/2024/06/07/kubernetes-is-ten-years-old/</link><description>&lt;p&gt;2014 年 6 月 6 日，Joe Beda &lt;a href="https://github.com/kubernetes/kubernetes/commit/2c4b3a562ce34cddc3f8218a2c4d11c7310e6d56"&gt;首次向 Kubernetes 做出了承诺&lt;/a&gt;，突然一场运动诞生了。过去十年，Kubernetes 改变了世界。 &lt;/p&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p&gt; “我认为我们中没有人期望 Kubernetes 会变成现在这样。”&lt;/p&gt;&lt;cite&gt;乔·贝达&lt;/cite&gt;&lt;/blockquote&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p&gt; “有这个啊哈！当他们看到自己的工作负载正在运行的那一刻，他们就与之建立了联系。这只花了一两分钟。我们来自一个需要数小时或数天才能获得这些的世界。”&lt;/p&gt; &lt;cite&gt;Lachlan Evenson（微软首席项目经理）&lt;/cite&gt; &lt;/blockquote&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p&gt; “围绕 Kubernetes 发生了一场运动。这不仅仅是技术。这是它周围的社区。”&lt;/p&gt; &lt;cite&gt;Bassam Tabbara（Upbound 首席执行官/创始人）&lt;/cite&gt; &lt;/blockquote&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p&gt; “我认为我从未在任何其他空间看到过类似的事情。”&lt;/p&gt;&lt;cite&gt;米歇尔·达纳尼 (Michelle Dhanani)（费米扬科技公司创始成员）&lt;/cite&gt; &lt;/blockquote&gt;&lt;blockquote class="wp-block-quote is-style-smaller-quote is-layout-flow wp-block-quote-is-layout-flow"&gt;&lt;p&gt; “今天的 Kubernetes 实际上已经无处不在了。”&lt;/p&gt; &lt;cite&gt;Tim Hockin（Google Cloud 杰出软件工程师）&lt;/cite&gt;&lt;/blockquote&gt;&lt;p&gt; Kubernetes 10 岁生日快乐！请&lt;a href="https://youtu.be/nAT9U1vJ8x0"&gt;观看整个视频，&lt;/a&gt;与我们一起庆祝！&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;&lt;strong&gt;我们是如何到达这里的&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;2016年3月10日， &lt;a href="https://www.cncf.io/announcements/2016/03/10/cloud-native-computing-foundation-accepts-kubernetes-as-first-hosted-project-technical-oversight-committee-elected/"&gt;Kubernetes加入CNCF&lt;/a&gt; 。 &lt;a href="https://www.cncf.io/announcements/2016/05/09/cloud-native-computing-foundation-accepts-prometheus-as-second-hosted-project/"&gt;几个月后，&lt;/a&gt;普罗米修斯加入了。&lt;/p&gt;&lt;p&gt; Kubernetes 作为 CNCF 的一部分&lt;a href="https://www.cncf.io/blog/2016/07/21/happy-1st-birthday-kubernetes/"&gt;庆祝了它的一周年&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;第二年，Kubernetes&lt;a href="https://www.cncf.io/blog/2017/07/27/happy-second-birthday-kubernetes-retrospective/"&gt;庆祝了两周岁&lt;/a&gt;，Joe Beda&lt;a href="https://www.cncf.io/blog/2017/11/07/joe-beda-explains-inner-workings-kubernetes/"&gt;解释了它的内部运作方式&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;到 2018 年，可以肯定地说 Kubernetes 已经进入（龙）主流，嗯， &lt;a href="https://www.cncf.io/blog/2018/02/22/winter-not-delayed-hbo-uses-kubernetes-bring-us-game-thrones/"&gt;至少对于权力的游戏粉丝来说是主流&lt;/a&gt;！同年晚些时候，Kubernetes 成为&lt;a href="https://www.forbes.com/sites/janakirammsv/2018/03/07/kubernetes-becomes-the-first-project-to-graduate-from-the-cloud-native-computing-foundation/?sh=54df75854b8f"&gt;第一个从 CNCF 毕业的项目&lt;/a&gt;，其次是 Prometheus。&lt;a href="https://www.cncf.io/blog/2018/08/07/helm-the-package-manager-for-kubernetes/"&gt;包管理器 Helm&lt;/a&gt;也加入了进来。&lt;/p&gt;&lt;p&gt;在接下来的几年里，Kubernetes 的采用继续保持势头，到 2020 年，对&lt;a href="https://www.cncf.io/blog/2020/12/14/kubernetes-101-an-introduction/"&gt;Kubernetes 101 教程的&lt;/a&gt;需求非常强劲。到 2022 年，96% 的受访组织表示&lt;a href="https://www.cncf.io/announcements/2022/02/10/cncf-sees-record-kubernetes-and-container-adoption-in-2021-cloud-native-survey/"&gt;正在使用或评估 Kubernetes&lt;/a&gt; 。&lt;/p&gt;&lt;p&gt;到 2023 年，可以肯定地说 Kubernetes 已成为所有对话的一部分，无论是关于安全性、平台工程、可观察性还是存储。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;&lt;strong&gt;从数字来看&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;自从加入 CNCF 以来，Kubernetes 体验到了云原生协作的力量：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; 74、680 多个贡献者&lt;/li&gt;&lt;li&gt;314、188+ 代码提交&lt;/li&gt;&lt;li&gt;263、906+ 拉取请求&lt;/li&gt;&lt;li&gt;340万+贡献&lt;/li&gt;&lt;li&gt;7, 812+ 贡献公司&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如今，Kubernetes 已成为拥有全球社区的最大开源项目之一。但再次强调，不要只相信我们的话。&lt;a href="https://youtu.be/nAT9U1vJ8x0"&gt;观看视频&lt;/a&gt;或&lt;a href="https://www.cncf.io/kubertenes/"&gt;查找您附近的现场活动&lt;/a&gt;- 它们将持续到六月底。 &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Thu, 06 Jun 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/06/07/kubernetes-is-ten-years-old/</guid></item><item><title>【Kubestronaut in Orbit: Khushboo Khatter】在轨道上的 Kubetronaut：Khushboo Khatter</title><link>https://www.cncf.io/blog/2024/06/07/kubestronaut-in-orbit-khushboo-khatter/</link><description>&lt;h2 class="wp-block-heading"&gt;了解库什布&lt;/h2&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="Khushboo Khatter 谈 Kubestronaut 在轨道上的情况" class="wp-image-112088" height="1024" src="https://www.cncf.io/wp-content/uploads/2024/06/Kubestronaut-in-Orbit-1-1.jpg" width="1950" /&gt;&lt;/figure&gt;&lt;p&gt; Khushboo Khatter 是一位 IT 专业人士，拥有超过 8 年的经验，其中 6 年从事 Kubernetes 工作。她对云技术充满热情，并喜欢探索尖端的 CNCF 工具。她对 Kubernetes 有特殊的热情，并且喜欢深入研究它的复杂性。&lt;/p&gt;&lt;p&gt;如果您想成为像 Khushboo 一样的 Kubetronaut，请在&lt;a href="https://www.cncf.io/training/kubestronaut/"&gt;CNCF Kubetronaut&lt;/a&gt;页面上获取更多详细信息。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;您什么时候开始使用 kubernetes——您的第一个项目是什么？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt; 2018 年，我踏上了 Kubernetes 之旅，渴望探索它在云原生计算方面的潜力。我的早期项目之一涉及使用 Kubernetes 将单体应用程序迁移到微服务。&lt;/p&gt;&lt;p&gt;从头开始安装 Kubernetes 是一个挑战，但它教会了我在恢复能力和解决问题方面的宝贵经验。&lt;/p&gt;&lt;p&gt;随着我们的进步，事实证明 Kubernetes 在编排容器化工作负载和优化资源利用率方面不可或缺。这个项目点燃了我对云原生技术的热情，为该领域的进一步探索和创新奠定了基础。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;您现在从事或使用的主要 CNCF 项目是什么？  在您的职业生涯中，您最喜欢哪些项目？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我工作或经常使用的主要 CNCF 项目包括 Kubernetes、 &lt;a href="https://github.com/prometheus"&gt;Prometheus&lt;/a&gt; 、 &lt;a href="https://github.com/istio"&gt;Istio&lt;/a&gt; 、 &lt;a href="https://github.com/helm/helm"&gt;Helm&lt;/a&gt; 、 &lt;a href="https://github.com/fluent/fluentd"&gt;Fluentd&lt;/a&gt;和&lt;a href="https://github.com/open-telemetry"&gt;OpenTelemetry&lt;/a&gt; 。这些项目在我的职业生涯中发挥了至关重要的作用，使我能够构建可扩展且有弹性的应用程序。其中，Kubernetes 脱颖而出，最具影响力，它彻底改变了我们部署和管理容器化应用程序的方式。&lt;/p&gt;&lt;p&gt;此外，Prometheus、Istio、Helm、Fluentd 和 OpenTelemetry 通过提供高级监控、网络、包管理、日志记录和可观察性解决方案进一步增强了我的能力。这些项目共同构成了云原生基础设施和应用程序的支柱，使组织能够采用现代软件实践并提供创新的解决方案。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;是什么促使您获得所有 Kubernetes 证书？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在职业抱负和个人成长的推动下，我追求了 Kubernetes 认证。认识到 Kubernetes 在现代技术中至关重要，我寻求加深我的专业知识并验证我在云原生技术方面的技能。获得这些认证不仅增强了我的职业前景，而且激发了我不断学习和掌握变革性技术的热情。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;这些证书对您的职业生涯有何帮助？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt; Kubernetes 认证验证了我的专业知识、开辟了新的工作机会并扩展了我的技能组合，极大地促进了我的职业生涯。他们提高了我解决问题的能力，并将我与充满活力的专业网络联系起来。总的来说，它们对推动我在云原生技术领域的职业生涯发挥了重要作用。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;您为想要使用 k8s 的人推荐了哪些其他书籍/网站/课程？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;以下是我推荐的一些用于入门和了解更多信息的资源：&lt;/p&gt;&lt;p&gt;图书：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; 《Kubernetes Up &amp;amp; Running》作者：Kelsey Hightower、Brendan Burns 和 Joe Beda：本书全面介绍了 Kubernetes 概念、架构和实际用例。&lt;/li&gt;&lt;li&gt; Nigel Poulton 所著的《The Kubernetes Book》：一本涵盖 Kubernetes 基础知识、部署和操作的易于理解的指南，适合初学者和经验丰富的从业者。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在线课程：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; Kubernetes.io 上的 Kubernetes 基础知识：本免费课程涵盖 Kubernetes 的基础知识，包括安装、架构和核心概念。&lt;/li&gt;&lt;li&gt; Pluralsight 上的 Kubernetes 开发人员：专注于 Kubernetes 部署、管理和应用程序开发的中级课程。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;网站：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; Kubernetes 文档 (kubernetes.io)：官方文档提供了用于学习 Kubernetes 概念和最佳实践的全面指南、教程和参考。&lt;/li&gt;&lt;li&gt; &lt;a href="https://www.cncf.io/training/courses/?_sft_lf-project=kubernetes"&gt;CNCF 培训：&lt;/a&gt;云原生计算基金会 (CNCF) 提供各种培训资源，包括研讨会、网络研讨会和交互式实验室，涵盖 Kubernetes 和相关技术。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;动手实验室：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; KillerCoda：一个交互式学习平台，提供 Kubernetes 实践实验室，允许用户在沙盒环境中练习部署、管理 Kubernetes 集群并排除故障。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;你在空闲时间做什么？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在空闲时间，我一头扎进不断发展的技术世界，热切地探索最新的进步并尝试新的工具和功能。&lt;/p&gt;&lt;p&gt;与行业脉搏保持联系对我来说是一种乐趣。我通过浏览技术博客、收听富有洞察力的播客以及在论坛和社交媒体上与其他开发人员进行热烈讨论来保持自己的最新状态。&lt;/p&gt;&lt;p&gt;但生活不仅仅只有屏幕和键盘！我在户外的简单乐趣中找到了巨大的乐趣。无论是在美丽的大自然中徒步旅行，沿着风景优美的路线骑自行车，还是只是在公园的宁静中沐浴，我都珍惜与周围世界联系的时刻。&lt;/p&gt;&lt;p&gt;对我来说，在对技术的热情和户外活动的恢复活力之间找到和谐至关重要。正是这种平衡激发了我的创造力，并确保了全面而充实的生活方式。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;如您所知，Kubernetes 今年已满 10 岁了，您对 Kubernetes 未来 10 年最兴奋的是什么？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在 Kubernetes 庆祝其非凡的 10 年历程之际，我对这一突破性技术在下一个十年的发展充满了期待。&lt;/p&gt;&lt;p&gt;最让我兴奋的一方面是 Kubernetes 作为容器编排事实上的标准的持续发展。随着它变得更加成熟和强大，我预计 Kubernetes 在塑造云原生计算的未来方面将发挥越来越核心的作用。&lt;/p&gt;&lt;p&gt;此外，我渴望见证 Kubernetes 在传统 IT 领域之外的扩散。&lt;/p&gt;&lt;p&gt;此外，我预计随着新工具、技术和最佳实践的出现，Kubernetes 生态系统将取得重大进步，进一步简化和增强容器化应用程序的部署和管理。&lt;/p&gt;&lt;p&gt;此外，我对 Kubernetes 在机器学习、人工智能和数据分析等领域推动下一波创新浪潮中所发挥的作用感到兴奋。通过提供一个可扩展且灵活的平台来运行这些工作负载，Kubernetes 将使组织能够释放有价值的见解并推动变革。&lt;/p&gt;&lt;p&gt;总体而言，我相信 Kubernetes 将继续走在云原生革命的最前沿，为世界各地的组织开创敏捷性、可扩展性和效率的新时代。未来十年将是一段激动人心的创新和发现之旅，我迫不及待地想成为其中的一部分。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;您会对刚刚开始 K8s 认证之旅的人说些什么？有什么提示或技巧吗？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;对于任何踏上 Kubernetes 认证之旅的人来说，请记住以下一些提示：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;掌握基础知识&lt;/strong&gt;：深入了解 Kubernetes 核心概念，例如 Pod、部署和服务。它们是您旅程的基石。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;亲自动手&lt;/strong&gt;：卷起袖子，亲自动手！设置您自己的集群、部署应用程序，并让自己沉浸在 Kubernetes 的现实挑战中。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;探索文档&lt;/strong&gt;：使用 Kubernetes 官方文档进行深入学习。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;社区连接&lt;/strong&gt;：融入广泛的 Kubernetes 社区。寻求建议、分享经验并享受与其他爱好者的友情。在一起，我们更强大！&lt;/li&gt;&lt;li&gt;&lt;strong&gt;掌握脉搏&lt;/strong&gt;：掌握 Kubernetes 的脉搏。关注最新活动，收听富有洞察力的播客，并通过最新更新保持领先地位。旅程在不断发展，你也是！&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;如今，云原生生态系统的意义远不止 Kubernetes。您是否计划获得 CNCF 的其他云原生认证？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;是的，我正在考虑&lt;a href="https://www.cncf.io/training/certification/pca/"&gt;Prometheus&lt;/a&gt; 、 &lt;a href="https://www.cncf.io/training/certification/ica/"&gt;Istio&lt;/a&gt; 、 &lt;a href="https://www.cncf.io/training/certification/cca/"&gt;Cilium&lt;/a&gt; 、 &lt;a href="https://www.cncf.io/training/certification/cgoa/"&gt;GitOps&lt;/a&gt;和&lt;a href="https://www.cncf.io/training/certification/capa/"&gt;Argo&lt;/a&gt;的认证。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;您是如何涉足云原生和 Kubernetes 的？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我对云原生技术和 Kubernetes 的迷恋始于在快速发展的 IT 环境中对知识和创新的追求。出于对容器化和编排前景的兴趣，我踏上了探索云原生架构变革潜力的旅程。&lt;/p&gt;&lt;p&gt;在我的技术之旅中，我发现自己被充满活力的 Kubernetes 社区所吸引。我与其他爱好者一起参与论坛、聚会，并为开源项目做出了贡献。社区的协作精神激励我分享知识、寻求指导并拥抱持续学习。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;还有其他想法吗？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt; CNCF 社区始终如一地提供出色的工作，促进云原生领域的创新和协作。他们的活动提供了宝贵的学习和交流机会，汇聚了来自世界各地的行业专家和爱好者。通过 KubeCon 和 CloudNativeCon 等举措，CNCF 社区展示了云原生技术的最新进展和最佳实践，激励开发人员突破可能的界限。凭借多样化的项目和充满活力的生态系统，CNCF 继续引领塑造云原生计算的未来。&lt;/p&gt;&lt;p&gt;如果您想成为像 Khushboo 一样的 Kubestronaut，请在&lt;a href="https://www.cncf.io/training/kubestronaut/"&gt;CNCF Kubestronaut&lt;/a&gt;页面上获取更多详细信息。 &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Thu, 06 Jun 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/06/07/kubestronaut-in-orbit-khushboo-khatter/</guid></item><item><title>【An improved OpenTelemetry continuous profiling agent】改进的 OpenTelemetry 连续分析代理</title><link>https://www.cncf.io/blog/2024/06/07/an-improved-opentelemetry-continuous-profiling-agent/</link><description>&lt;p&gt;&lt;em&gt;Elastic 的 Abhishek Singh、Christos Kalkanis、Alexander Wert 和 Bahubali Shetti 发表的会员博客文章&lt;/em&gt;&lt;/p&gt;&lt;p&gt;2023 年 3 月，OpenTelemetry 通过合并分析数据模型 OTEP 并致力于稳定的规范和实现，朝着这一目标迈出了一大步。今天，通过&lt;a href="https://www.elastic.co/observability-labs/blog/elastic-donation-proposal-to-contribute-profiling-agent-to-opentelemetry"&gt;Elastic 的连续分析代理&lt;/a&gt;的捐赠，OpenTelemetry 分析在将分析作为 OpenTelemetry 中的第四个遥测信号方面又迈出了一大步。 SRE 现在可以从这些功能中受益：快速识别性能瓶颈、最大限度地提高资源利用率、减少碳足迹以及优化云支出。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;什么是连续分析？&lt;/h2&gt;&lt;p&gt;分析是一种通过收集有关软件应用程序执行的信息来了解软件应用程序行为的技术。这包括跟踪函数调用的持续时间、内存使用情况、CPU 使用情况和其他系统资源。&lt;/p&gt;&lt;p&gt;然而，传统的分析解决方案具有显着的缺点，限制了在生产环境中的采用：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;代码检测导致显着的成本和性能开销&lt;/li&gt;&lt;li&gt;中断服务重新启动&lt;/li&gt;&lt;li&gt;无法了解第三方库&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;与通常仅在特定开发阶段或受控测试条件下完成的传统分析不同，连续分析在后台运行，开销最小。这提供了实时、可操作的见解，而无需在单独的环境中复制问题。 SRE、DevOps 和开发人员可以了解代码如何影响性能和成本，从而更轻松地改进代码和基础设施。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;生产级功能的贡献&lt;/h2&gt;&lt;p&gt;Elastic 的持续分析代理&lt;a href="https://ebpf.io/"&gt;基于 eBPF&lt;/a&gt; ，是一个始终在线的完整系统解决方案，可观察代码和第三方库、内核操作以及您不拥有的其他代码。它消除了对代码插装（运行时/字节码）、重新编译或服务重新启动的需要，并且生产环境中的开销、CPU (~1%) 和内存使用率较低。&lt;/p&gt;&lt;p&gt;分析代理有助于识别非最佳代码路径，发现“未知的未知因素”，并提供对所有应用程序的运行时行为的全面可见性。 Elastic 的连续分析代理提供对各种运行时和语言的支持，例如 C/C++、Rust、Zig、Go、Java、Python、Ruby、PHP、Node.js、V8、Perl 和 .NET。&lt;/p&gt;&lt;p&gt;此外，组织可以通过最大限度地减少计算浪费来实现可持续发展目标，确保与其战略&lt;a href="https://en.wikipedia.org/wiki/Environmental,_social,_and_corporate_governance"&gt;ESG&lt;/a&gt;目标无缝衔接。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;对 OpenTelemetry 社区的好处&lt;/h2&gt;&lt;p&gt;这一贡献促进了可观察性连续分析的标准化，并加速了分析作为 OTel 中第四个关键信号的实际采用。客户现在可以使用与供应商无关的方法来收集分析数据并实现与现有信号（例如跟踪、指标和日志）的关联。&lt;/p&gt;&lt;p&gt;基于 OTel 的连续分析为用户带来了以下可能性：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;改善客户体验：通过持续分析提供一致的服务质量和性能，确保客户拥有性能最佳、保持响应且可靠的应用程序。&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;毛利率最大化：企业可以通过减少运行应用程序所需的计算资源来优化其云支出并提高盈利能力。整个系统的持续分析是在可能跨越多个云提供商的不同环境中识别最昂贵的功能（精确到代码行）的一种方法。在云环境中，节省的每个 CPU 周期都意味着节省资金。&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;最大限度地减少对环境的影响：与计算相关的能源消耗日益受到关注（来源：&lt;a href="https://energy.mit.edu/news/energy-efficient-computing/"&gt;麻省理工学院能源倡议&lt;/a&gt;）。更高效的代码意味着更低的能源消耗，有助于减少碳 (CO2) 足迹。&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;加速工程工作流程：持续分析提供详细的见解，帮助更快地解决复杂问题、指导开发并提高整体代码质量。&lt;/li&gt;&lt;li&gt;改善供应商中立性并提高效率：基于 OTel eBPF 的分析代理无需使用专有的 APM 代理，并提供更有效的方式来收集分析遥测数据。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;凭借这些优势，客户现在可以在云上管理整个应用程序的效率，同时确保其工程团队对其进行优化。&lt;/p&gt;&lt;p&gt;展望未来，Elastic 将继续与 OTel Profiling 和 Collector SIG 密切合作，以确保分析代理在更广泛的 OTel 生态系统中无缝集成。 &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Thu, 06 Jun 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/06/07/an-improved-opentelemetry-continuous-profiling-agent/</guid></item><item><title>【Generative AI for Kubernetes: meet K8sGPT open source project】Kubernetes 的生成式 AI：认识 K8sGPT 开源项目</title><link>https://www.cncf.io/blog/2024/06/07/generative-ai-for-kubernetes-meet-k8sgpt-open-source-project/</link><description>&lt;p&gt;&lt;em&gt;大使帖子最初由 Dotan Horovits 发布在&lt;a href="https://logz.io/blog/k8sgpt-generative-ai-for-kubernetes/?utm_medium=referral&amp;amp;utm_source=cncf"&gt;Logz.io 博客&lt;/a&gt;上&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Kubernetes 环境中的故障​​排除可能是一项艰巨的任务。如果我们能有一个神奇的人工智能顾问，它可以收集有关系统运行情况的所有数据，并告诉我出了什么问题，甚至如何解决它。这不是很好吗？&lt;/p&gt;&lt;p&gt; K8sGPT 是一个年轻的开源项目，它使用生成式 AI 为每个人赋予 Kubernetes 超能力。它最近刚刚成立一年，现在是&lt;a href="https://logz.io/blog/fireside-chat-with-cncf-cto-opentelemetry-more/?utm_medium=referral&amp;amp;utm_source=cncf" rel="noreferrer noopener" target="_blank"&gt;云原生计算基金会&lt;/a&gt;(CNCF) 的一部分。&lt;/p&gt;&lt;p&gt;这个开源项目是否超越了 Gen AI 的炒作，让我们更接近用简单的英语诊断和分类问题？我在最近一集的 OpenObservability Talks 中与 K8sGPT 的核心维护者、CNCF 大使&lt;a href="https://www.linkedin.com/in/ACoAACkX6_kBZph6m08Zz9rFg0IQ_TAzfDXaDoQ?lipi=urn%3Ali%3Apage%3Ad_flagship3_search_srp_content%3BLLn8zWFpSY6vHih3dyHHgA%3D%3D" rel="noreferrer noopener" target="_blank"&gt;Thomas Schuetz&lt;/a&gt;坐在一起，聆听了所有相关内容。 Thomas 也是 Kapsch TrafficCom AG 的首席云架构师，并在奥地利应用科学大学任教，专注于云原生技术。 &lt;/p&gt;&lt;h2 class="wp-block-heading" id="m_8811500558216708561gmail-the-promise-of-generative-al-for-kubernetes"&gt;生成式 AI 对 Kubernetes 的承诺&lt;/h2&gt;&lt;p&gt;&lt;a href="https://logz.io/blog/completing-kubernetes-monitoring-puzzle/?utm_medium=referral&amp;amp;utm_source=cncf" rel="noreferrer noopener" target="_blank"&gt;Kubernetes 管理员面临的挑战&lt;/a&gt;是多方面的，而且经常反复出现。简单的错误配置（例如缺少服务帐户或没有端点的服务）可能会导致部署失败，这可能是 DevOps 和 SRE 的噩梦。&lt;/p&gt;&lt;p&gt;传统上，SRE 会手动搜索日志、事件和配置文件，试图找出问题的根本原因。然而，这个过程可能非常耗时且容易出错，通常会导致解决延迟和运营中断。这些痛苦促使 Alex Jones 创建了 K8sGPT，后来 Thomas 加入作为第二个维护者。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="m_8811500558216708561gmail-how-k8sgpt-works"&gt; K8sGPT 的工作原理&lt;/h2&gt;&lt;p&gt;&lt;a href="https://k8sgpt.ai/" rel="noreferrer noopener" target="_blank"&gt;K8sGPT&lt;/a&gt;的功能非常类似于经验丰富的 SRE，持续监控 Kubernetes 集群是否存在异常和问题。它分析相关数据，识别潜在问题，并利用外部人工智能引擎提供见解和建议。&lt;/p&gt;&lt;p&gt;该旅程从数据收集开始，K8sGPT 有选择地从 Kubernetes 集群收集相关信息。与误解相反，K8sGPT 不会不加区别地向 AI 提供商提供原始集群数据。相反，它采用有针对性的方法，过滤掉无关信息并对收集的数据进行匿名化以保护隐私和安全。&lt;/p&gt;&lt;p&gt;一旦收集到相关数据，K8sGPT 就会利用人工智能算法来分析和解释信息，这与 SRE 的方式非常相似。例如，它会识别 Pod 未运行等问题，并检查事件流是否存在潜在原因，例如缺少服务帐户的副本集。有了这个，就可以提示生成人工智能模型来解释问题。&lt;/p&gt;&lt;p&gt;有时，这些见解甚至会让经验丰富的 SRE 感到惊讶，例如 Alex 和 Thomas 自己：“有一次，我们为某些资源编写了一个分析器，Alex 运行它并说是的，这不可能是正确的，但最终它是正确的。”&lt;/p&gt;&lt;h2 class="wp-block-heading" id="m_8811500558216708561gmail-bring-your-own-gen-al-provider"&gt;带来您自己的新一代人工智能提供商&lt;/h2&gt;&lt;p&gt;K8sGPT 连接到各种 AI 提供商进行分析。目前，K8s 提供与 OpenAI、Azure、Cohere、Amazon Bedrock、Amazon Sagemaker、Google Gemini 和 Vertex 的开箱即用集成。&lt;/p&gt;&lt;p&gt;需要强调的是，在发送提示之前，K8sGPT 首先会对 Pod 名称等信息进行匿名处理。 K8sGPT 还支持连接到本地模型，这对于无法将信息发送给外部提供商的组织非常有用。&lt;/p&gt;&lt;p&gt; K8sGPT 功能的关键在于它能够生成描述性问题摘要和实用的解决方案。 Thomas 强调了该项目的重点如何超越基本的问题场景，发展到涵盖各种问题，包括外部集成。&lt;/p&gt;&lt;p&gt; K8sGPT 最初是一个 CLI，被触发以一次性方式提供这些诊断。然后，该项目演变成一个自动化的 SRE 助手，添加了一个在集群中运行的 Kubernetes Operator，它不断地查找问题并将其打印到资源中。&lt;br /&gt;持续监督不仅可以避免管理员在出现问题时调用 CLI，还可以在管理员或最终用户注意到问题之前主动检测情况何时开始变得不正常。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="m_8811500558216708561gmail-growing-excitement-and-adoption"&gt;日益增长的兴奋度和采用率&lt;/h2&gt;&lt;p&gt;K8sGPT 项目的采用凸显了其在 Kubernetes 生态系统中日益重要的重要性。 Thomas 分享了该项目在发布一两周后如何在&lt;a href="https://github.com/k8sgpt-ai/k8sgpt" rel="noreferrer noopener" target="_blank"&gt;GitHub 存储库&lt;/a&gt;上获得了大约 1,000 个 star，并且该项目的第一个 fork 在发布后的第一天就完成了。迄今为止，该项目已经拥有约 5,000 个 GitHub star 和 500 多个分支。&lt;/p&gt;&lt;p&gt;除了星级排名之外，Kubermatic、SpectroCloud 和 Nethopper 等公司还热情地采用了 K8sGPT 功能，将其集成到其基础设施中以简化故障排除流程。 Thomas 呼吁其他采用者伸出援手并分享他们的用例，以便项目维护人员可以根据使用情况更好地引导项目，并支持其在 CNCF 内的成熟。&lt;/p&gt;&lt;p&gt;维护团队也成长得很好。 Thomas 表示，该项目现在有 30 到 40 名贡献者。他还强调，与许多热门项目不同，这个项目背后没有公司，也没有商业计划。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="m_8811500558216708561gmail-k8sgpt-joins-the-cncf-sandbox"&gt; K8sGPT 加入 CNCF 沙箱&lt;/h2&gt;&lt;p&gt;K8sGPT 刚刚成立一周年，标志着一段重要的创新和成长之旅。 K8sGPT 最近被 CNCF 沙箱接受，标志着这一旅程的高潮。这一里程碑不仅验证了该项目的技术实力，还为更大程度的协作和采用打开了大门。&lt;/p&gt;&lt;p&gt;托马斯分享了该项目的有趣路线图。主要重点放在与亚马逊、谷歌等云提供商基础设施的集成上，以更多地发现基础设施层面的问题。他还列出了扫描 CRD 以及与 AI 领域其他工具的集成。&lt;/p&gt;&lt;p&gt;目前，虽然与 Slack 集成以发送下游通知，但 Thomas 提到正在考虑与 MS Teams 和 Mattermost 等其他目标集成。&lt;/p&gt;&lt;p&gt;想了解更多吗？查看我的 OpenObservability Talks 播客剧集： &lt;a href="https://podcasters.spotify.com/pod/show/openobservability/episodes/KubeCon-Paris-Highlights-and-AI-Spotlight-on-K8sGPT---OpenObservability-Talks-S4E11-e2ickaj" rel="noreferrer noopener" target="_blank"&gt;&lt;em&gt;KubeCon Paris 亮点和 K8sgpt 上的 AI 聚焦&lt;/em&gt;&lt;/a&gt;。 &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Thu, 06 Jun 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/06/07/generative-ai-for-kubernetes-meet-k8sgpt-open-source-project/</guid></item><item><title>【The voice of Kubernetes experts report 2024: the data trends driving the future of the enterprise】Kubernetes专家之声报告2024：驱动企业未来的数据趋势</title><link>https://www.cncf.io/blog/2024/06/06/the-voice-of-kubernetes-experts-report-2024-the-data-trends-driving-the-future-of-the-enterprise/</link><description>&lt;p&gt;&lt;em&gt;客座文章，作者：Rajiv Thakkar，Pure Storage Portworx 产品营销总监 ( &lt;a href="https://www.linkedin.com/in/rajivthakkar1984?utm_source=share&amp;amp;utm_campaign=share_via&amp;amp;utm_content=profile&amp;amp;utm_medium=ios_app"&gt;LinkedIn&lt;/a&gt; )&lt;/em&gt;&lt;/p&gt;&lt;p&gt;今天，6 月 6 日，是 Kubernetes 诞生 10 周年。 Kubernetes 最初是 Google 的一个项目，并于 2014 年 6 月作为开源发布。在过去 10 年里，它已成为容器编排事实上的标准，被世界各地的开发人员和组织用于现代应用程序开发。&lt;/p&gt;&lt;p&gt; Portworx by Pure Storage 与第三方研究公司 Dimensional Research 合作，对拥有 500 名或以上员工的公司的 500 多名在 Kubernetes 上运行数据的参与者进行了调查。调查参与者分布在不同的工作职能中，从平台工程师到副总裁或首席高管级别的高级管理人员。 56% 的受访者可以被归类为拥有 4 年或以上 Kubernetes 经验的专家，而绝大多数 (91%) 拥有至少两年的经验。&lt;/p&gt;&lt;p&gt;该报告将揭示专家在虚拟化和持久存储方面的一些首要任务，以及平台工程师在管理通常跨越混合和多云环境以及虚拟机和容器环境的复杂 Kubernetes 环境时面临的数据管理挑战。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;&lt;strong&gt;云原生平台是未来的平台&lt;/strong&gt;&lt;/h2&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="条形图显示了受访者如何描述其公司当前总体应用程序足迹的调查结果，36% 的受访者回答“大多数应用程序是云原生的，但有些是传统的”。对于“您如何描述公司未来五年对新应用程序的投资计划”这一问题，53% 的受访者回答“大多数新应用程序将是云原生的，但有些是传统的”" class="wp-image-112541" height="479" src="https://www.cncf.io/wp-content/uploads/2024/06/unnamed-7.jpg" width="1329" /&gt;&lt;/figure&gt;&lt;p&gt;专家表示：云原生平台将主导未来。在已经采用 Kubernetes 的组织中，41% 已经在云原生平台上构建大部分新应用程序。未来五年，这个数字将翻倍，其中 80% 计划在云原生上构建大部分新应用程序。&lt;/p&gt;&lt;p&gt;显而易见的是，Kubernetes 不再仅仅是一项新兴技术。那些在 Kubernetes 上运行数据的人比以往任何时候都更加信任它能够托管数据库、实时分析和 AI/ML 工作负载等关键任务应用程序。这些关键工作负载的不断出现意味着他们的云原生数据平台需要能够提供企业级功能，以便这些应用程序高效、安全地运行。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;&lt;strong&gt;平台工程的重要性与日俱增&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;在这些云原生平台的发展方面，平台工程团队处于主导地位。在接受调查的 527 名参与者中，96% 的人表示他们的组织拥有平台工程职能。&lt;/p&gt;&lt;p&gt;这些团队是推动云原生成功的关键部分，高管们对他们的价值并不陌生。与其他职能部门相比，高管将向平台工程的转变视为晋升的可能性高出 1.8 倍，他们愿意投入时间和资源来提高现有员工的技能 (63%)、与顾问合作 (59%) 以及招聘技术人员工程师（52%）来支持这一日益重要的功能。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;&lt;strong&gt;报告要点&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;这些只是报告中的几个主要亮点。 Kubernetes 专家关于企业数据趋势的其他一些重要观点是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;传统虚拟机基础设施正处于拐点：&lt;/strong&gt; 58% 将使用 KubeVirt 等技术将部分虚拟机迁移到 Kubernetes 管理。在这些组织中，65% 计划在未来两年内迁移其虚拟机，这表明了紧迫性。&lt;/li&gt;&lt;li&gt; &lt;strong&gt;Kubernetes 上的数据加速了应用程序交付：&lt;/strong&gt;几乎所有 (98%) 的受访者都在云原生平台上运行数据密集型工作负载，其中包括数据库 (72%)、分析 (67%) 和 AI/ML 工作负载 (54%) 等关键应用程序）基于 Kubernetes 构建。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;请在此处阅读完整报告： &lt;a href="https://portworx.com/resources/voice-of-kubernetes-expert-report/"&gt;2024 年 Kubernetes 专家之声：推动企业未来的顶级数据趋势&lt;/a&gt;，并了解在 Kubernetes 之旅中走得更远的引领趋势的组织如何规划云原生的未来。 &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Wed, 05 Jun 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/06/06/the-voice-of-kubernetes-experts-report-2024-the-data-trends-driving-the-future-of-the-enterprise/</guid></item><item><title>【Unveiling the 10-Year Kubernetes anniversary logo】揭晓 Kubernetes 10 周年周年纪念标志</title><link>https://www.cncf.io/blog/2024/06/06/unveiling-the-10-year-kubernetes-anniversary-logo/</link><description>&lt;h3 class="wp-block-heading"&gt;&lt;em&gt;恭喜 Cristher Castro 和 Cuemby 设计获奖标志&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;在庆祝首次 Kubernetes &lt;a href="https://github.com/kubernetes/kubernetes/commit/2c4b3a562ce34cddc3f8218a2c4d11c7310e6d56"&gt;提交&lt;/a&gt;周年纪念日之际，我们很高兴地宣布 Kubernetes 10 周年徽标设计大赛获胜者并揭晓获奖设计。获胜标志是由 Cristher Castro 和她在 Cuemby 的团队设计的。这个特殊徽标将标志着 Kubernetes 项目的一个重要里程碑，并庆祝十年来的创新、协作和云原生开发的巨大变化。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="Kubernetes 十周年徽标" class="wp-image-112539" height="1600" src="https://www.cncf.io/wp-content/uploads/2024/06/image-11.jpeg" width="1002" /&gt;&lt;/figure&gt;&lt;p&gt;我们采访了 Cristher，详细了解了设计背后的灵感、她对云原生社区的参与以及她对 Kubernetes 下一个十年的期望。&lt;/p&gt;&lt;p&gt; &lt;strong&gt;CNCF：是什么促使您参加 Kubernetes 10 周年徽标竞赛？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt; Cristher：这次比赛对于我和我在 Cuemby 的团队来说是一个独特的机会，可以为社区做出创造性的贡献。作为一名非技术人员，我将 Kubernetes 视为一个能够帮助其他项目成长的生态系统，就像社区一样。蛋糕象征着运行在服务器上的容器，这是 Kubernetes 的基础，编排创建分布式系统，同时代表共享和庆祝，这与 Kubernetes 以简单而强大的方式编排解决方案的角色相一致。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;您加入云原生社区多久了？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;自 2018 年我们在麦德林开设聚会章节以来，我一直是这个美丽社区的一员。从那时起，我们公司于 2019 年以银牌会员身份加入 CNCF。从那时起，我一直支持新兴社区和聚会，重点关注信息的可访问性并弥合专家和初学者之间的差距。我的参与更多的是后勤和操作，但每个角色在社区中都很重要。这段旅程使我成为一名大使，塑造了我的个人和职业发展，并激励我做得更多。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;您最喜欢这个社区的哪一部分？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这是跨不同技能组合的归属感和协作感。这个社区的美妙之处在于您不必成为技术专家即可做出贡献。每个人，无论其背景如何，都受到欢迎。从贡献者到维护者，从主要聚会组织者到志愿者，从软件工程师学生到公司和大学，每个人都会产生影响。新的贡献者学习如何成为开源技术的一部分，加入一项为云原生社区提供无限增长机会的运动。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;您有最喜欢的 Kubernetes 时刻或故事吗？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我最喜欢的时刻是在芝加哥举行的 2023 年 KubeCon + CloudNativeCon 北美大会上，我被任命为大使。更重要的是，不断壮大的拉丁美洲社区有机会走到一起。我们分享了我们的故事，交换了想法，并建立了联系，这些联系不断加强我们今天的社区。在图中，我们是大约 30 个 LATAM 社区组织者，包括 KCD 组织者、贡献者、维护者和爱好者，他们以某种方式支持 Kubernetes 社区并创造采用云原生技术的方法。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;有什么事情让你开怀大笑或为你所做的工作感到自豪吗？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在拉丁美洲举办首届现场 KCD 感觉不可能，但我们成功了。从那时起，拉丁美洲社区变得更加强大。我很高兴 CNCF 宣布该地区首个 KubeDay 将于 2024 年 10 月 9 日在哥伦比亚麦德林举行。我对整个社区的努力感到自豪和感激。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;未来几年，您对 Kubernetes 的哪些方面感到兴奋？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我对 Kubernetes 的快速扩张及其背后强大的支持社区感到兴奋。这些技术在新兴地区的日益采用和积极贡献将对专业人士和企业产生深远的影响。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;恭喜！&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;获奖徽标由 Kubernetes 专家和设计专业人士组成的小组选出，其中包括：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; Tim Hockin，Google Cloud 杰出软件工程师和 Kubernetes 原始徽标的设计者&lt;/li&gt;&lt;li&gt;Chris Aniszczyk，云原生计算基金会首席技术官&lt;/li&gt;&lt;li&gt;Karen Chu，Fermyon 社区负责人，Phippy 角色设计师&lt;/li&gt;&lt;li&gt;Ashley Willis，GitHub 开发者关系总监，Kubernetes 5 周年纪念标志设计师&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;根据创意、与主题的相关性和视觉吸引力对提交的作品进行评估。虽然我们收到了 30 多份提交的作品，但获胜的设计因其对细节的关注而脱颖而出，并捕捉到了 KuberTENes 生日活动的场景。祝贺 Cristher 和 Cuemby 团队，并非常感谢所有花时间提交的人。我们对这个社区在过去十年中所取得的成就总是感到惊讶，提交的作品的创造力和深思熟虑也反映了这一点。&lt;/p&gt;&lt;p&gt;喜欢这个设计吗？ CNCF 商店有售一款带有该徽标的特殊 Kubernetes 生日 T 恤； &lt;a href="https://store.cncf.io/collections/kubernetes-10-year-birthday-tee?ls=CZozNfa7_HqFNQVmsfCZv"&gt;立即订购&lt;/a&gt;！&lt;/p&gt;&lt;p&gt;&lt;strong&gt;快来参加庆祝活动吧！&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;官方&lt;a href="https://events.linuxfoundation.org/kuber10es-birthday-bash/"&gt;KuberTENes 生日庆典&lt;/a&gt;将于 6 月 6 日在加利福尼亚州山景城举行。注册获取免费门票，并加入我们参加一个晚上的演讲和小组讨论，其中包括早期 Kubernetes 贡献者和使该项目成为可能的隐藏人物。不在湾区或无法到达？在您所在的地区与您的社区一起庆祝！超过 40 个云原生社区团体将在全球各地举办聚会。请参阅&lt;a href="https://www.cncf.io/kubertenes/"&gt;此处&lt;/a&gt;查看完整列表。我们还将在&lt;a href="https://www.youtube.com/@cncf/streams"&gt;CNCF YouTube 频道&lt;/a&gt;上对湾区活动进行&lt;a href="https://www.youtube.com/live/jYjEWlnY25M"&gt;现场直播&lt;/a&gt;和视频重播。&lt;/p&gt;&lt;p&gt;并参加盐湖城最大的 Kubernetes 爱好者聚会&lt;a href="https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/"&gt;KubeCon + CloudNativeCon North America&lt;/a&gt; ，我们计划在那里继续举办 10 周年庆祝活动。 &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Wed, 05 Jun 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/06/06/unveiling-the-10-year-kubernetes-anniversary-logo/</guid></item><item><title>【CNCF announces the second Zero to Merge cohort】CNCF 宣布第二个“零到合并”队列</title><link>https://www.cncf.io/blog/2024/06/05/cncf-announces-the-second-zero-to-merge-cohort/</link><description>&lt;p&gt;作者： &lt;a href="https://www.linkedin.com/in/onlydole/"&gt;Taylor Dolezal&lt;/a&gt; ，CNCF 生态系统主管&lt;/p&gt;&lt;p&gt;云原生计算基金会 (CNCF) 很高兴地宣布我们的第二&lt;a href="https://project.linuxfoundation.org/cncf-zero-to-merge-application"&gt;批零到合并计划&lt;/a&gt;。这个为期四周的全面旅程使参与者能够为 CNCF 项目做出有意义的贡献。该项目将于2024年6月10日至7月3日运行，每周一和周三进行现场直播。&lt;/p&gt;&lt;p&gt;从零到合并计划专为具有一定编程经验并了解云原生原理的热情学习者而设计。在四个星期的时间里，参与者将参与现场会议、实践活动、同伴协作和指导学习资源。他们将对 CNCF 和开源贡献有深入的了解，学习识别 CNCF 项目中的问题，编写有效的拉取请求，并与项目维护人员合作。&lt;/p&gt;&lt;p&gt;我们精心挑选的群体代表了来自不同背景、地点和经验水平的不同个人，参与者来自 20 多个国家。该团队由学生、独立贡献者和来自知名公司的专业人士组成，带来了丰富的知识和独特的视角。&lt;/p&gt;&lt;p&gt;我们的核心价值观“赋权、协作、包容、质量、透明度和适应性”将成为该计划的核心，提供一个鼓励开放、相互学习和创新的热情和支持性环境。项目结束时，参与者将拥有技能和信心，为 CNCF 项目做出有意义的贡献，并成为重视多样性、创造力和创新的充满活力的社区的一部分。&lt;/p&gt;&lt;p&gt;我们很高兴能够与我们杰出的团队一起踏上这一旅程，他们代表了云原生生态系统中的各种利益。从 Kubernetes 和应用程序部署到可观察性和安全性，我们的参与者带来了不同的技能和热情。我们期待与来自著名组织的代表、独立贡献者以及来自知名院校的学生进行充满活力和丰富的思想交流。&lt;/p&gt;&lt;p&gt;从零到合并计划不仅仅是合并代码；它还涉及合并代码。这是关于培养协作、学习和成长的文化。我们期待见证我们的团队在踏上这一变革之旅时所做出的令人难以置信的贡献和成就。我们将共同塑造开源的未来，并建立一个更强大、更积极参与的社区。&lt;/p&gt;&lt;p&gt;如果您想加入我们的未来队列，&lt;a href="https://project.linuxfoundation.org/cncf-zero-to-merge-application"&gt;请查看我们的注册页面&lt;/a&gt;以了解更多详细信息。 &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Tue, 04 Jun 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/06/05/cncf-announces-the-second-zero-to-merge-cohort/</guid></item><item><title>【werf 2.0 with Nelm, and what it brings to the cloud native community】werf 2.0 与 Nelm 及其给云原生社区带来的影响</title><link>https://www.cncf.io/blog/2024/06/05/werf-2-0-with-nelm-and-what-it-brings-to-the-cloud-native-community/</link><description>&lt;p&gt;&lt;em&gt;会员帖子最初由 Palark 主编 Dmitry Shurupov 在&lt;a href="https://blog.palark.com/werf-v2-history-nelm-alternative-to-helm/"&gt;Palark 博客&lt;/a&gt;上发布&lt;/em&gt;&lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="为 werf 2.0 欢呼的表情符号" class="wp-image-112532" height="521" src="https://www.cncf.io/wp-content/uploads/2024/06/werf-v2-helm-nelm-evolution-1024x521-1.jpg" width="1024" /&gt;&lt;/figure&gt;&lt;p&gt;在最近发布的 werf v2.0 版本中，CI/CD 解决方案推出了名为 Nelm 的新部署引擎。它取代了 Helm，同时保留了向后兼容性并引入了新的突出功能。您现在就可以在 werf 中尝试使用它们，其他工具很快就会出现。让我们探索该项目的历史并研究它实现这一转变的路径。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt; werf 最快介绍&lt;/h2&gt;&lt;p&gt;如果您不知道&lt;a href="https://werf.io/"&gt;werf&lt;/a&gt; ，它是一个 CNCF 沙盒项目和 CLI 工具，用于使用 Kubernetes 实施 CI/CD。它被称为“CI/CD 系统中缺失的部分”，是一种固执己见的一体化解决方案，涵盖整个 CI/CD 管道，从容器映像的构建一直到部署。&lt;/p&gt;&lt;p&gt; werf&lt;em&gt;不会&lt;/em&gt;取代 CI 系统，而是与您喜欢的系统&lt;em&gt;集成&lt;/em&gt;。例如，它附带了 GitLab CI/CD 和 GitHub Actions 的即用型集成。当您将 CI 与 werf 集成时，会执行后者来构建和部署映像，并帮助调试、测试和发布软件。&lt;br /&gt;如果您将 CI/CD 视为一条装配线 - 就像真正的制造过程一样 - &lt;strong&gt;werf 就是您的通用工业机器人&lt;/strong&gt;，能够在每个工作站&lt;em&gt;（即 CI/CD 步骤）&lt;/em&gt;上完成产品所需的一切工作&lt;em&gt;（你的软件）&lt;/em&gt;逐渐发展，直到最终确定&lt;em&gt;（在 Kubernetes 中运行）&lt;/em&gt; 。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="工厂布局中带有 werf 标志的机器在板上充电" class="wp-image-112534" height="635" src="https://www.cncf.io/wp-content/uploads/2024/06/werf-industrial-assembly-line-1024x635-1.jpg" width="1024" /&gt;&lt;/figure&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;a href="https://blog.palark.com/introduction-to-werf/"&gt;本文&lt;/a&gt;更详细地介绍了 werf 是什么。&lt;/em&gt;&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt; werf是如何进化的&lt;/h2&gt;&lt;p&gt;werf 是由一家 DevOps 服务公司创立的，该公司希望自动化其为各种客户使用的常见 CI/CD 实践。早在 2016 年，它是一个简单的 Ruby 程序，通过执行&lt;code&gt;docker build&lt;/code&gt;并添加一些魔法来帮助您构建 Docker 映像。&lt;/p&gt;&lt;p&gt;在接下来的几年里，它添加了越来越多的开箱即用且易于使用的功能。最初，他们只专注于构建容器映像，但后来，他们还继续涵盖其他 CI/CD 步骤。&lt;/p&gt;&lt;p&gt;如果您不使用 werf，实现基于容器的 CI/CD 的常见方法是选择并集成满足您所有需求的知名工具。这有点类似于将所有这些精彩的基于 Unix 的 CLI 命令放入一个充满管道的巨大单行中。&lt;/p&gt;&lt;p&gt;这正是 werf 所做的——&lt;strong&gt;成为各种工具的“粘合剂”，&lt;/strong&gt;这些工具可以与您选择的 CI 系统一起使用。然而，它不仅仅是一种“粘合剂”，因为它还具有许多额外的功能，这些功能是在云原生生态系统提供的坚实基础之上提供的。 werf 中的 Helm 就是一个很好的例证。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;赫尔姆呢？&lt;/h2&gt;&lt;p&gt;通过 werf 将应用程序部署到 Kubernetes 是该项目历史上的一个重要里程碑。这时 Helm 开始发挥作用，将自己确立为该工具的支柱之一。这件事早在 2017 年就发生了，远早于 Helm&lt;a href="https://helm.sh/blog/celebrating-helms-cncf-graduation/"&gt;成为&lt;/a&gt;CNCF 毕业项目。然而，即使在当时，选择也是显而易见的。 Helm 非常成熟，更重要的是，每当您需要将某些东西部署到 Kubernetes 时，Helm 都会成为云原生生态系统中事实上的标准。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="显示 github 上的 Kube 命令 #245 的屏幕截图" class="wp-image-112535" height="372" src="https://www.cncf.io/wp-content/uploads/2024/06/werf-kube-deploy-github-pr.jpg" width="944" /&gt;&lt;figcaption class="wp-element-caption"&gt; &lt;a href="https://github.com/werf/werf/pull/245"&gt;PR #&lt;/a&gt; 245，2017 年实现了 werf 的部署功能&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;然而，尽管 Helm 是一个很棒的工具，但它的开发速度在接下来的几年里明显停滞了。为什么？需要注意的是，Helm 负责两件事：打包软件（考虑模板和图表）并将其部署到集群（ &lt;code&gt;helm install&lt;/code&gt;及其相关的所有内容）。虽然一些 Kubernetes 用户对 Helm* 中模板的便利性和功能丰富性不满意，但其图表已成为为 Kubernetes（社区采用的标准）打包应用程序的最常见方式。它仍然与 2024 年相关：您想要在 K8s 中运行的绝大多数软件都在 Helm 图表中描述。&lt;/p&gt;&lt;p&gt; &lt;em&gt;* 顺便说一句，我们的&lt;/em&gt;&lt;a href="https://blog.palark.com/advanced-helm-templating/"&gt;&lt;em&gt;“充分利用 Helm 模板”&lt;/em&gt;&lt;/a&gt;&lt;em&gt;文章对于那些有兴趣使 Helm 模板更加灵活和动态的人来说可能会很方便。&lt;/em&gt;&lt;/p&gt;&lt;p&gt;但这并不是 Helm 的唯一用例。如上所述，Helm 不仅可以帮助您&lt;em&gt;描述&lt;/em&gt;软件的 Kubernetes 资源，还可以用于&lt;em&gt;部署&lt;/em&gt;到 K8s。虽然许多用户完全依赖 Helm 来部署他们的应用程序，但如今，这些大多是基本场景，缺乏其他工具提供的许多附加功能。&lt;/p&gt;&lt;p&gt;我们中的许多人更喜欢 GitOps 方法和实现它的适当技术 - Argo 和 Flux。难怪这两个 CNCF 项目几乎在 2022 年同时毕业（ &lt;a href="https://www.cncf.io/announcements/2022/11/30/flux-graduates-from-cncf-incubator/"&gt;Flux&lt;/a&gt;与&lt;a href="https://www.cncf.io/announcements/2022/12/06/the-cloud-native-computing-foundation-announces-argo-has-graduated/"&gt;Argo&lt;/a&gt; ）。&lt;/p&gt;&lt;p&gt;与此同时，Helm 的部署功能最近并没有看到太大的改进。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="GitHub 上 helm/helm 的代码频率图" class="wp-image-112536" height="547" src="https://www.cncf.io/wp-content/uploads/2024/06/helm-github-code-frequency.png" width="974" /&gt;&lt;figcaption class="wp-element-caption"&gt; GitHub 上&lt;a href="https://github.com/helm/helm/"&gt;helm/helm&lt;/a&gt;的代码频率图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;由于 Helm 在 werf 中用于描述和部署软件，因此这种放缓影响了 werf 及其在众多用例中的潜力。 Helm 的&lt;a href="https://github.com/werf/helm"&gt;补丁版本&lt;/a&gt;已经在 werf 中使用了很长一段时间，但这种情况不可能永远持续下去。&lt;/p&gt;&lt;p&gt;多年来，看到 Helm 无法克服困难后，werf 背后的团队决定继续推进其分叉，并启动 Nelm 作为替代项目。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;内尔姆来了&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/werf/nelm"&gt;Nelm&lt;/a&gt;是一个诞生于 werf 碗中的开源项目。它是 Helm 的部分重新实现，其部署子系统从头开始重写，并改进了图表管理子系统。它继续通过添加新功能来开发 Helm，同时保持向后兼容性。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;特征&lt;/h3&gt;&lt;p&gt;Nelm 已经提供了 Helm 所缺少的有用功能。它们涵盖了用户体验的各个领域。例如，Nelm 依靠服务器端应用 (SSA) 来更新 Kubernetes 资源，这显着提高了一致性和鲁棒性。虽然 Helm 依赖于 3-Way Merge (3WM)，但 Nelm 中采用的 SSA 是业界流行的选择，它也应用于 Kubernetes（自 v1.22 起稳定）、Flux、Argo CD 和 kubectl kustomize。&lt;/p&gt;&lt;p&gt;另一个例子是高级资源状态跟踪，这使得 Nelm 在部署过程中成为更加透明、用户友好的工具。它显示实时状态、日志和资源事件，甚至在出现问题时执行自动回滚。此外，使用 Nelm，您可以类似于&lt;code&gt;kubectl apply --dry-run&lt;/code&gt;所做的那样预览更改，并且没有&lt;a href="https://github.com/databus23/helm-diff"&gt;helm-diff&lt;/a&gt;带来的缺点。 &lt;/p&gt;&lt;figure class="wp-block-image size-full"&gt;&lt;img alt="使用 Nelm 部署期间显示的进度状态的代码示例" class="wp-image-112537" height="428" src="https://www.cncf.io/wp-content/uploads/2024/06/werf-nelm-progress-status-1024x428-1.jpg" width="1024" /&gt;&lt;figcaption class="wp-element-caption"&gt;使用 Nelm 部署期间显示的进度状态示例&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;要了解 Nelm 功能的复杂性，请观看 CNCF 最近主办的网络研讨会： &lt;a href="https://www.cncf.io/online-programs/cncf-on-demand-webinar-from-improving-helm-to-developing-nelm-the-evolution-of-deployments-in-werf/"&gt;“从改进 Helm 到开发 Nelm：werf 部署的演变”&lt;/a&gt; 。&lt;/p&gt;&lt;p&gt; Nelm 计划中的功能同样令人兴奋。还记得前面提到的关于 Helm 模板的投诉吗？采用替代模板机制，无论是 CUE 还是全功能语言（例如 TypeScript），都在 Nelm 的待办事项列表中。喜欢使用 Kustomize 方法来定义应用程序的资源吗？高级资源修补实施也正在进行中。 GitOps 爱好者可能会很高兴看到即将到来的 Flux + Nelm 集成。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;库和 CLI 工具&lt;/h3&gt;&lt;p&gt;Nelm 是作为 werf 的基石而开发的，主要是一个库。这就是该项目目前的重点。好消息是这个库可以在任何其他软件中使用。如果基于 Kubernetes 的工具或解决方案可能受益于 Nelm 的功能，那么嵌入它们应该很容易，类似于在 werf 中完成的方式。&lt;/p&gt;&lt;p&gt;然而，Nelm 作为 CLI 工具（Helm 的某种直接替代品）的潜力似乎也很大。因此，将库的功能扩展到终端用户的独立&lt;code&gt;nelm&lt;/code&gt;命令也将在未来几个月内推出。&lt;/p&gt;&lt;p&gt;现在，让我们回到 werf 的故事。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;韦尔夫2.0&lt;/h2&gt;&lt;p&gt; Nelm 取代了 werf 的 Helm 分叉，并通过各种 werf 发布渠道取得了足够的成熟：从 alpha 到 beta，然后是早期访问，再到稳定……然而，在这一点上，Nelm 和 Helm 之间的差异已经变得越来越明显。由于 SSA 实施了更严格的验证，一些 werf 用户不得不修复 Helm 图表中长期存在的问题。虽然从未在 Helm 中检测到它们，但它们无法通过 Nelm 中呈现的验证。&lt;/p&gt;&lt;p&gt;虽然它确实影响了一些用户和图表，但强迫werf稳定版本的用户修改他们的图表似乎并不合理。削弱 Nelm 验证机制似乎也不合理，这实际上意味着“人为地在其中引入几个缺陷”[以完全重现所有 Helm 3WM 特定问题]。&lt;/p&gt;&lt;p&gt;因此，werf 的下一个主要版本 - v2.0 - 于 4 月底&lt;a href="https://github.com/werf/werf/discussions/6100"&gt;执行&lt;/a&gt;，并于 5 月正式&lt;a href="https://blog.werf.io/werf-2-nelm-replacing-helm-a11980c2bdda"&gt;宣布&lt;/a&gt;。该版本默认为所有 werf 用户启用 Nelm，包括那些坚持使用稳定发布渠道的用户。为werf 8年的人生翻开了新的篇章。&lt;/p&gt;&lt;p&gt;使用 Nelm 作为默认部署引擎，werf 可以按照自己的节奏拥抱并提供新功能。这个过程已经从最近&lt;a href="https://github.com/werf/werf/discussions/6128"&gt;引入的&lt;/a&gt;&lt;code&gt;werf.io/deploy-dependency-&amp;lt;name&amp;gt;&lt;/code&gt;注释开始，它提供了一种比以往更灵活地指定 Kubernetes 资源部署顺序的方法。&lt;/p&gt;&lt;h2 class="wp-block-heading"&gt;概括&lt;/h2&gt;&lt;p&gt;&lt;a href="https://werf.io/"&gt;werf&lt;/a&gt;从简单的脚本到将知名工具粘合到您最喜欢的 CI 系统的全面 CI/CD 解决方案，经历了漫长的旅程。 Helm 在其中发挥了至关重要的作用，是最重要的组件之一。然而，随着 werf v2.0 的发布，它现在已经被 Nelm 取代。&lt;/p&gt;&lt;p&gt; &lt;a href="https://github.com/werf/nelm"&gt;Nelm&lt;/a&gt;是由 werf 团队根据多年来使用和改进 Helm 的经验，根据众多生产用户的需求精心打造的。它与 Helm 向后兼容，可投入生产，引入了各种改进和新功能，并对未来制定了雄心勃勃的计划。&lt;/p&gt;&lt;p&gt;至于今天使用 Nelm，它可以作为库使用，您可以运行 werf 来查看它的实际情况。也非常欢迎您在其他工具中采用它。很快就会推出一个独立的 CLI 工具，让您无需 werf 即可尝试 Nelm 的功能。您可能还会对 Flux 集成感到兴奋，以便在基于 GitOps 的工作流程中受益于 Nelm。敬请关注！ &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Tue, 04 Jun 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/06/05/werf-2-0-with-nelm-and-what-it-brings-to-the-cloud-native-community/</guid></item><item><title>【Kubernetes turns 10: triumphs, trials, and the ongoing battle for security】Kubernetes 十周年：胜利、考验和持续的安全之战</title><link>https://www.cncf.io/blog/2024/06/04/kubernetes-turns-10-triumphs-trials-and-the-ongoing-battle-for-security/</link><description>&lt;p&gt;&lt;em&gt;会员帖子，作者：Sysdig 高级开发倡导者 Nigel Douglas&lt;/em&gt;&lt;/p&gt;&lt;p&gt; Kubernetes 将于本周在“ &lt;a href="https://events.linuxfoundation.org/kuber10es-birthday-bash/register/"&gt;&lt;strong&gt;KuberTENes 生日庆典&lt;/strong&gt;&lt;/a&gt;”上庆祝其成立 10 周年。  这一里程碑是纪念该平台十年历程及其所经历的重大进步的最佳时机。它还提供了一个反思 Kubernetes 在过去十年中克服的安全挑战的机会。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt; Kubernetes 和安全性概述&lt;/h3&gt;&lt;p&gt;Kubernetes 是一个开源容器编排平台，起源于 Google 内部的 Borg 项目，于 2014 年公开推出。主要强调容器编排、可扩展性和自动化，为部署和管理 Web 应用程序提供了革命性的方法。最初，安全性并不是主要关注点，重点是复杂应用程序的速度和管理。&lt;/p&gt;&lt;p&gt; Docker Swarm 等竞争项目也在争夺开源编排领域的主导地位。然而，随着 Kubernetes 成为容器编排事实上的标准，对强大安全措施的迫切需求变得显而易见。随着越来越多的开发人员及其公司希望转向云原生计算，添加更多安全支持对于支持这些组织从小规模测试环境过渡到大规模生产部署至关重要。随着 Kubernetes 的采用迅速增长，社区认识到实施强大的安全实践来防范新出现的威胁的重要性。&lt;br /&gt;&lt;/p&gt;&lt;p&gt; Kubernetes 在云原生计算的发展过程中发挥了关键作用。它提供了一种大规模管理容器的标准化方法，促进了微服务架构的发展。然而，随着 Kubernetes 的发展，安全挑战变得更加复杂。安全形势必须跟上这种快速发展，以确保 Kubernetes 上运行的应用程序免受漏洞和攻击。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt; Kubernetes 和安全问题&lt;/h3&gt;&lt;p&gt;在过去的十年中，Kubernetes 面临着一些重大的安全挑战。当 Kubernetes 于 2014 年首次发布时，它缺乏一些现在被认为必不可少的关键安全功能。值得注意的是，Kubernetes 最初并不包括基于角色的访问控制 (RBAC) 和网络策略。这些功能对于管理 Kubernetes 集群内的权限和保护网络流量至关重要。 Kubernetes 在&lt;a href="https://github.com/kubernetes/kubernetes/pull/25638"&gt;1.3 版本&lt;/a&gt;中引入了网络策略，该版本于 2016 年 7 月通过 Calico 项目的 Casey Davenport 的合并 PR 发布。 RBAC 在 2017 年 3 月发布的 Kubernetes v.1.6 中引入。&lt;br /&gt;&lt;/p&gt;&lt;p&gt; Kubernetes 也出现了一些引人注目的错误。&lt;strong&gt; &lt;/strong&gt;值得注意的漏洞包括&lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2018-1002105"&gt;CVE-2018-1002105&lt;/a&gt; ，这是一个严重缺陷，允许未经授权的用户通过 Kubernetes API 服务器升级其权限。另一个重大错误是&lt;a href="https://sysdig.com/blog/detect-cve-2020-8554-using-falco/"&gt;CVE-2020-8554&lt;/a&gt; ，它允许攻击者拦截发往其他服务的流量。在后一个示例中，最近毕业的 CNCF 项目&lt;a href="https://falco.org/"&gt;Falco&lt;/a&gt;用于&lt;a href="https://sysdig.com/blog/detect-cve-2020-8554-using-falco/"&gt;检测&lt;/a&gt;针对 LoadBalancer 和集群 IP 的中间人攻击。然而，对于支撑如此多云部署的如此引人注目的项目来说，Kubernetes 中可供攻击者利用的关键问题数量仍然很少。&lt;br /&gt;&lt;/p&gt;&lt;p&gt; Pod 安全策略 (PSP)&lt;a href="https://kubernetes.io/docs/concepts/security/pod-security-policy/"&gt;在 Kubernetes v.1.21 中被弃用，&lt;/a&gt;转而采用更灵活、更易于管理的安全解决方案。这表明转向更复杂的安全实践，因为 Kubernetes 社区已经发现 PSP 中存在严重的可用性问题。例如，其中包括用户可能意外授予比预期更广泛的权限的漏洞，用户发现很难检查每种情况下应用了哪些 PSP。&lt;/p&gt;&lt;h4 class="wp-block-heading"&gt;开发人员最佳实践&lt;/h4&gt;&lt;p&gt;那么，如何改进开发人员和 DevOps 团队的 Kubernetes 安全实践呢？首先，随着 PSP 的弃用，利用&lt;a href="https://kubernetes.io/docs/concepts/security/pod-security-admission/"&gt;Pod 安全准入&lt;/a&gt;或 OPA/Gatekeeper 等第三方解决方案来执行安全策略。您可以为 Pod 定义不同的隔离级别，这些标准可让您定义如何以清晰、一致的方式限制 Pod 的行为。&lt;br /&gt;&lt;/p&gt;&lt;p&gt;它应该作为标准实施，但在开发人员中采用 RBAC。实施基于角色的访问控制可确保用户和应用程序拥有运行所需的最低权限。与 PSP 的缺点类似，重要的是要尽可能避免使用通配符权限，避免使用&lt;a href="https://owasp.org/www-project-kubernetes-top-ten/2022/en/src/K03-overly-permissive-rbac"&gt;cluster-admin&lt;/a&gt;角色，并避免将用户添加到 system:masters 组，以减少过度访问导致安全事件的风险。由于访问凭据是攻击者获得访问权限后的第一个目标，因此减少可以访问其他资源的帐户数量可以防止横向移动。&lt;br /&gt;&lt;/p&gt;&lt;p&gt;同样，使用网络策略来控制 Pod 之间的流量，防止未经授权的通信。自 Kubernetes 项目开始以来，它定义了所谓的&lt;a href="https://youtu.be/J1AJhjvBFm8?feature=shared&amp;amp;t=400"&gt;扁平网络设计&lt;/a&gt;，所有工作负载都可以在其中自由地相互通信。由 DevOps 团队决定 Pod 之间实际需要哪些流量，而其余流量则应在隐式网络策略设计中丢弃。&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;最后，&lt;/strong&gt;应该扫描您的图像是否存在漏洞。除了管理 Pod 安全和访问控制之外，扫描容器映像是否存在漏洞或较旧的、不安全的软件组件也至关重要。使用&lt;a href="https://www.cncf.io/online-programs/trivy-open-source-scanner-for-container-images-just-download-and-run/"&gt;CNCF 项目 Trivy&lt;/a&gt;等工具，您可以在部署容器映像之前识别并缓解容器映像中的漏洞。 Trivy 执行全面扫描并提供可操作的见解，帮助您维护安全且合规的容器环境。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt; Kubernetes 安全的未来&lt;/h3&gt;&lt;p&gt;很难说 Kubernetes 项目将从此发展到哪里，但可以公平地说，从 Kubernetes 生态系统的快速发展来看，我们可以预期未来 10 年将发生重大变化。例如，CNCF 去年已经毕业了 Cilium 和&lt;a href="https://www.cncf.io/announcements/2024/02/29/cloud-native-computing-foundation-announces-falco-graduation/"&gt;Falco&lt;/a&gt;等多个项目，反映出 Kubernetes 生态系统内对高级安全解决方案的需求不断增长。 Cilium 提供先进的网络安全功能，而 Falco 提供运行时威胁检测。这些项目从 CNCF 毕业后，满足了技术监督委员会 (TOC) 的&lt;a href="https://docs.google.com/document/d/1Hkwp4qMoazqVhrODmJwDitvBI4chbsg0OBLQhRGmW3c/edit#heading=h.jgq9xpdqrg9w"&gt;尽职调查要求&lt;/a&gt;，该委员会要求对这些开源项目进行严格的安全检查，以提高 Kubernetes 生态系统的整体供应链安全性。&lt;br /&gt;&lt;/p&gt;&lt;p&gt;网络安全在过去十年中也不断发展，从阻止基本端口和 IP 活动的基本 Kubernetes 原生网络策略到 Cilium 的高级用例，包括 DNS 策略和多集群网络。 Isovalent 团队提供的大量&lt;a href="https://isovalent.com/resource-library/labs/"&gt;培训实验室&lt;/a&gt;清楚地表明了这一点，这些实验室涉及高级网关 API 用例、BGP 网络、主机防火墙、相互身份验证等主题。&lt;br /&gt;&lt;/p&gt;&lt;p&gt;从 sidecar 容器到更可靠的 DaemonSet 方法的转变改进了服务网格的实现，提高了安全性和效率。最初只是&lt;a href="https://www.cncf.io/announcements/2023/07/12/cloud-native-computing-foundation-reaffirms-istio-maturity-with-project-graduation/"&gt;Istio 服务网格&lt;/a&gt;产品，后来 Linkerd 和 Cilium 服务网格等项目的兴起，最终加快了服务网格技术的发展速度，以满足安全性和可靠性的需求。&lt;br /&gt;&lt;/p&gt;&lt;p&gt;同样，Falco 也从简单地监控 Linux 内核中发生的原始系统调用活动扩展到为 Kubernetes 审核日志和 AWS Cloudtrail 日志等源提供灵活的插件架构。 Falco 通过&lt;a href="https://github.com/falcosecurity/falcosidekick-ui"&gt;FalcoSidekick UI&lt;/a&gt;改进了可观察性，使该项目在生产环境中更容易上手，而最近推出的&lt;a href="https://sysdig.com/blog/optimizing-wireshark-in-kubernetes/"&gt;Falco Talon&lt;/a&gt;为 Kubernetes 添加了专用的威胁缓解引擎，允许基于 Kubernetes 原语自动缓解威胁，例如标记工作负载、优雅地终止 pod、执行网络政策等。&lt;/p&gt;&lt;h4 class="wp-block-heading"&gt; Kubernetes 需要 OWASP Top 10&lt;/h4&gt;&lt;p&gt; OWASP Kubernetes Top 10 由 KSOC 联合创始人兼首席技术官 Jimmy Mesta 于 2021 年发布。创建此列表是为了帮助安全从业者、系统管理员和软件开发人员优先考虑与 Kubernetes 部署相关的风险。目标是解决随着 Kubernetes 采用激增而面临的日益严峻的安全挑战，提供一个结构化框架来识别和减轻 Kubernetes 环境中的安全漏洞。&lt;/p&gt;&lt;p&gt;自 2021 年以来，Kubernetes 的&lt;a href="https://sysdig.com/blog/top-owasp-kubernetes/"&gt;OWASP Top 10 指南&lt;/a&gt;已成为安全从业者的重要资源，重点关注诸如不安全的工作负载配置、过于宽松的 RBAC 配置以及日志记录和监控不足等领域，其中大部分都在上面提到。&lt;/p&gt;&lt;h3 class="wp-block-heading"&gt;关键 Kubernetes 生态系统项目的时间表&lt;/h3&gt;&lt;p&gt;下面的时间表重点介绍了对 Kubernetes 生态系统的整体安全做出重大贡献的关键项目的介绍，增强了其在监控、安全、策略执行和网络方面的能力。&lt;/p&gt;&lt;figure class="wp-block-table"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt; 2014年&lt;/td&gt;&lt;td&gt;2015年&lt;/td&gt;&lt;td&gt;2016年&lt;/td&gt;&lt;td&gt;2017年&lt;/td&gt;&lt;td&gt;2018年&lt;/td&gt;&lt;td&gt;2019年&lt;/td&gt;&lt;td&gt;2020年&lt;/td&gt;&lt;td&gt;2021年&lt;/td&gt;&lt;td&gt;2022年&lt;/td&gt;&lt;td&gt;2023年&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;库伯内斯&lt;/td&gt;&lt;td&gt;CNI&lt;/td&gt;&lt;td&gt;法尔科&lt;/td&gt;&lt;td&gt;RBAC&lt;/td&gt;&lt;td&gt;库贝猎人&lt;/td&gt;&lt;td&gt;特里维&lt;/td&gt;&lt;td&gt;库贝装甲&lt;/td&gt;&lt;td&gt;四边形&lt;/td&gt;&lt;td&gt;法尔科特尔&lt;/td&gt;&lt;td&gt;隼爪&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;格拉法纳&lt;/td&gt;&lt;td&gt;印花布&lt;/td&gt;&lt;td&gt;使者&lt;/td&gt;&lt;td&gt;纤毛&lt;/td&gt;&lt;td&gt;库贝长凳&lt;/td&gt;&lt;td&gt;基韦尔诺&lt;/td&gt;&lt;td&gt;法尔科西踢&lt;/td&gt;&lt;td&gt;OWASP 前 10 名&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;OPA&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;库贝塞克&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 class="wp-block-heading"&gt;随着 Kubernetes 的发展，安全性也必须随之发展&lt;/h3&gt;&lt;p&gt;Kubernetes 尚未完全成熟，但在提高其安全性和更广泛的云原生安全领域所取得的进步值得称赞。该平台的发展，加上 CNCF 和社区的不断努力，确保 Kubernetes 仍然是现代应用程序的强大且安全的选择。在我们庆祝 Kubernetes 十周年之际，很明显，提高安全性的旅程仍在继续，并且对于云原生计算的未来至关重要。 &lt;/p&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Mon, 03 Jun 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/06/04/kubernetes-turns-10-triumphs-trials-and-the-ongoing-battle-for-security/</guid></item><item><title>【Tackling GPU underutilization in Kubernetes runtimes】解决 Kubernetes 运行时中 GPU 利用率不足的问题</title><link>https://www.cncf.io/blog/2024/06/03/tackling-gpu-underutilization-in-kubernetes-runtimes/</link><description>&lt;p&gt;&lt;em&gt;会员帖子最初由 Keegan McCallum 发表在&lt;a href="https://superorbital.io/blog/gpu-kubernetes-underutilization/"&gt;SuperOrbital 的博客&lt;/a&gt;上&lt;/em&gt;&lt;/p&gt;&lt;h2 class="wp-block-heading" id="introduction"&gt;介绍&lt;/h2&gt;&lt;p&gt;在本博客文章系列的前几部分中，我们探讨了使用 NVIDIA 设备插件管理 Kubernetes 集群中的 GPU 资源的基础知识（&lt;a href="https://superorbital.io/blog/gpu-kubernetes-nvidia-device-plugin/"&gt;第 1 部分&lt;/a&gt;），并深入研究了高级配置和故障排除技术（&lt;a href="https://superorbital.io/blog/gpu-kubernetes-nvidia-advanced-troubleshooting/"&gt;第 2 部分&lt;/a&gt;）。我们强调了 Kubernetes 环境中高效 GPU 管理对于支持大规模机器学习工作负载的重要性。&lt;/p&gt;&lt;p&gt;在最后一部分中，我们将解决 Kubernetes 中 GPU 利用率不足的问题，并讨论一些旨在优化资源使用和成本效益的创新项目和解决方案。通过最大限度地提高 GPU 利用率，组织可以充分利用每个 GPU，从而释放其 GPU 投资的全部潜力。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="the-problem-of-gpu-underutilization-in-kubernetes"&gt; Kubernetes 中 GPU 利用率不足的问题&lt;/h2&gt;&lt;p&gt;阅读本系列后，您已经在集群上运行了&lt;a href="https://superorbital.io/blog/gpu-kubernetes-nvidia-device-plugin/"&gt;&lt;code&gt;nvidia-device-plugin&lt;/code&gt;&lt;/a&gt; ，并且已经启动了一些 GPU 节点。您的代码正在识别&lt;a href="https://developer.nvidia.com/cuda-gpus"&gt;CUDA 设备&lt;/a&gt;并且正在运行，所以一切都很好，对吧？嗯，不完全是。实际上，在任何地方&lt;em&gt;使用&lt;/em&gt;接近 100% 的 GPU，尤其是在处理不同的异构工作负载时，这并非易事（&lt;a href="https://openai.com/research/ai-and-compute"&gt;事实上，OpenAI 估计只有大约 33% 的使用率&lt;/a&gt;）。考虑到 GPU 的成本极高，这也是一个需要解决的重要问题，如果您不考虑利用率，那么您将浪费大量资金。&lt;/p&gt;&lt;p&gt;好吧，那么为什么 100% 使用 GPU 这么难呢？有几个因素：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;静态分区&lt;/strong&gt;：GPU 被静态分区为固定大小的块，这可能与不同工作负载的不同资源需求不一致。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;工作负载可变性&lt;/strong&gt;：工作负载的动态特性以及资源需求的波动，可能会导致 GPU 未充分利用时出现利用率不足的情况。基本上，即使每个工作负载完全适合静态分区，也可能有一个 GPU 被部分利用，这在实际工作负载中会加剧。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;天真的调度&lt;/strong&gt;：如果你天真地依赖默认的 Kubernetes 调度程序配置，你可能会遇到&lt;a href="https://kubernetes.io/docs/concepts/scheduling-eviction/resource-bin-packing/"&gt;bin-packing&lt;/a&gt;问题。想象一下这样的场景：有 10 个节点，每个节点有 8 个 GPU，总共 80 个 GPU。如果没有指定亲和性或污点，调度程序将随机分配 GPU，从而导致每个节点上可能有少量未使用的 GPU 的情况。如果您需要使用 8 个 GPU 来调度单个 pod，即使有 10 个或更多 GPU 处于空闲状态，您也可能无法做到这一点。从 Kubernetes 1.24 开始，您可以使用 MostAllocation 策略来解决这个问题。将策略设置为&lt;code&gt;MostAllocated&lt;/code&gt;会根据资源利用率对节点进行评分，优先考虑分配较高的节点。您可以为每种资源类型设置权重，以控制其对最终分数的影响。仅考虑 GPU 的示例配置如下所示：&lt;/li&gt;&lt;/ol&gt;&lt;pre class="wp-block-code"&gt; &lt;code class="language-javascript" lang="javascript"&gt;&lt;strong&gt;apiVersion&lt;/strong&gt; : kubescheduler.config.k8s.io/v1beta3 &lt;strong&gt;kind&lt;/strong&gt; : KubeSchedulerConfiguration &lt;strong&gt;profiles&lt;/strong&gt; : - &lt;strong&gt;pluginConfig&lt;/strong&gt; : - &lt;strong&gt;name&lt;/strong&gt; : NodeResourcesFit args: scoringStrategy: type: MostAllocated resources: - &lt;strong&gt;name&lt;/strong&gt; : nvidia.com/gpu weight: 1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在我们已经确定了问题及其可能发生的原因，第一步是设置监控以在问题发生时获得一些可见性。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="monitoring-gpu-utilization-using---"&gt;使用&lt;code&gt;dcgm-exporter&lt;/code&gt;和&lt;code&gt;prometheus&lt;/code&gt;监控 GPU 利用率&lt;/h2&gt;&lt;p&gt;我们在（&lt;a href="https://superorbital.io/blog/gpu-kubernetes-nvidia-advanced-troubleshooting/"&gt;第 2 部分&lt;/a&gt;）中介绍了使用&lt;code&gt;dcgm-exporter&lt;/code&gt;和&lt;code&gt;prometheus&lt;/code&gt;来监控 GPU 运行状况，如果您还没有阅读过，值得一看。现在，我们来谈谈如何监控 GPU 利用率，因为它实际上没有很好的文档记录。 &lt;code&gt;dcgm-exporter&lt;/code&gt;导出&lt;a href="https://docs.nvidia.com/datacenter/dcgm/1.7/dcgm-api/group__dcgmFieldIdentifiers.html"&gt;&lt;strong&gt;大量&lt;/strong&gt;指标&lt;/a&gt;，并且很难准确了解您正在寻找哪一个。乍一看，将&lt;a href="https://docs.nvidia.com/datacenter/dcgm/1.7/dcgm-api/group__dcgmFieldIdentifiers.html#group__dcgmFieldIdentifiers_1gfbfcf61a6530f90fe230f2084c4b1641"&gt;DCGM_FI_DEV_GPU_UTIL&lt;/a&gt;作为监控 GPU 利用率的直接方法是可以理解的，因为它被记录为“gpu 利用率”。但是，&lt;a href="https://github.com/NVIDIA/DCGM/issues/64#issuecomment-1400811885"&gt;你就错了&lt;/a&gt;。 &lt;code&gt;DCGM_FI_DEV_GPU_UTIL&lt;/code&gt;&lt;a href="https://github.com/NVIDIA/DCGM/issues/80#issuecomment-1537603016"&gt;已过时，有一些限制并且与 MIG 不兼容&lt;/a&gt;。 &lt;code&gt;DCGM_FI_PROF_GR_ENGINE_ACTIVE&lt;/code&gt;大致相当， &lt;a href="https://docs.nvidia.com/datacenter/cloud-native/gpu-telemetry/latest/dcgm-exporter.html#multi-instance-gpu-mig-support"&gt;支持 MIG&lt;/a&gt; ，精度更高。&lt;/p&gt;&lt;p&gt; &lt;code&gt;DCGM_FI_PROF_GR_ENGINE_ACTIVE&lt;/code&gt;将使您深入了解是否有内核在 GPU 的任何流式多处理器 (SM) 上运行，这是了解整个 GPU 是否正在使用的良好开端。您可能想更深入地了解，特别是如果您正在部署自己的 CUDA 代码并希望尽可能多地利用 GPU 的性能（&lt;a href="https://developer.nvidia.com/blog/cuda-refresher-cuda-programming-model/"&gt;这篇文章&lt;/a&gt;是关于 CUDA 编程模型的精彩入门文章）。 &lt;code&gt;PROF_SM_ACTIVE&lt;/code&gt;将告诉您 GPU 上处于活动状态的 SM 的比例，让您可以较低级别地了解给定 GPU 上实际 SM 的利用率。如果您足够勇敢，可以更进一步，使用&lt;code&gt;PROF_SM_OCCUPANCY&lt;/code&gt;来获取给定 SM 上实际运行的&lt;a href="https://en.wikipedia.org/wiki/Thread_block_(CUDA_programming)#Warps"&gt;扭曲&lt;/a&gt;数量相对于理论最大值（每个 SM 2048）的比率。如果这让您目光呆滞，请从&lt;code&gt;DCGM_FI_PROF_GR_ENGINE_ACTIVE&lt;/code&gt;开始，并在需要时进一步深入研究。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="projects-and-solutions-for-improving-gpu-utilization"&gt;提高 GPU 利用率的项目和解决方案&lt;/h2&gt;&lt;p&gt;我们现在意识到 GPU 利用率不足，并且可以了解集群的问题。让我们快速浏览一些可以帮助我们最大限度提高 GPU 利用率的项目。我要指出的是，这个列表相当稀疏，但是正在出现以下解决方案来解决这个代价高昂的问题。&lt;/p&gt;&lt;h3 class="wp-block-heading" id="nvidia-dynamic-resource-allocation-dra"&gt; &lt;a href="https://github.com/NVIDIA/k8s-dra-driver"&gt;Nvidia 动态资源分配 (DRA)&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;首先，DRA 是 NVIDIA 的解决方案，目前正在积极开发中，尚未适合量产。我相信这将是一个一旦准备好就可以使用的&lt;strong&gt;项目&lt;/strong&gt;，但还不是现在。顾名思义，DRA 旨在通过基于启动的工作负载使用 MIG 和/或 MPS 动态分区 GPU 来解决静态分区问题。采用与之前工作略有不同的方法，配置是根据持久卷声明 (PVC) 而不是 pod 资源请求/限制进行建模的。您首先创建资源声明，然后从工作负载中引用这些声明以在给定的 Pod 中使用它们。对于基于MPS的分区，配置如下：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class="language-javascript" lang="javascript"&gt;--- &lt;strong&gt;apiVersion&lt;/strong&gt; : resource.k8s.io/v1alpha2 &lt;strong&gt;kind&lt;/strong&gt; : ResourceClaim &lt;strong&gt;metadata&lt;/strong&gt; : &lt;strong&gt;namespace&lt;/strong&gt; : sharing-demo &lt;strong&gt;name&lt;/strong&gt; : gpu-mps-sharing &lt;strong&gt;spec&lt;/strong&gt; : &lt;strong&gt;resourceClassName&lt;/strong&gt; : gpu.nvidia.com &lt;strong&gt;parametersRef&lt;/strong&gt; : &lt;strong&gt;apiGroup&lt;/strong&gt; : gpu.resource.nvidia.com &lt;strong&gt;kind&lt;/strong&gt; : GpuClaimParameters &lt;strong&gt;name&lt;/strong&gt; : gpu-mps-sharing --- &lt;strong&gt;apiVersion&lt;/strong&gt; : gpu.resource.nvidia.com/v1alpha1 &lt;strong&gt;kind&lt;/strong&gt; : GpuClaimParameters &lt;strong&gt;metadata&lt;/strong&gt; : &lt;strong&gt;namespace&lt;/strong&gt; : sharing-demo &lt;strong&gt;name&lt;/strong&gt; : gpu-mps-sharing &lt;strong&gt;spec&lt;/strong&gt; : &lt;strong&gt;sharing&lt;/strong&gt; : &lt;strong&gt;strategy&lt;/strong&gt; : MPS &lt;strong&gt;mpsConfig&lt;/strong&gt; : &lt;strong&gt;defaultActiveThreadPercentage&lt;/strong&gt; : 50 &lt;strong&gt;defaultPinnedDeviceMemoryLimit&lt;/strong&gt; : 10Gi &lt;em&gt;# defaultPerDevicePinnedMemoryLimit:&lt;/em&gt; &lt;em&gt;# 0: 5Gi&lt;/em&gt; --- &lt;strong&gt;apiVersion&lt;/strong&gt; : v1 &lt;strong&gt;kind&lt;/strong&gt; : Pod &lt;strong&gt;metadata&lt;/strong&gt; : &lt;strong&gt;namespace&lt;/strong&gt; : sharing-demo &lt;strong&gt;name&lt;/strong&gt; : pod1 &lt;strong&gt;labels&lt;/strong&gt; : &lt;strong&gt;app&lt;/strong&gt; : pod &lt;strong&gt;spec&lt;/strong&gt; : &lt;strong&gt;containers&lt;/strong&gt; : - &lt;strong&gt;name&lt;/strong&gt; : ctr &lt;strong&gt;image&lt;/strong&gt; : nvcr.io/nvidia/k8s/cuda-sample:nbody-cuda11.7.1-ubuntu18.04 &lt;strong&gt;args&lt;/strong&gt; : [ &lt;em&gt;&amp;quot;--benchmark&amp;quot;&lt;/em&gt; , &lt;em&gt;&amp;quot;--numbodies=4226000&amp;quot;&lt;/em&gt; ] &lt;strong&gt;resources&lt;/strong&gt; : &lt;strong&gt;claims&lt;/strong&gt; : - &lt;strong&gt;name&lt;/strong&gt; : gpu &lt;strong&gt;resourceClaims&lt;/strong&gt; : - &lt;strong&gt;name&lt;/strong&gt; : gpu &lt;strong&gt;source&lt;/strong&gt; : &lt;strong&gt;resourceClaimName&lt;/strong&gt; : gpu-mps-sharing&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;您还可以查看&lt;a href="https://github.com/NVIDIA/k8s-dra-driver/tree/main/demo/specs/mig%2Bmps"&gt;此示例&lt;/a&gt;，看看使用 MIG 和 MPS 会是什么样子。请密切关注这个项目，因为很快有一天它将成为您利用率不足问题的答案。&lt;/p&gt;&lt;h3 class="wp-block-heading" id="nebuly-os-nos"&gt; &lt;a href="https://github.com/nebuly-ai/nos"&gt;Nebuly 操作系统（个）&lt;/a&gt;&lt;/h3&gt;&lt;p&gt; ...在那之前，Nebuly 操作系统可以拯救世界！它有相反的问题：它已准备好投入生产并积极使用，但从存储库和&lt;a href="https://docs.nebuly.com/welcome/overview"&gt;文档&lt;/a&gt;（现在指向一个完全不同的项目）的外观来看，它正在进入维护模式，而其背后的公司正在发生变化。幸运的是，文档&lt;a href="https://github.com/nebuly-ai/nos/blob/main/docs/en/docs/overview.md"&gt;仍然可以通过 GitHub 获得&lt;/a&gt;，并且该项目可以填补空白，同时我们耐心等待 DRA 为黄金时间做好准备。&lt;/p&gt;&lt;p&gt; Nebuly OS采用了更直观的方式进行&lt;a href="https://github.com/nebuly-ai/nos/blob/main/docs/en/docs/dynamic-gpu-partitioning/overview.md"&gt;GPU动态分区&lt;/a&gt;，根据资源对GPU进行分区。用于请求/限制的 yaml 键包含所需的内存量，而不是像典型请求/限制的工作方式那样引入第二个键。与 MPS 一起使用还有一些要求。对于 MPS，配置如下：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class="language-javascript" lang="javascript"&gt;&lt;strong&gt;apiVersion&lt;/strong&gt; : v1 &lt;strong&gt;kind&lt;/strong&gt; : Pod &lt;strong&gt;metadata&lt;/strong&gt; : &lt;strong&gt;name&lt;/strong&gt; : mps-partitioning-example &lt;strong&gt;spec&lt;/strong&gt; : &lt;strong&gt;hostIPC&lt;/strong&gt; : &lt;strong&gt;true&lt;/strong&gt; &lt;em&gt;# NOTE: for MPS hostIPC must be set to true&lt;/em&gt; &lt;strong&gt;securityContext&lt;/strong&gt; : &lt;strong&gt;runAsUser&lt;/strong&gt; : 1000 &lt;em&gt;# NOTE: for MPS containers must run as the same user as the MPS Server&lt;/em&gt; &lt;strong&gt;containers&lt;/strong&gt; : - &lt;strong&gt;name&lt;/strong&gt; : sleepy &lt;strong&gt;image&lt;/strong&gt; : &lt;em&gt;&amp;quot;busybox:latest&amp;quot;&lt;/em&gt; &lt;strong&gt;command&lt;/strong&gt; : [ &lt;em&gt;&amp;quot;sleep&amp;quot;&lt;/em&gt; , &lt;em&gt;&amp;quot;120&amp;quot;&lt;/em&gt; ] &lt;strong&gt;resources&lt;/strong&gt; : &lt;strong&gt;limits&lt;/strong&gt; : &lt;strong&gt;nvidia.com/gpu-10gb&lt;/strong&gt; : 1 &lt;em&gt;# this is specifying the part of the GPU with 10 GB of memory&lt;/em&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; MIG 更简单一些：&lt;/p&gt;&lt;pre class="wp-block-code"&gt; &lt;code class="language-javascript" lang="javascript"&gt;&lt;strong&gt;apiVersion&lt;/strong&gt; : v1 &lt;strong&gt;kind&lt;/strong&gt; : Pod &lt;strong&gt;metadata&lt;/strong&gt; : &lt;strong&gt;name&lt;/strong&gt; : mig-partitioning-example &lt;strong&gt;spec&lt;/strong&gt; : &lt;strong&gt;containers&lt;/strong&gt; : - &lt;strong&gt;name&lt;/strong&gt; : sleepy &lt;strong&gt;image&lt;/strong&gt; : &lt;em&gt;&amp;quot;busybox:latest&amp;quot;&lt;/em&gt; &lt;strong&gt;command&lt;/strong&gt; : [ &lt;em&gt;&amp;quot;sleep&amp;quot;&lt;/em&gt; , &lt;em&gt;&amp;quot;120&amp;quot;&lt;/em&gt; ] &lt;strong&gt;resources&lt;/strong&gt; : &lt;strong&gt;limits&lt;/strong&gt; : &lt;strong&gt;nvidia.com/mig-1g.10gb&lt;/strong&gt; : 1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;同样，该项目处于维护模式，但已做好生产准备。因此，如果您&lt;strong&gt;现在&lt;/strong&gt;需要动态 GPU 分区的解决方案，那么这就是您的工具。只需准备好在 DRA 准备好迎接黄金时段后迁移到 DRA。&lt;/p&gt;&lt;h2 class="wp-block-heading" id="conclusion"&gt;结论&lt;/h2&gt;&lt;p&gt;在这一系列博客文章中，我们探讨了 Kubernetes 环境中高效 GPU 管理的重要性。从使用 NVIDIA 设备插件的基础知识到高级配置和故障排除技术，我们涵盖了 GPU 资源管理的关键方面。&lt;/p&gt;&lt;p&gt;在最后一部分中，我们重点讨论了 GPU 利用率不足的关键问题，并讨论了旨在应对这一挑战的技术和解决方案。通过利用&lt;code&gt;dcgm-exporter&lt;/code&gt;和&lt;code&gt;prometheus&lt;/code&gt;等工具来监控 GPU 利用率并探索 DRA 和 Nebuly OS 等解决方案，组织可以优化其 GPU 资源并实现更好的性能和成本效益。&lt;/p&gt;&lt;p&gt;随着 GPU 加速工作负载的采用不断增长，组织必须及时了解 GPU 管理技术的最新发展和进步。通过采用创新解决方案和最佳实践，组织可以充分发挥 GPU 投资的潜力，推动人工智能计划取得成功。&lt;/p&gt;&lt;h3 class="wp-block-heading" id="further-reading-and-resources"&gt;进一步阅读和资源&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://developer.nvidia.com/blog/improving-gpu-utilization-in-kubernetes"&gt;Nvidia：提高 Kubernetes 中的 GPU 利用率&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://developer.nvidia.com/dcgm"&gt;英伟达：DCGM&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;&lt;div class="wp-block-spacer is-style-80-120" style="height: 80px;"&gt;&lt;/div&gt;</description><pubDate>Sun, 02 Jun 2024 16:00:00 GMT</pubDate><guid isPermaLink="true">https://www.cncf.io/blog/2024/06/03/tackling-gpu-underutilization-in-kubernetes-runtimes/</guid></item></channel></rss>