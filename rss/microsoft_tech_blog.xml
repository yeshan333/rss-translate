<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>微软开发者博客</title><link>https://devblogs.microsoft.com/</link><description>获取来自 Microsoft 的最新信息、见解、公告和新闻。</description><lastBuildDate>Tue, 18 Jun 2024 03:05:40 GMT</lastBuildDate><generator>rfeed v1.1.1</generator><docs>https://github.com/svpino/rfeed/blob/master/README.md</docs><item><title>【Step by Step guide to develop AI Multi-Agent system using Microsoft Semantic Kernel and GPT-4o】</title><link>https://devblogs.microsoft.com/semantic-kernel/step-by-step-guide-to-develop-ai-multi-agent-system-using-microsoft-semantic-kernel-and-gpt-4o</link><description>今天，我们要重点介绍最近在这里发表的一篇 Medium 文章：使用 Microsoft 语义内核和 GPT-4o 开发 AI 多代理系统的分步指南 |通过阿克谢·科卡内 | 2024 年 6 月 |我们在下面摘录了一些内容，</description><pubDate>Mon, 17 Jun 2024 17:37:11 GMT</pubDate><guid isPermaLink="true">https://devblogs.microsoft.com/semantic-kernel/step-by-step-guide-to-develop-ai-multi-agent-system-using-microsoft-semantic-kernel-and-gpt-4o</guid></item><item><title>【Refactor your code with default lambda parameters】</title><link>https://devblogs.microsoft.com/dotnet/refactor-your-code-with-default-lambda-parameters</link><description>探索使用默认 lambda 参数（C# 12 中的一项新功能）重构 C# 代码的机会。</description><pubDate>Mon, 17 Jun 2024 17:05:00 GMT</pubDate><guid isPermaLink="true">https://devblogs.microsoft.com/dotnet/refactor-your-code-with-default-lambda-parameters</guid></item><item><title>【Microsoft Teams webinar integration with HubSpot marketing automation】</title><link>https://devblogs.microsoft.com/microsoft365dev/microsoft-teams-webinar-integration-with-hubspot-marketing-automation</link><description>了解为什么 HubSpot 与 Microsoft Teams 的集成对于 Teams 网络研讨会客户而言是一项重大的新进步。</description><pubDate>Mon, 17 Jun 2024 16:58:08 GMT</pubDate><guid isPermaLink="true">https://devblogs.microsoft.com/microsoft365dev/microsoft-teams-webinar-integration-with-hubspot-marketing-automation</guid></item><item><title>【Bosch widely adopts Visual Studio for their C++ remote Linux projects】</title><link>https://devblogs.microsoft.com/visualstudio/bosch-widely-adopts-visual-studio-for-their-c-remote-linux-projects</link><description>博世安全摄像头团队正在为其团队寻求统一的开发设置，最近重新评估了 Visual Studio 作为其 C++ 项目和远程 Linux 开发需求的解决方案。他们使用 Visual Studio 2022 的经验具有与其工作流程相关的显着改进，例如无缝 GDB 集成和 CMake/WSL 集成。</description><pubDate>Mon, 17 Jun 2024 16:00:16 GMT</pubDate><guid isPermaLink="true">https://devblogs.microsoft.com/visualstudio/bosch-widely-adopts-visual-studio-for-their-c-remote-linux-projects</guid></item><item><title>【How can I view the list of symbols available in a library?】</title><link>https://devblogs.microsoft.com/oldnewthing/20240617-00/?p=109905</link><description>一个工具隐藏在另一个工具内。</description><pubDate>Mon, 17 Jun 2024 14:00:00 GMT</pubDate><guid isPermaLink="true">https://devblogs.microsoft.com/oldnewthing/20240617-00/?p=109905</guid></item><item><title>【Lock-free reference-counting a TLS slot using atomics, part 3】</title><link>https://devblogs.microsoft.com/oldnewthing/20240614-00/?p=109902</link><description>同时跟踪两件事。</description><pubDate>Fri, 14 Jun 2024 14:00:00 GMT</pubDate><guid isPermaLink="true">https://devblogs.microsoft.com/oldnewthing/20240614-00/?p=109902</guid></item><item><title>【C#12新功能合集三：使用任意类型别名重构C#代码】</title><link>https://devblogs.microsoft.com/dotnet-ch/c12%e6%96%b0%e5%8a%9f%e8%83%bd%e5%90%88%e9%9b%86%e4%b8%89%ef%bc%9a%e4%bd%bf%e7%94%a8%e4%bb%bb%e6%84%8f%e7%b1%bb%e5%9e%8b%e7%9a%84%e5%88%ab%e5%90%8d%e9%87%8d%e6%9e%84c%e4%bb%a3%e7%a0%81</link><description>本文翻译于David Pine的这篇文章: Refactor your code using alias any type。 这篇文章是四篇系列文章中的第三篇，主要探讨C# 12的各种功能。在这篇文章中，我们将深入探讨“别名任何类型”功能，该功能允许您使用 using 指令为任何类型创建别名。这个系列已经初具规模：  使用主构造函数重构 C# 代码  使用集合表达式重构 C# 代码  使用任意类型别名重构 C# 代码（本篇文章）  重构 C# 代码以使用默认 lambda 参数  所有这些功能都将继续我们的旅程，使我们的代码更具可读性和可维护性，这些被认为是开发人员应该知道的“日常 C#”功能。让我们深入了解吧！  别名任意类型*️⃣  C# 12 引入了使用 using 指令为任意类型添加别名的功能。此功能允许您指定映射到其他类型的别名。这包括元组类型、指针类型、数组类型，甚至非开放泛型类型，所有这些类型都可以在您的代码中使用。此功能在以下场景特别有用：  当使用长或复杂的类型名称时。  当消除类型歧义并解决潜在的命名冲突时。  当定义要在程序集中共享的值元组类型时。  当希望通过使用更具描述性的名称来增加代码的清晰度时。  官方 C# 文档提供了很多有关如何使用此功能的示例，但我并不想在此重复这些示例，而是决定编写一个演示应用程序来示范该功能的各个方面。 可空引用类型  此功能支持大多数类型，但可空引用类型除外。也就是说，您无法为可空引用类型设置别名， C# 编译器会报告错误 CS9132：使用的别名不能是可空引用类型。以下内容摘自功能说明，以帮助澄清这一点：  // This is not legal.</description><pubDate>Fri, 14 Jun 2024 08:44:56 GMT</pubDate><guid isPermaLink="true">https://devblogs.microsoft.com/dotnet-ch/c12%e6%96%b0%e5%8a%9f%e8%83%bd%e5%90%88%e9%9b%86%e4%b8%89%ef%bc%9a%e4%bd%bf%e7%94%a8%e4%bb%bb%e6%84%8f%e7%b1%bb%e5%9e%8b%e7%9a%84%e5%88%ab%e5%90%8d%e9%87%8d%e6%9e%84c%e4%bb%a3%e7%a0%81</guid></item><item><title>【Next-Level Boilerplate: An Inside Look Into Our .Net Clean Architecture Repo】</title><link>https://devblogs.microsoft.com/ise/next-level-clean-architecture-boilerplate</link><description>在本文中，我们将深入了解干净的架构样板以及它如何帮助快速启动我们的项目。</description><pubDate>Fri, 14 Jun 2024 07:00:00 GMT</pubDate><guid isPermaLink="true">https://devblogs.microsoft.com/ise/next-level-clean-architecture-boilerplate</guid></item><item><title>【Announcing the public preview of the Microsoft AI Chat Protocol library for JavaScript】</title><link>https://devblogs.microsoft.com/azure-sdk/announcing-the-public-preview-of-the-microsoft-ai-chat-protocol-library-for-javascript</link><description>这篇文章详细介绍了 AI 聊天协议库的公共预览版，允许用户使用 JavaScript 构建强大的流式 AI 前端。</description><pubDate>Thu, 13 Jun 2024 19:26:01 GMT</pubDate><guid isPermaLink="true">https://devblogs.microsoft.com/azure-sdk/announcing-the-public-preview-of-the-microsoft-ai-chat-protocol-library-for-javascript</guid></item><item><title>【The present and future of Copilot extensibility: Top 10 takeaways from Build 2024】</title><link>https://devblogs.microsoft.com/microsoft365dev/the-present-and-future-of-copilot-extensibility-top-10-takeaways-from-build-2024</link><description>深入了解 Build 发布的重要公告，发现扩展、定制和增强 Copilot 功能的新途径。</description><pubDate>Thu, 13 Jun 2024 18:47:18 GMT</pubDate><guid isPermaLink="true">https://devblogs.microsoft.com/microsoft365dev/the-present-and-future-of-copilot-extensibility-top-10-takeaways-from-build-2024</guid></item></channel></rss>