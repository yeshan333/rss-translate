<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Grafana Labs 上的 Grafana Labs 博客</title><link>https://grafana.com/blog/</link><description>Grafana Labs 上的 Grafana Labs 博客中的最​​新内容</description><lastBuildDate>Tue, 14 May 2024 16:04:48 GMT</lastBuildDate><generator>rfeed v1.1.1</generator><docs>https://github.com/svpino/rfeed/blob/master/README.md</docs><item><title>【Grafana Enterprise data source plugins: A brief guide to what they are and how to get started】Grafana Enterprise 数据源插件：它们是什么以及如何开始的简要指南</title><link>https://grafana.com/blog/2024/05/13/grafana-enterprise-data-source-plugins-a-brief-guide-to-what-they-are-and-how-to-get-started/</link><description>&lt;p&gt;Grafana 最强大的功能之一是能够统一数据并从中获取价值，无论数据位于何处。这是因为我们完全致力于将 Grafana 打造成一个开放、可组合且可扩展的可观测平台，供全球超过 2000 万用户使用。&lt;/p&gt;&lt;p&gt;但我们究竟如何兑现开放性和可扩展性的承诺呢？ Grafana 数据源插件发挥着重要作用。&lt;/p&gt;&lt;p&gt;数据源插件允许您从 Grafana 内部连接到外部系统，因此您可以使用您已经了解和喜爱的 Grafana 仪表板可视化来自各种来源的数据。能够在集中位置查看所有指标、日志和跟踪（无需将数据提取或迁移到公共后端）意味着您可以关联数据、快速识别根本原因并缩短 MTTR。&lt;/p&gt;&lt;p&gt;我们拥有广泛的 Grafana 数据源插件生态系统——这对我们的社区来说是个好消息，但也可能会引发一些关于使用哪种类型的插件的问题。在这篇博文中，我们将专门探讨&lt;strong&gt;Grafana Enterprise 数据源插件&lt;/strong&gt;，包括它们是什么、定价原理等等，以便您今天就可以开始使用它们。&lt;/p&gt;&lt;h2 id="what-is-a-grafana-enterprise-data-source-plugin"&gt;什么是 Grafana Enterprise 数据源插件？&lt;/h2&gt;&lt;p&gt;我们的&lt;a href="https://grafana.com/grafana/plugins/data-source-plugins/"&gt;目录&lt;/a&gt;中有 150 多个数据源。其中许多是由我们的社区成员创建的，许多是由我们的合作伙伴创建的，还有 60 多个是由 Grafana Labs 构建和维护的。大多数数据源都可以在 Grafana OSS 中免费使用。&lt;/p&gt;&lt;p&gt; Grafana Enterprise 数据源由 Grafana Labs 构建和维护，仅在 Grafana Enterprise 和 Grafana Cloud 中提供，包括我们慷慨的永久免费套餐。这些数据源通常连接到专有工具或平台，例如 Splunk、Dynatrace 或 Databricks。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link captioned" href="https://grafana.com/media/blog/grafana-enterprise-plugins-guide/grafana-enterprise-plugin-guide-databricks-screenshot.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="*A Grafana dashboard for the Databricks data source.*" class="lazyload mb-0" title="*Databricks 数据源的 Grafana 仪表板。*" /&gt; &lt;noscript&gt;&lt;img alt="*A Grafana dashboard for the Databricks data source.*" src="https://grafana.com/media/blog/grafana-enterprise-plugins-guide/grafana-enterprise-plugin-guide-databricks-screenshot.png" title="*Databricks 数据源的 Grafana 仪表板。*" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;figcaption class="w-100p caption mb-1 text-gray-13 "&gt; &lt;em&gt;Databricks 数据源的 Grafana 仪表板。&lt;/em&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;企业数据源提供一流的最终用户体验（包括点击式查询构建和数据过滤），使您能够比以往更快地获取所需的准确数据。它们让您可以通过单一管理平台对数百个不同的数据源进行查询、可视化和警报，从而增强您的整体可观察性策略。例如，您可以关联来自 Datadog 的基础设施运行状况指标、来自 Splunk 的日志、来自 Dynatrace 的应用程序性能数据，甚至来自 ServiceNow 的事件票据，以简化故障排除流程。&lt;/p&gt;&lt;p&gt;另外，由于所有 Grafana Enterprise 数据源插件均由 Grafana Labs 团队维护和支持，因此它们消除了内部构建和维护自己的插件的开销。&lt;/p&gt;&lt;h2 id="which-enterprise-data-source-plugins-are-currently-available"&gt;目前有哪些企业数据源插件可用？&lt;/h2&gt;&lt;p&gt; Grafana Labs 目前提供 20 多个企业数据源 - 我们正在不断努力扩展我们的产品线，以便您可以连接到并可视化所有常用数据源。&lt;/p&gt;&lt;p&gt;我们当前的企业数据源插件列表包括：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://grafana.com/solutions/appdynamics/visualize/?pg=blog&amp;amp;plcmt=body-txt"&gt;应用动态&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://grafana.com/solutions/databricks/visualize/"&gt;数据块&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://grafana.com/solutions/datadog/visualize/?pg=blog&amp;amp;plcmt=body-txt"&gt;数据狗&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://grafana.com/solutions/dynatrace/visualize/?pg=blog&amp;amp;plcmt=body-txt"&gt;Dynatrace&lt;/a&gt;&lt;/li&gt;&lt;li&gt; &lt;a href="https://grafana.com/solutions/mongodb/visualize/?pg=blog&amp;amp;plcmt=body-txt"&gt;MongoDB&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://grafana.com/solutions/new-relic/visualize/?pg=blog&amp;amp;plcmt=body-txt"&gt;新遗物&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://grafana.com/solutions/oracle-database/visualize/?pg=blog&amp;amp;plcmt=body-txt"&gt;甲骨文&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://grafana.com/solutions/sap-hana/visualize/"&gt;SAP HANA&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://grafana.com/solutions/servicenow/visualize/?pg=blog&amp;amp;plcmt=body-txt"&gt;立即服务&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://grafana.com/solutions/snowflake/visualize/?pg=blog&amp;amp;plcmt=body-txt"&gt;雪花&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://grafana.com/solutions/splunk/visualize/?pg=blog&amp;amp;plcmt=body-txt"&gt;斯普朗克&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://grafana.com/solutions/wavefront/visualize/?pg=blog&amp;amp;plcmt=body-txt"&gt;波前&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;……还有更多。要查看 Grafana Enterprise 数据源的完整列表，请查看我们的&lt;a href="https://grafana.com/grafana/plugins/all-plugins/?enterprise=1"&gt;插件页面&lt;/a&gt;。&lt;/p&gt;&lt;h2 id="how-much-do-grafana-enterprise-plugins-cost"&gt; Grafana Enterprise 插件的费用是多少？&lt;/h2&gt;&lt;p&gt;如前所述，Grafana Enterprise 插件可供 Grafana Enterprise 和 Grafana Cloud 的用户使用。&lt;/p&gt;&lt;p&gt;作为 Grafana Enterprise 许可证的一部分，Grafana Enterprise 用户可以访问所有 Enterprise 插件。要了解有关 Grafana Enterprise 定价和许可模式的更多信息，请&lt;a href="https://grafana.com/contact?pg=pricing&amp;amp;plcmt=self-managed"&gt;联系我们的团队&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;对于 Grafana Cloud，企业插件访问和定价因级别而异：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;永久免费云层：&lt;/strong&gt;包含 3 个活跃用户免费访问企业插件的权限。&lt;/li&gt;&lt;li&gt; &lt;strong&gt;Cloud Pro 即用即付层级：&lt;/strong&gt;企业插件在 Cloud Pro 中被视为付费附加组件。如果您在 Cloud Pro 中启用企业插件，您仍然可以免费为最多 3 个活跃用户访问企业插件，除此之外，每个活跃用户每月只需 55 美元。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;云高级层：&lt;/strong&gt;最多 5 个活跃用户可以访问企业插件。然后，每个额外用户的费用为 55 美元。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;em&gt;请参阅&lt;a href="https://grafana.com/pricing/"&gt;我们的定价页面&lt;/a&gt;了解最新的计划和定价详细信息。&lt;/em&gt;&lt;/p&gt;&lt;p&gt;同样，所有企业数据源插件均由 Grafana Labs 团队构建、维护和支持 - 这意味着与在内部构建和管理自己的插件相比，TCO 显着降低。&lt;/p&gt;&lt;h2 id="what-should-i-expect-in-terms-of-installation-and-configuration"&gt;在安装和配置方面我应该期待什么？&lt;/h2&gt;&lt;p&gt;使用 Grafana Enterprise 数据源的启动和运行非常容易。&lt;/p&gt;&lt;p&gt;事实上，在 Grafana Cloud 实例上，只需一键安装即可开始安装。安装插件后，您可以通过转至&lt;strong&gt;Connections &amp;gt; Datasources &amp;gt; Add data source&lt;/strong&gt;将其配置为数据源。然后，选择您想要连接的特定企业插件，并按照插件配置页面上的其余步骤进行操作，包括身份验证。&lt;/p&gt;&lt;p&gt;完成所有必填字段和步骤后，您可以保存并测试新数据源。将出现一条消息，验证您是否已成功连接。&lt;/p&gt;&lt;p&gt;有关更多详细信息，您可以参考您正在安装的特定插件的文档。&lt;/p&gt;&lt;h2 id="where-can-i-go-to-learn-more"&gt;我可以去哪里了解更多信息？&lt;/h2&gt;&lt;p&gt;我们有多种资源可供您用来了解有关 Grafana Enterprise 数据源插件的更多信息，包括我们的&lt;a href="https://grafana.com/docs/plugins/"&gt;技术文档&lt;/a&gt;以及由 Grafana Labs 解决方案工程团队的 Christine Wang 和 Aengus Rooney 主持的&lt;a href="https://grafana.com/go/webinar/grafana-plugins-overview-and-demo/"&gt;网络研讨会&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;开始使用我们的企业数据源插件的最简单方法是在&lt;a href="https://grafana.com/products/cloud/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Cloud&lt;/a&gt;中。我们拥有慷慨的永久免费套餐，其中包括 3 个活跃用户对企业数据源的访问权限。如果您还没有， &lt;a href="https://grafana.com/auth/sign-up/create-user?pg=plugins&amp;amp;plcmt=grafana-synthetic-monitoring-app"&gt;请立即免费注册！&lt;/a&gt;&lt;/p&gt;</description><pubDate>Mon, 13 May 2024 12:59:00 GMT</pubDate><guid isPermaLink="true">https://grafana.com/blog/2024/05/13/grafana-enterprise-data-source-plugins-a-brief-guide-to-what-they-are-and-how-to-get-started/</guid></item><item><title>【Use Grafana Alloy to collect Azure metrics with less hassle】使用 Grafana Alloy 轻松收集 Azure 指标</title><link>https://grafana.com/blog/2024/05/08/use-grafana-alloy-to-collect-azure-metrics-with-less-hassle/</link><description>&lt;p&gt;您是否使用&lt;a href="https://grafana.com/docs/alloy/latest/reference/components/prometheus.exporter.azure/?pg=blog&amp;amp;plcmt=body-txt"&gt;Azure 指标导出器&lt;/a&gt;将遥测数据发送到 Grafana Cloud？您是否对避免速率限制所需的大量配置和复杂性感到不知所措？&lt;/p&gt;&lt;p&gt;那么，您是否知道，借助&lt;a href="https://grafana.com/oss/alloy-opentelemetry-collector/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Alloy&lt;/a&gt; （我们的 OpenTelemetry Collector 发行版，具有内置 Prometheus 管道并支持指标、日志、跟踪和配置文件），您现在可以：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;在订阅级别收集您的 Microsoft Azure 指标&lt;/li&gt;&lt;li&gt;在单个配置中配置您需要的所有尺寸&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;让我们看看这两个功能如何降低合金配置的复杂性。&lt;/p&gt;&lt;h2 id="subscription-level-metrics"&gt;订阅级别指标&lt;/h2&gt;&lt;p&gt;Azure 提供各种 API 可用于收集指标。在订阅级别指标之前，Alloy 通过以下工作流程从 Azure 逐个资源收集指标：&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/azure-metrics/previous-flow.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="上一个涉及 Alloy、Grafana Cloud 以及 Azure Resource Graph API 和 Azure Monitor API 的流程图" class="lazyload " /&gt; &lt;noscript&gt;&lt;img alt="上一个涉及 Alloy、Grafana Cloud 以及 Azure Resource Graph API 和 Azure Monitor API 的流程图" src="https://grafana.com/media/blog/azure-metrics/previous-flow.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;这种方法有一些缺点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt; Azure 订阅中的资源量极大地增加了收集指标数据所需的时间。&lt;/li&gt;&lt;li&gt; Azure 的 Monitor API 的&lt;a href="https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/request-limits-and-throttling#subscription-and-tenant-limits" rel="noopener noreferrer" target="_blank"&gt;速率限制&lt;/a&gt;不是很高，这使得很容易遇到阻止您收集所有指标数据的错误。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这些问题有一些解决方法，涉及运行多个使用不同服务主体的 Alloy 部署，每个部署都有自己的资源限制。它最终会看起来像这样：&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/azure-metrics/multiple-alloy.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="包含多个 Alloy 实例的流程图，箭头指向 Grafana Cloud 和 Azure" class="lazyload " /&gt; &lt;noscript&gt;&lt;img alt="包含多个 Alloy 实例的流程图，箭头指向 Grafana Cloud 和 Azure" src="https://grafana.com/media/blog/azure-metrics/multiple-alloy.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;&lt;br /&gt;因此，您必须管理许多无法利用&lt;a href="https://grafana.com/docs/alloy/latest/concepts/clustering/?pg=blog&amp;amp;plcmt=body-txt"&gt;Alloy 集群&lt;/a&gt;的独立 Alloy 部署。&lt;/p&gt;&lt;p&gt;集群使一组 Alloy 部署能够协同工作，以确保高可用性。这将创建一个具有最小资源和运营开销的水平可扩展系统，确保您始终可以使用关键任务 Azure 指标。&lt;/p&gt;&lt;p&gt;使用订阅级指标功能，您可以通过单个 API 调用从一个区域中的所有相关资源收集数据。这使您可以运行单个或集群 Alloy 部署，并有可能将 API 调用量从数千次减少到 100 次以下。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt;&lt;a class="lightbox-link" href="https://grafana.com/media/blog/azure-metrics/subscription-level.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="带有从单个 Grafana Alloy 实例指向 Grafana Cloud 和 Azure 的箭头的流程图" class="lazyload " /&gt; &lt;noscript&gt;&lt;img alt="带有从单个 Grafana Alloy 实例指向 Grafana Cloud 和 Azure 的箭头的流程图" src="https://grafana.com/media/blog/azure-metrics/subscription-level.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;启用此功能就像更改指标配置一样简单：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;从配置中删除&lt;code&gt;resource_graph_query_filter&lt;/code&gt; （如果存在）。&lt;/li&gt;&lt;li&gt;添加一个包含您想要为配置拉取的所有区域的&lt;code&gt;regions&lt;/code&gt;键。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;就是这样！&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;导出器支持 Azure Monitor 可以收集的所有指标，但订阅级指标功能并不适用于所有 Azure 资源类型。如果不支持某种资源类型，您仍然可以使用默认的 Azure 资源图来可视化您的数据。请参阅&lt;a href="https://grafana.com/docs/agent/latest/static/configuration/integrations/azure-exporter-config/?pg=blog&amp;amp;plcmt=body-txt#list-of-supported-services-and-metrics"&gt;文档&lt;/a&gt;以获取更多信息。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="all-your-dimensions-in-a-single-configuration"&gt;单一配置中的所有尺寸&lt;/h2&gt;&lt;p&gt;Azure 服务通过一组维度公开其指标。每个指标的维度集可能不同。如果我们查看 Azure Blob 存储指标的示例，我们可以看到这些指标没有重叠的维度集。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/azure-metrics/azure-metrics.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="Azure 指标维度的屏幕截图" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="Azure 指标维度的屏幕截图" src="https://grafana.com/media/blog/azure-metrics/azure-metrics.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;如果您想要收集所有这些指标（包括维度），则需要三个单独的配置，每个配置都有不同的维度。这管理起来非常复杂，并且您添加的每个额外配置都会导致更多的 API 调用，从而增加了速率限制的可能性。但现在您可以通过单一配置完成这一切。这样做会让你摆脱这个：&lt;/p&gt;&lt;div class="code-snippet code-snippet__mini"&gt;&lt;div class="lang-toolbar__mini"&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="code-snippet code-snippet__border"&gt;&lt;pre&gt;&lt;code class="language-none"&gt;prometheus.exporter.azure &amp;quot;integrations_azure_exporter_1&amp;quot; { subscriptions = [&amp;quot;asdf1234&amp;quot;] resource_type = &amp;quot;Microsoft.Storage/storageAccounts/blobServices&amp;quot; resource_graph_query_filter = &amp;quot;where location == \&amp;quot;westeurope\&amp;quot;&amp;quot; metrics = [ &amp;quot;Availability&amp;quot;, ] included_dimensions = [ &amp;quot;ApiName&amp;quot;, &amp;quot;Authentication&amp;quot;, &amp;quot;GeoType&amp;quot;, &amp;quot;Tier&amp;quot;, ] timespan = &amp;quot;PT1H&amp;quot; } prometheus.exporter.azure &amp;quot;integrations_azure_exporter_2&amp;quot; { subscriptions = [&amp;quot;asdf1234&amp;quot;] resource_type = &amp;quot;Microsoft.Storage/storageAccounts/blobServices&amp;quot; resource_graph_query_filter = &amp;quot;where location == \&amp;quot;westeurope\&amp;quot;&amp;quot; metrics = [ &amp;quot;BlobCapacity&amp;quot;, &amp;quot;BlobCount&amp;quot;, &amp;quot;BlobProvisionedSize&amp;quot;, ] included_dimensions = [ &amp;quot;BlobType&amp;quot;, &amp;quot;Tier&amp;quot;, ] timespan = &amp;quot;PT1H&amp;quot; } prometheus.exporter.azure &amp;quot;integrations_azure_exporter_3&amp;quot; { subscriptions = [&amp;quot;asdf1234&amp;quot;] resource_type = &amp;quot;Microsoft.Storage/storageAccounts/blobServices&amp;quot; resource_graph_query_filter = &amp;quot;where location == \&amp;quot;westeurope\&amp;quot;&amp;quot; metrics = [ &amp;quot;ContainerCount&amp;quot;, ] timespan = &amp;quot;PT1H&amp;quot; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;对此：&lt;/p&gt;&lt;div class="code-snippet code-snippet__mini"&gt;&lt;div class="lang-toolbar__mini"&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="code-snippet code-snippet__border"&gt;&lt;pre&gt;&lt;code class="language-none"&gt;prometheus.exporter.azure &amp;quot;integrations_azure_exporter&amp;quot; { subscriptions = [&amp;quot;asdf1234&amp;quot;] resource_type = &amp;quot;Microsoft.Storage/storageAccounts/blobServices&amp;quot; regions = [ &amp;quot;westeurope&amp;quot; ] metrics = [ &amp;quot;Availability&amp;quot;, &amp;quot;BlobCapacity&amp;quot;, &amp;quot;BlobCount&amp;quot;, &amp;quot;BlobProvisionedSize&amp;quot;, &amp;quot;ContainerCount&amp;quot;, ] included_dimensions = [ &amp;quot;ApiName&amp;quot;, &amp;quot;Authentication&amp;quot;, &amp;quot;BlobType&amp;quot;, &amp;quot;GeoType&amp;quot;, &amp;quot;Tier&amp;quot;, ] timespan = &amp;quot;PT1H&amp;quot; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id="here-to-help-now-and-into-the-future"&gt;在这里为现在和未来提供帮助&lt;/h2&gt;&lt;p&gt;无论您处于&lt;a href="https://grafana.com/blog/2024/01/29/how-to-improve-your-observability-strategy-introducing-the-observability-journey-maturity-model/"&gt;可观察性之旅&lt;/a&gt;的哪个阶段，Grafana Labs 都会为您提供帮助。 Alloy 中提供的这些新功能应该能够显着降低与观察 Azure 上运行的工作负载相关的复杂性。&lt;/p&gt;&lt;p&gt;如果您有任何问题或功能请求，请随时提交支持票或联系您的 Grafana Labs 代表。我们很高兴收到您的来信，因为这只是我们帮助解决您的 Azure 可观测性需求的计划的一部分，因此请继续关注今年晚些时候将推出的内容！&lt;/p&gt;&lt;p&gt; &lt;em&gt;&lt;a href="https://grafana.com/products/cloud/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Cloud&lt;/a&gt;是开始使用指标、日志、跟踪、仪表板等的最简单方法。我们为每个用例提供慷慨的永久免费套餐和计划。&lt;a href="https://grafana.com/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt"&gt;现在免费注册&lt;/a&gt;！&lt;/em&gt;&lt;/p&gt;</description><pubDate>Wed, 08 May 2024 00:00:00 GMT</pubDate><guid isPermaLink="true">https://grafana.com/blog/2024/05/08/use-grafana-alloy-to-collect-azure-metrics-with-less-hassle/</guid></item><item><title>【Logs with Firehose: Stream logs to the AWS Observability app cheaper and easier】使用 Firehose 记录日志：更便宜、更轻松地将日志流式传输到 AWS Observability 应用程序</title><link>https://grafana.com/blog/2024/05/07/logs-with-firehose-stream-logs-to-the-aws-observability-app-cheaper-and-easier/</link><description>&lt;p&gt;AWS 是当今许多组织技术堆栈的重要组成部分，这就是为什么我们继续让您在 Grafana Cloud 中观察环境变得更加容易。我们最近推出了&lt;a href="https://grafana.com/solutions/cloud-monitoring-aws/?pg=blog&amp;amp;plcmt=body-txt"&gt;AWS Observability&lt;/a&gt; ，这是一个完全托管的应用程序，用于对数十种 AWS 产品进行可视化和警报。通过最新的更新，我们使提取和查询 AWS 日志变得更便宜、更简单。&lt;/p&gt;&lt;p&gt; &lt;a href="https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/firehose-logs/"&gt;Logs with Firehose&lt;/a&gt;现已全面推出，AWS 用户可以通过&lt;a href="https://aws.amazon.com/kinesis/data-firehose/" rel="noopener noreferrer" target="_blank"&gt;Amazon Data Firehose 将日志流式传输到 Grafana Cloud，Amazon Data Firehose 是&lt;/a&gt;一项托管服务，用于将数据实时流式传输到其他 AWS 服务、自定义 HTTP 终端节点或第三方拥有的 HTTP 终端节点Grafana Labs 等提供商。在本博客中，我们将解释此新功能的工作原理以及它与在 Grafana Cloud 中收集 CloudWatch 日志的现有技术有何不同。&lt;/p&gt;&lt;h2 id="how-it-all-works"&gt;这一切是如何运作的&lt;/h2&gt;&lt;p&gt;此解决方案可以轻松将 Amazon CloudWatch 日志连接到 Grafana Cloud，因为您无需部署代理或本地配置。相反，Firehose 流是在您的 AWS 基础设施上配置的。&lt;/p&gt;&lt;p&gt;交付流配置为批处理并将摄取的记录发送到&lt;a href="https://grafana.com/products/cloud/logs/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Cloud Logs&lt;/a&gt; ，该日志由我们的开源日志聚合系统&lt;a href="https://grafana.com/oss/loki/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Loki&lt;/a&gt;提供支持。您可以使用 Firehose 传输流从多个 AWS 产品发送日志，包括 Amazon CloudWatch（通过订阅筛选器）、VPC 流日志、AWS CloudTrail 等。&lt;/p&gt;&lt;p&gt;为了防止潜在的数据丢失，您还可以将事件备份到 Amazon S3 存储桶。您可以为所有日志事件或仅针对那些未能交付的日志事件（例如，如果超出&lt;a href="https://docs.aws.amazon.com/firehose/latest/dev/limits.html" rel="noopener noreferrer" target="_blank"&gt;交付配额）&lt;/a&gt;配置此功能。有关根据流式传输的日志数据量调整备份的更多信息，请参阅&lt;a href="https://docs.aws.amazon.com/firehose/latest/dev/basic-deliver.html#retry" rel="noopener noreferrer" target="_blank"&gt;有关数据传输失败处理的 AWS 文档&lt;/a&gt;。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link captioned" href="https://grafana.com/media/blog/logs-with-firehose/firehose-workflow.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="A flowchart of AWS resources moving to Firehose, then to Loki and Grafana" class="lazyload mb-0" title="*实施此架构来处理 AWS 日志并将其传输到 Grafana Cloud。*" /&gt; &lt;noscript&gt;&lt;img alt="A flowchart of AWS resources moving to Firehose, then to Loki and Grafana" src="https://grafana.com/media/blog/logs-with-firehose/firehose-workflow.png" title="*实施此架构来处理 AWS 日志并将其传输到 Grafana Cloud。*" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;figcaption class="w-100p caption mb-1 text-gray-13 "&gt;&lt;em&gt;实施此架构来处理 AWS 日志并将其传输到 Grafana Cloud。&lt;/em&gt;&lt;/a&gt;&lt;/figure&gt;&lt;h3 id="how-to-get-started"&gt;如何开始&lt;/h3&gt;&lt;p&gt;要使用 Firehose 配置日志，您需要：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;在 Grafana Cloud 中创建访问策略和身份验证令牌&lt;/li&gt;&lt;li&gt;将您的 Firehose 传输流连接到 Grafana Cloud&lt;/li&gt;&lt;li&gt;运行查询以验证 AWS 是否正在将日志发送到您的 Grafana 实例&lt;/li&gt;&lt;/ol&gt;&lt;div class="shortcode youtube"&gt;&lt;/div&gt;&lt;p&gt;有关如何开始的详细说明，请参阅我们的&lt;a href="https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/logs/firehose-logs/config-firehose-logs//?pg=blog&amp;amp;plcmt=body-txt"&gt;配置文档&lt;/a&gt;。&lt;/p&gt;&lt;h2 id="a-bigger-tent-two-ways-to-send-aws-logs-to-grafana-cloud"&gt;更大的帐篷：将 AWS 日志发送到 Grafana Cloud 的两种方法&lt;/h2&gt;&lt;p&gt;从历史上看， &lt;a href="https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-logs/?pg=blog&amp;amp;plcmt=body-txt"&gt;Logs with Lambda&lt;/a&gt; （也称为&lt;code&gt;lambda-promtail&lt;/code&gt; ）实际上是将日志数据从 AWS 和 AWS 原生服务中托管的应用程序传送到 Grafana Cloud Logs 的方式。这种方法用途广泛，但随着日志量的增长，它可能会变得非常昂贵。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/logs-with-firehose/aws-firehose-chart%281%29.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="条形图显示了使用 Lambda 和 Firehose 的每月 AWS 账单的价格差异，随着日志量的增长，Lambda 变得更加昂贵。" class="lazyload " /&gt; &lt;noscript&gt;&lt;img alt="条形图显示了使用 Lambda 和 Firehose 的每月 AWS 账单的价格差异，随着日志量的增长，Lambda 变得更加昂贵。" src="https://grafana.com/media/blog/logs-with-firehose/aws-firehose-chart%281%29.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;上述分析是使用&lt;a href="https://calculator.aws/#/" rel="noopener noreferrer" target="_blank"&gt;AWS 定价计算器&lt;/a&gt;完成的，大致了解了使用 Lambda 与 Firehose 从 AWS 传输日志相关的成本趋势。正如您所看到的，使用 Lambda 的日志很快就会变得比使用 Firehose 的日志贵 3 倍。&lt;/p&gt;&lt;p&gt;借助 AWS Lambda，CloudWatch Logs 对每个日志条目触发一次调用。 Lambda 按每次调用收费，因此这种方法很快就会变得昂贵。另一方面，Firehose 是一个无状态组件，没有可能失败的运行时（与 Lambda 相比），并且它旨在批处理和发送数据。此外，您按数据量计费，而不是按计数计费，这使得 Firehose 成为流式传输大量日志的完美解决方案。&lt;/p&gt;&lt;p&gt;因此，如果您的数据通过 CloudWatch，您应该将 Logs 与 Firehose 结合使用。此方法也适用于其他服务，包括 VPC 流日志、AWS WAF 和 Route 53。但是，在某些情况下，Firehose 仍然不是可行的选择。例如，负载均衡器访问日志目前只能通过 Lambda 传送。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;所有第三方 AWS 日志记录解决方案都会在您的 AWS 账单上产生额外费用。我们面临的问题是：我们能为用户提供多低的成本？&lt;/p&gt;&lt;p&gt;截至发布时，将日志与 Firehose 结合使用的唯一额外成本是 Firehose 传输流。对于此组件，AWS 按处理的字节收费，因此没有预留成本。在Grafana Cloud方面，Grafana Cloud中的查询是免费的。您只需&lt;a href="https://grafana.com/pricing/?pg=blog&amp;amp;plcmt=body-txt"&gt;为存储每个摄取的字节付费&lt;/a&gt;（超出我们的&lt;a href="https://grafana.com/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt"&gt;永久免费层&lt;/a&gt;），这对于所有摄取的日志数据都是如此。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="a-holistic-view-of-your-aws-environment"&gt;您的 AWS 环境的整体视图&lt;/h2&gt;&lt;p&gt;虽然 Logs with Firehose 可以让您更轻松、更便宜地提取日志，但 AWS Observability 应用程序提供了观察复杂系统所需的深度和自定义级别。此外，通过在 Grafana Cloud 中结合基础设施和应用程序遥测，您可以全面了解系统，从而减少上下文切换并更快地解决问题。&lt;/p&gt;&lt;p&gt; &lt;em&gt;&lt;a href="https://grafana.com/products/cloud/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Cloud&lt;/a&gt;是开始使用指标、日志、跟踪、仪表板等的最简单方法。我们为每个用例提供慷慨的永久免费套餐和计划。&lt;a href="https://grafana.com/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt"&gt;现在免费注册&lt;/a&gt;！&lt;/em&gt;&lt;/p&gt;</description><pubDate>Tue, 07 May 2024 00:00:00 GMT</pubDate><guid isPermaLink="true">https://grafana.com/blog/2024/05/07/logs-with-firehose-stream-logs-to-the-aws-observability-app-cheaper-and-easier/</guid></item><item><title>【Data source security in Grafana: Best practices and what to avoid】Grafana 中的数据源安全：最佳实践和应避免的情况</title><link>https://grafana.com/blog/2024/05/06/data-source-security-in-grafana-best-practices-and-what-to-avoid/</link><description>&lt;p&gt;近日，一份不正确的安全报告发布，声称Grafana存在SQL注入攻击。正如我们与安全研究人员沟通的那样，这份报告是错误的。 Grafana 中经过身份验证的用户与为底层数据源配置的用户具有相同的权限。这不是一个安全问题，但实际上是经过身份验证的用户的预期和&lt;a href="https://grafana.com/docs/grafana/latest/administration/data-source-management/#data-source-permissions"&gt;记录的行为&lt;/a&gt;，也是 Grafana 的“大帐篷”策略和 Grafana 高性能的基础。&lt;/p&gt;&lt;p&gt;由于这一直是用户的困惑点，因此我们希望创建一个公共资源，解释 Grafana 中的凭据和权限如何交互，并分享 Grafana 中数据源安全的最佳实践。&lt;/p&gt;&lt;h2 id="how-grafana-data-sources-work"&gt; Grafana 数据源的工作原理&lt;/h2&gt;&lt;p&gt;Grafana 可以可视化几乎所有数据存储中的数据。我们通过“大帐篷”方法实现这一目标，积极优先考虑与每个人，甚至是直接竞争对手的互操作性。为了查询数据，Grafana 的“数据源”可以访问这些第三方数据存储。每次访问数据时，最好准确了解事物的工作原理。&lt;/p&gt;&lt;p&gt; Grafana 的强大功能和速度部分来自于数据源构建数据管道这一事实。 Grafana 不要求您在其他地方复制或存储数据。初始数据存储仍然是最终的事实来源，不存在随着时间的推移出现数据分歧的风险。例如，这就是为什么我们看到如此多的商业智能采用：无需将数据导出到 Excel/Google Sheets 并拥有立即过时的副本。&lt;/p&gt;&lt;p&gt;通过 Grafana 访问和显示数据有两种基本方法：匿名访问和经过身份验证的访问。匿名访问使用更锁定且更慢的数据路径；此数据路径超出了本博客文章的范围。经过身份验证的用户大致分为三组：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;查看器：&lt;/strong&gt;能够查看特定数据源有权访问的所有数据&lt;/li&gt;&lt;li&gt;&lt;strong&gt;编辑器：&lt;/strong&gt;能够为每个人创建、编辑和删除面板、仪表板和数据源&lt;/li&gt;&lt;li&gt;&lt;strong&gt;管理员：&lt;/strong&gt;能够更改整个实例的运行方式&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;您可以在我们的&lt;a href="https://grafana.com/docs/grafana/latest/administration/data-source-management/#data-source-permissions"&gt;数据源权限文档&lt;/a&gt;中找到更多详细信息。&lt;/p&gt;&lt;p&gt;随着越来越多的用户继续采用 Grafana，我们有时会发现“查看者”的含义感到困惑。简而言之：经过身份验证的查看者可以执行数据源配置允许的所有操作。面板和仪表板是方便访问的快捷方式；它们不会取代数据源的控制和权限。例如，如果为数据源配置的 SQL 用户允许执行&lt;code&gt;SELECT *&lt;/code&gt; 、 &lt;code&gt;DELETE&lt;/code&gt;和&lt;code&gt;DROP&lt;/code&gt;操作，则整个数据源以及所有经过身份验证的查看者、编辑者和管理员都可以&lt;code&gt;SELECT *&lt;/code&gt; 、 &lt;code&gt;DELETE&lt;/code&gt;和&lt;code&gt;DROP&lt;/code&gt;操作。&lt;/p&gt;&lt;p&gt;这是经过身份验证的用户的预期和记录的行为，也是“大帐篷”和 Grafana 高性能的基础。&lt;/p&gt;&lt;p&gt;我们将在接下来的部分中介绍更多示例和当前的最佳实践。&lt;/p&gt;&lt;h2 id="a-closer-look-at-credentials-and-permissions-in-grafana"&gt;仔细研究 Grafana 中的凭据和权限&lt;/h2&gt;&lt;p&gt;使用 Web 浏览器的开发人员工具，任何查看仪表板的人都可以轻松查看发送到数据源的原始查询并构建自己的查询。如果您在 Grafana 中配置数据源，您有责任确保为数据源配置的凭据只能访问您希望查看者访问的数据。&lt;/p&gt;&lt;p&gt;&lt;a href="https://grafana.com/docs/grafana/latest/administration/data-source-management/"&gt;默认情况下&lt;/a&gt;，任何可以访问该实例的用户都可以查询 Grafana 实例中可用的数据源。要限制对数据源的访问：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; &lt;strong&gt;Grafana Enterprise&lt;/strong&gt;和&lt;strong&gt;Grafana Cloud&lt;/strong&gt;客户可以利用&lt;a href="https://grafana.com/docs/grafana/latest/administration/data-source-management/#data-source-permissions"&gt;数据源权限&lt;/a&gt;和&lt;a href="https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/#role-based-access-control-rbac"&gt;基于角色的访问控制&lt;/a&gt;。 （Grafana Loki 数据源还可以使用&lt;a href="https://grafana.com/docs/grafana/latest/administration/data-source-management/teamlbac/#team-lbac"&gt;基于团队标签的访问控制&lt;/a&gt;。）&lt;/li&gt;&lt;li&gt; &lt;strong&gt;Grafana Enterprise&lt;/strong&gt;和&lt;strong&gt;OSS&lt;/strong&gt;用户可以使用&lt;a href="https://grafana.com/docs/grafana/latest/administration/team-management/"&gt;团队管理&lt;/a&gt;。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;但是，请记住，这些功能不能限制具有数据源&lt;code&gt;query&lt;/code&gt;权限的用户实际可以执行的查询。&lt;/p&gt;&lt;h3 id="limiting-the-credentials-capabilities-on-the-data-stores-side"&gt;限制数据存储端的凭证功能&lt;/h3&gt;&lt;p&gt;您需要更加小心使用允许更改数据的查询语言（例如 SQL）的数据源。为了帮助用户避免错误，我们在所有 SQL 数据源的配置页面中都包含了明确的警告。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/sql-data-sources-warning-configuration-page-1.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="所有 SQL 数据源的配置页面中都会出现警告。" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="所有 SQL 数据源的配置页面中都会出现警告。" src="https://grafana.com/media/blog/sql-data-sources-warning-configuration-page-1.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;如果您将配置错误的数据源与其他较弱的安全设置（例如允许匿名访问）链接起来，则可能会造成灾难性的后果，因为任何能够访问您的 Grafana 实例的人都可以运行&lt;code&gt;DROP TABLE users&lt;/code&gt;之类的功能。作为最佳实践，用于数据源的 SQL 凭据不应启用&lt;code&gt;INSERT&lt;/code&gt; 、 &lt;code&gt;UPDATE&lt;/code&gt;或&lt;code&gt;DROP&lt;/code&gt;权限。&lt;/p&gt;&lt;p&gt;我们鼓励所有 Grafana 管理员定期检查其数据源配置的凭据，并确保它们仍然合适。 Grafana 本地管理员还应查看&lt;a href="https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/"&gt;安全文档&lt;/a&gt;和 Grafana ini 文件，以确保其配置满足安全要求。&lt;/p&gt;&lt;h3 id="limiting-allowed-queries-using-public-dashboards"&gt;使用公共仪表板限制允许的查询&lt;/h3&gt;&lt;p&gt;有一项相关功能：&lt;a href="https://grafana.com/docs/grafana/latest/dashboards/dashboard-public/"&gt;公共仪表板&lt;/a&gt;。如果您愿意公开共享仪表板，则查询执行仅限于仪表板中的确切查询。查询存储在服务器上，用户无法修改它们。&lt;/p&gt;&lt;h3 id="limiting-query-exploration-in-grafana-explore"&gt;限制 Grafana Explore 中的查询探索&lt;/h3&gt;&lt;p&gt;Grafana 有一个中心位置，您可以编写自己的查询来了解您的数据存储；这就是所谓的探索。根据设计，也允许发送数据源凭据允许的任何查询。查看有关如何限制对“探索”的访问的&lt;a href="https://grafana.com/docs/grafana/latest/explore/"&gt;文档&lt;/a&gt;。如果您知道快速迭代查询不是任何工作流程的一部分，您还可以在 Grafana 的配置文件中完全禁用 Explore。&lt;/p&gt;&lt;h2 id="further-questions"&gt;进一步的问题&lt;/h2&gt;&lt;p&gt;如果 Grafana Labs 客户对此主题有任何疑问，请提交支持票证。&lt;/p&gt;&lt;p&gt;社区用户可以在&lt;a href="https://community.grafana.com/" rel="noopener noreferrer" target="_blank"&gt;Grafana 社区论坛&lt;/a&gt;中进行交流。&lt;/p&gt;&lt;h2 id="reporting-security-issues"&gt;报告安全问题&lt;/h2&gt;&lt;p&gt;如果您认为发现了安全漏洞，请访问我们的&lt;a href="https://grafana.com/legal/report-a-security-issue/?pg=blog&amp;amp;plcmt=body-txt"&gt;报告安全问题页面&lt;/a&gt;，了解如何发送安全报告。&lt;/p&gt;&lt;p&gt; Grafana Labs 将向您发送回复，指示处理您的报告的后续步骤。在对您的报告进行初步回复后，安全团队将随时向您通报修复进度和完整公告，并可能要求您提供其他信息或指导。&lt;/p&gt;&lt;p&gt;&lt;em&gt;重要提示：我们要求您在漏洞修复和公布之前不要披露该漏洞，除非您收到 Grafana Labs 安全团队的回复表明您可以这样做。&lt;/em&gt;&lt;/p&gt;&lt;h2 id="security-announcements"&gt;安全公告&lt;/h2&gt;&lt;p&gt;我们在博客上维护一个&lt;a href="https://grafana.com/tags/security/"&gt;安全类别&lt;/a&gt;，我们将始终在其中发布包含安全修复程序的任何补丁的摘要、修复和缓解详细信息。您还可以订阅我们的&lt;a href="https://grafana.com/tags/security/index.xml"&gt;RSS 源&lt;/a&gt;。&lt;/p&gt;</description><pubDate>Mon, 06 May 2024 00:00:00 GMT</pubDate><guid isPermaLink="true">https://grafana.com/blog/2024/05/06/data-source-security-in-grafana-best-practices-and-what-to-avoid/</guid></item><item><title>【Grafana Incident: new tools for faster, simpler incident response】Grafana Incident：新工具可实现更快、更简单的事件响应</title><link>https://grafana.com/blog/2024/05/06/grafana-incident-new-tools-for-faster-simpler-incident-response/</link><description>&lt;p&gt;在 Grafana Labs，我们致力于帮助团队显着改进他们管理和响应事件的方式。通过&lt;a href="https://grafana.com/products/cloud/irm/"&gt;Grafana 事件响应和管理 (IRM)&lt;/a&gt; ，我们提供工具来增强团队能力、简化流程并提高事件管理策略的有效性，并且我们不断寻找使我们的解决方案变得更好的方法。&lt;/p&gt;&lt;p&gt;该策略的核心组成部分是&lt;a href="https://grafana.com/products/cloud/incident/"&gt;Grafana Incident&lt;/a&gt; ，它消除了事件管理的繁琐任务，因此您可以专注于更快地实际解决问题。我们两年前推出了 Grafana 事件，从那时起我们已经做了很多改进。在这篇博文中，我们想重点介绍一些最近的创新，这些创新重塑了我们的事件管理方法，并提供对下一步的快速预览，以便您的团队做好准备应对未来的挑战。&lt;/p&gt;&lt;h2 id="rapid-response-with-sift-investigations"&gt;通过 Sift 调查快速响应&lt;/h2&gt;&lt;p&gt;您对事件的最初反应对于您解决问题的速度起着巨大的作用。 Sift 是 Grafana Cloud 中的诊断助手，利用&lt;a href="https://grafana.com/docs/grafana-cloud/alerting-and-irm/machine-learning/"&gt;Grafana 机器学习&lt;/a&gt;快速过滤数据，实时识别问题并确定问题的优先级。例如，在重大系统中断期间，Sift 可以隔离和诊断错误模式或 Kubernetes 容器故障，使团队能够立即开始修复工作。这不仅加快了响应时间，还显着减少了系统停机时间。&lt;a href="https://grafana.com/docs/grafana-cloud/alerting-and-irm/incident/manage/sift/"&gt;探索 Sift 调查&lt;/a&gt;。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/incident-latest/sift-investigation-1.gif"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="" src="https://grafana.com/media/blog/incident-latest/sift-investigation-1.gif" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;h2 id="streamlined-incident-collaboration-via-grafana-oncall"&gt;通过 Grafana OnCall 简化事件协作&lt;/h2&gt;&lt;p&gt;Grafana IRM 实际上是一套服务（Grafana Alerting、Grafana Incident、Grafana OnCall、Grafana SLO），我们一直在努力更好地集成这些工具。例如，我们通过将 Grafana Incident 与 Grafana OnCall 配对来改善事件期间的团队协调。&lt;/p&gt;&lt;p&gt;这样可以根据相关团队成员的空闲时间和首选联系方式自动通知他们。当出现关键问题时，该功能可确保合适的人员（例如待命的数据库工程师）快速介入，从而促进更有效的解决过程。&lt;a href="https://grafana.com/docs/grafana-cloud/alerting-and-irm/incident/manage/add-participants/"&gt;了解有关添加参与者的更多信息&lt;/a&gt;。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/incident-latest/oncall-integration.gif"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="" src="https://grafana.com/media/blog/incident-latest/oncall-integration.gif" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;h2 id="ai-driven-summaries-with-openai-integration"&gt;与 OpenAI 集成的 AI 驱动摘要&lt;/h2&gt;&lt;p&gt;OpenAI 集成会自动生成简洁、可操作的事件摘要。这种分析不仅可以快速捕获事件的本质，还可以帮助团队确保在记录和传达事件影响时不会忽略任何关键细节。 &lt;a href="https://grafana.com/docs/grafana-cloud/alerting-and-irm/incident/configure/integrations/configure-open-ai/"&gt;探索 OpenAI 集成&lt;/a&gt;。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/incident-latest/openail-integration.gif"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="" src="https://grafana.com/media/blog/incident-latest/openail-integration.gif" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;h2 id="communication-and-reporting-enhancements"&gt;沟通和报告增强&lt;/h2&gt;&lt;p&gt;发生事件时，清晰、简洁的沟通至关重要。当您尝试让服务恢复并运行时，您最不需要的就是丢失重要消息或交接。这就是为什么我们进行了改进以改善事件期间的通信流程。&lt;/p&gt;&lt;p&gt; Slack 附件上传等功能允许团队通过简单地使用机器人表情符号做出反应，将关键消息和文件直接附加到事件时间线。这可确保所有相关信息集中且可访问，从而简化文档流程。 &lt;a href="https://grafana.com/docs/grafana-cloud/alerting-and-irm/incident/configure/integrations/configure-slack/#manage-slack-attachments"&gt;使用 Slack 简化文档&lt;/a&gt;。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/incident-latest/incident-comms.gif"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="" src="https://grafana.com/media/blog/incident-latest/incident-comms.gif" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;此外，直接从 Grafana OnCall 警报或任何 Grafana 面板声明事件的能力已经改变了游戏规则，使团队能够在检测到异常情况时立即启动响应。这种快速申报能力可确保潜在问题在升级之前得到解决，从而保持运营连续性并最大程度地减少影响。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt;&lt;a class="lightbox-link" href="https://grafana.com/media/blog/incident-latest/declare-incident.gif"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="" src="https://grafana.com/media/blog/incident-latest/declare-incident.gif" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;h2 id="anticipated-innovations-on-the-horizon"&gt;预期的创新即将出现&lt;/h2&gt;&lt;p&gt;随着 Grafana 事件的不断发展，我们的路线图包括几个令人兴奋的功能，旨在增强团队管理和响应事件的方式。以下是我们目前正在进行的一些更新：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;事件类型和私人事件。&lt;/strong&gt;我们正在扩展我们的能力，将私人事件纳入其中，从而增强安全性和保密性。这将使团队能够更安全地处理敏感数据并支持需要隐私的事件，例如安全漏洞。这些私人事件可以通过特定的可见性设置进行定制，以确保敏感信息的机密性。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;事件阶段。&lt;/strong&gt;可定制的事件阶段使团队能够根据其特定的操作程序定义和管理事件的每个阶段。这种灵活性确保我们的工具与您的内部流程保持一致，使事件管理更加直观并与您现有的工作流程集成。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;用于 Grafana OnCall 和 Grafana Incident 的单个 Slack 应用程序。&lt;/strong&gt;为了简化用户体验，我们将 Slack 应用程序合并到两个工具的单个 Slack 应用程序中。这种集成将简化 Slack 环境中工具的设置和维护，降低复杂性并增强团队之间的信息流。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;流标签。&lt;/strong&gt;我们计划添加从 Grafana OnCall 警报组到事件的自动标签同步。此功能将有助于在整个事件生命周期中保持连续性和上下文，确保当警报升级为事件时自动转移所有相关数据&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Grafana IRM 移动应用程序中的事件功能。&lt;/strong&gt;我们的移动功能正在扩展，包括全面的事件管理功能，使响应人员能够直接从移动设备管理事件。这确保了团队成员即使离开办公桌也可以迅速响应事件，这对于保持高可用性和快速响应至关重要。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;自动将事件声明为 Grafana OnCall 升级链的一部分。&lt;/strong&gt;我们计划实现自动声明事件的功能，作为 Grafana OnCall 内升级流程的一部分。这将提供从警报到事件管理的无缝过渡，帮助团队在更广泛的背景下更快地动员起来，减少响应时间和潜在的损害。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我们对即将发生的事情感到兴奋，但与此同时，我们邀请您探索当前可用的这些新功能并将其集成到您的事件管理策略中。随着我们在不断变化的技术环境中不断发展我们的平台，请继续关注更多更新和见解。&lt;/p&gt;&lt;p&gt; &lt;em&gt;&lt;a href="https://grafana.com/products/cloud/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Cloud&lt;/a&gt;是开始使用指标、日志、跟踪、仪表板等的最简单方法。我们为每个用例提供慷慨的永久免费套餐和计划。&lt;a href="https://grafana.com/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt"&gt;现在免费注册&lt;/a&gt;！&lt;/em&gt;&lt;/p&gt;</description><pubDate>Mon, 06 May 2024 00:00:00 GMT</pubDate><guid isPermaLink="true">https://grafana.com/blog/2024/05/06/grafana-incident-new-tools-for-faster-simpler-incident-response/</guid></item><item><title>【Setting up your Grafana k6 performance testing suite: JavaScript tools, shared libraries, and more】设置 Grafana k6 性能测试套件：JavaScript 工具、共享库等</title><link>https://grafana.com/blog/2024/05/02/setting-up-your-grafana-k6-performance-testing-suite-javascript-tools-shared-libraries-and-more/</link><description>&lt;p&gt;&lt;em&gt;编者注：这篇博文是有关使用 Grafana k6 组织性能测试套件的系列文章中的第二篇。如果您还没有看过，请务必查看&lt;a href="https://grafana.com/blog/2024/04/30/organizing-your-grafana-k6-performance-testing-suite-best-practices-to-get-started/"&gt;本系列的第一篇文章&lt;/a&gt;，其中探讨了如何在测试套件中实现可重用的测试模式和其他最佳实践。&lt;/em&gt;&lt;/p&gt;&lt;p&gt;当我们在 2017 年开源 Grafana k6 时，我们有一个简单但雄心勃勃的计划：让我们构建一个开发人员真正想要使用的性能测试工具&lt;em&gt;，并&lt;/em&gt;帮助工程团队构建更可靠的软件。&lt;/p&gt;&lt;p&gt;我们已经实现了这一目标，并且自早期以来已经取得了长足的进步。然而，我们仍然收到很多关于如何使用&lt;a href="https://grafana.com/oss/k6/"&gt;Grafana k6&lt;/a&gt;最好地组织性能测试套件的问题。&lt;/p&gt;&lt;p&gt;在这篇文章中，我们将介绍大型测试套件的一些基础知识，包括可以提高代码质量、设置存储库、共享库等的工具。这些方面对于更好的维护至关重要，特别是当多人协作编写测试时。&lt;/p&gt;&lt;p&gt;无论您使用开源 Grafana k6 还是&lt;a href="https://grafana.com/products/cloud/k6/"&gt;Grafana Cloud k6&lt;/a&gt; （我们完全托管的性能测试平台），这些工具和实践都将帮助您更快地进行规划和提升。&lt;/p&gt;&lt;h2 id="javascript-tools-for-code-quality-linters-and-prettier"&gt;确保代码质量的 JavaScript 工具：Linters 和 Prettier&lt;/h2&gt;&lt;p&gt;尽管&lt;a href="https://grafana.com/docs/k6/latest/#what-k6-does-not"&gt;k6 不在 NodeJS 中运行&lt;/a&gt;，但 JavaScript 和 NodeJS 提供了丰富的工具生态系统，我们可以使用它们来增强测试体验。&lt;/p&gt;&lt;p&gt; &lt;a href="https://eslint.org/" rel="noopener noreferrer" target="_blank"&gt;ESLint&lt;/a&gt;和&lt;a href="https://prettier.io/" rel="noopener noreferrer" target="_blank"&gt;Prettier&lt;/a&gt;是大多数 JavaScript 项目中用来分析和更新 JavaScript 代码的两个必备工具。 ESLint（一种称为&lt;em&gt;linter 的&lt;/em&gt;工具）有助于识别和修复 JavaScript 错误，而 Prettier 可确保您的测试代码按照您所需的风格保持一致的格式。&lt;/p&gt;&lt;p&gt;这两个工具都运行在 NodeJS 上，并且通常通过其 npm 包安装。要配置项目相关的工具（和依赖项），将 k6 测试作为基于 npm 的项目进行管理可能是一个优势。&lt;br /&gt;&lt;br /&gt;在根文件夹上运行&lt;code&gt;npm init&lt;/code&gt;以创建&lt;code&gt;package.json&lt;/code&gt;文件，然后安装要在测试项目中使用的任何工具。例如，您可以安装 k6 TypeScript 定义来启用&lt;a href="https://grafana.com/docs/k6/latest/misc/intellisense/"&gt;Intellisense&lt;/a&gt;并支持 IDE 中的 k6 自动完成和文档。&lt;br /&gt;&lt;br /&gt;我将放弃 ESLint 和 Prettier 说明，因为有大量教程涵盖该主题。作为参考，这里有软件质量专家&lt;a href="https://www.thequalityduck.co.uk/how-to-lint-k6-tests-and-add-a-pre-commit-hook/" rel="noopener noreferrer" target="_blank"&gt;Stuart Thomas&lt;/a&gt;和 Grafana k6 Champion &lt;a href="https://sii.pl/blog/en/performance-under-control-with-k6-framework-initialization/" rel="noopener noreferrer" target="_blank"&gt;Grzegorz Piechnik&lt;/a&gt;的相关帖子，以及 k6 示例中使用的&lt;a href="https://github.com/grafana/k6-docs/blob/main/src/data/markdown/.eslintrc.js" rel="noopener noreferrer" target="_blank"&gt;eslintrc.js&lt;/a&gt; 。&lt;/p&gt;&lt;p&gt;&lt;em&gt;注意：对于 k6 的新用户，我们想强调 k6 不在 NodeJS 上运行，并且 k6 CLI 不应通过 npm 模块安装。有关更多信息，请查看我们的&lt;a href="https://grafana.com/docs/k6/latest/set-up/install-k6/"&gt;k6 安装文档&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;&lt;h2 id="multiple-repos-and-central-teams"&gt;多个存储库和中央团队&lt;/h2&gt;&lt;p&gt;构建我们的测试套件的一个关键决定是是否拥有一个通用套件或跨项目分布的多个测试套件。重要的是不要将其与单一存储库与多存储库的争论混淆，后者虽然相关，但却是一个单独的架构决策。&lt;/p&gt;&lt;p&gt; Monorepos 通常更容易设置和管理。然而，由于可见性和自主权较低，将所有测试集中在单独的存储库中可能会阻碍其他团队的参与。&lt;/p&gt;&lt;p&gt;我们的建议是&lt;strong&gt;与您组织中其他测试项目的结构保持一致。&lt;/strong&gt;通常，测试项目位于它们正在测试的代码库旁边，因此建议遵循这种做法。然而，有时，测试项目作为独立项目进行管理，这种方法也非常好。请记住，在构建测试项目时不存在“一刀切”的方法。&lt;/p&gt;&lt;p&gt;主要目标应该是减轻负责构建和测试系统的团队的参与。进行调整以适应现有的组织和项目结构，并将测试置于工程师附近，将有助于跨团队和项目的采用。性能测试绝不应该是一个孤立的项目。目标是将其集成到各个项目和团队的流程中，从而将可靠性构建到系统的不同部分。&lt;/p&gt;&lt;p&gt;然而，跨职能项目的挑战往往是缺乏所有权以及落后于其他优先事项的趋势。在这里&lt;strong&gt;，由可靠性和质量领导者组成的核心团队可以发挥至关重要的作用。&lt;/strong&gt;他们领导全公司的工作，并确保将最佳实践嵌入到整个工程组织中。通常，该中心团队负责维护共享库和推荐实践。&lt;/p&gt;&lt;p&gt;总而言之，对于大型项目，我们建议：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;使用与您现有的测试项目一致的多个测试存储库。&lt;/li&gt;&lt;li&gt;共享由中央团队维护的公共库。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="bundling-shared-libraries"&gt;捆绑共享库&lt;/h2&gt;&lt;p&gt;在本节中，我们将探索使用捆绑器构建共享库并将其导入测试项目的各种选项。我们建议尝试使用独立的存储库，直到您的测试设置变得足够稳定，可以在其他项目中实施。&lt;/p&gt;&lt;p&gt;在大型应用程序中，我们希望对系统进行端到端测试，同时也独立测试系统的不同部分和应用程序范围。通常，每个项目都有自己的一组性能测试，在各个测试项目之间共享自定义库。&lt;/p&gt;&lt;p&gt;在 k6 中，重用 JS 库的最简单且首选的方法是从 URL&lt;a href="https://grafana.com/docs/k6/latest/using-k6/modules/#remote-https-modules"&gt;远程导入它们&lt;/a&gt;。这可以是 GitHub 等公共 Web 位置、托管服务器或任何 CDN。&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;import { randomItem } from &amp;#39;https://jslib.k6.io/k6-utils/1.2.0/index.js&amp;#39;; export default function () { randomItem(); }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;如果您的 JS 库由多个分成不同文件的 JavaScript 模块组成，您可能希望将它们捆绑并作为一个或多个公共模块发布，以便于使用。为此，经常使用&lt;a href="https://rollupjs.org/" rel="noopener noreferrer" target="_blank"&gt;Rollup&lt;/a&gt;和&lt;a href="https://webpack.js.org/" rel="noopener noreferrer" target="_blank"&gt;Webpack&lt;/a&gt;等模块捆绑器，执行两个主要任务：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;在不同 JS 格式之间转换代码，例如将 TypeScript 转换为纯 JavaScript。&lt;/li&gt;&lt;li&gt;将多个文件捆绑为一个或多个文件以供公开发布。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;作为参考，以下是两个将公共版本托管为 GitHub 发布资产的示例：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; &lt;a href="https://github.com/grafana/k6-jslib-aws" rel="noopener noreferrer" target="_blank"&gt;k6-jslib-aws&lt;/a&gt; ：使用 Webpack 将 TypeScript 转换为 CommonJS 模块。&lt;/li&gt;&lt;li&gt; &lt;a href="https://github.com/grafana/k6-rollup-example" rel="noopener noreferrer" target="_blank"&gt;k6-rollup-example&lt;/a&gt; ：使用 Rollup 将&lt;code&gt;test-commons&lt;/code&gt;中的各种模块组合到单个模块文件中。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如果您访问这些项目的 GitHub 发布页面，您将发现捆绑的公共模块可用作发布资产：&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/grafana-k6-getting-started/grafana-k6-getting-started-github-release-page.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="GitHub 发布页面的屏幕截图。" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="GitHub 发布页面的屏幕截图。" src="https://grafana.com/media/grafana-k6-getting-started/grafana-k6-getting-started-github-release-page.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;复制发布资产的链接并使用此 URL 从 k6 测试导入远程模块：&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;import http from &amp;#39;k6/http&amp;#39;; import { WorkloadConfig, sayHello } from &amp;#39;https://github.com/grafana/k6-rollup-example/releases/download/v0.0.2/index.js&amp;#39;; export const options = { stages: WorkloadConfig.smoke }; export default function () { console.log(sayHello()); http.get(&amp;#39;https://pizza.grafana.fun/&amp;#39;); }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;但是，如果您想在开发测试时在本地使用该库怎么办？&lt;/p&gt;&lt;p&gt;一种选择是将库作为基于 npm 的项目进行分发。 JS 生态系统非常庞大，因此毫无疑问还有其他我很想了解的方法。&lt;br /&gt;&lt;br /&gt;通过将其设置为 npm 项目，您可以通过&lt;code&gt;npm&lt;/code&gt;将库本地安装到&lt;code&gt;node_modules&lt;/code&gt;文件夹中，然后按如下方式导入：&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;import { WorkloadConfig, sayHello } from &amp;#39;test-commons&amp;#39;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;耶！但没有那么快。请记住，k6 并不在 NodeJS 上运行，也不根据 NodeJS 解析算法导入模块。因此，上面的&lt;code&gt;import&lt;/code&gt;将会失败。然而，这就是 JS 捆绑器发挥作用的地方。&lt;/p&gt;&lt;p&gt;例如， &lt;code&gt;k6-rollup-example&lt;/code&gt;使用&lt;a href="https://www.npmjs.com/package/@rollup/plugin-node-resolve" rel="noopener noreferrer" target="_blank"&gt;@rollup/plugin-node-resolve&lt;/a&gt;来定位在&lt;code&gt;node_modules&lt;/code&gt;目录中的测试中导入的模块。您只需要一个额外的命令来将测试与其依赖项捆绑在一起：&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;npm run rollup -- --input samples/import-npm-test.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;在&lt;code&gt;dist&lt;/code&gt;文件夹中， &lt;code&gt;Rollup&lt;/code&gt;将创建一个与其依赖项捆绑在一起的新测试文件。现在，您可以照常运行捆绑测试：&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;k6 run dist/import-npm-test.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id="typescript-support"&gt; TypeScript 支持&lt;/h2&gt;&lt;p&gt;TypeScript 非常适合大型项目，因为类型安全有助于防止使用库时出现错误并使代码更具可读性。&lt;/p&gt;&lt;p&gt;如果您想在 TypeScript 中编写 k6 测试，您将需要一个捆绑器，如前所示。这次，捆绑器会将 TypeScript 代码转换为&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" rel="noopener noreferrer" target="_blank"&gt;ES 模块&lt;/a&gt;或带有 CommonJS 模块的普通旧式 JavaScript (ES5.1)；两种格式都与 k6 兼容。&lt;/p&gt;&lt;p&gt;作为参考，请查看&lt;a href="https://github.com/grafana/k6-template-typescript" rel="noopener noreferrer" target="_blank"&gt;k6-template-typescript&lt;/a&gt; ，它使用 Webpack 作为捆绑器。或者，您可以在前面的 Rollup 示例中设置&lt;a href="https://github.com/rollup/plugins/tree/master/packages/typescript" rel="noopener noreferrer" target="_blank"&gt;@rollup/plugin-typescript&lt;/a&gt; 。&lt;/p&gt;&lt;p&gt;好消息是 TypeScript 支持即将推出，这意味着您无需使用自定义捆绑器设置。如果您是 k6 扩展用户，您已经可以&lt;a href="https://github.com/grafana/xk6-ts" rel="noopener noreferrer" target="_blank"&gt;在 GitHub 上试用 xk6-ts&lt;/a&gt; ，预计将在不久的将来集成到 k6 中。&lt;/p&gt;&lt;h2 id="next-steps-and-sharing-with-the-community"&gt;下一步并与社区分享！&lt;/h2&gt;&lt;p&gt;我们希望您发现这些建议很有用，并且可以应用它们来创建更好、更灵活的测试套件。实现您自己的框架和库是在整个工程组织中采用和维护性能测试实践的关键。如果您正在寻找进一步的指导，请务必查看我们的&lt;a href="https://grafana.com/docs/k6/latest/testing-guides/automated-performance-testing/"&gt;自动化性能测试指南&lt;/a&gt;。它提供了建立可重复的性能测试过程的指南。再次强调，如果您还没有阅读过，请务必查看&lt;a href="https://grafana.com/blog/2024/04/30/organizing-your-grafana-k6-performance-testing-suite-best-practices-to-get-started/"&gt;我们之前关于使用 k6 组织性能测试套件的博客文章&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;特别感谢 Grafana k6 冠军 Grzegorz Piechnik、Krzysztof Widera、Paul Maxwell-Walters 和 Sahani Perera 与我们分享他们的专业知识和经验，帮助撰写这篇文章！&lt;br /&gt;&lt;br /&gt;如果您有自己的建议或最佳实践想要分享，请将它们添加到我们的&lt;a href="https://github.com/grafana/awesome-k6?tab=readme-ov-file#examplestemplates" rel="noopener noreferrer" target="_blank"&gt;精彩 k6 示例&lt;/a&gt;列表中，并&lt;a href="https://k6io.slack.com/" rel="noopener noreferrer" target="_blank"&gt;在 Slack&lt;/a&gt;和我们的 &lt;a href="https://community.grafana.com/c/grafana-k6/70" rel="noopener noreferrer" target="_blank"&gt;社区论坛&lt;/a&gt;上分享。您的见解不仅对其他用户有用，而且还为 k6 团队考虑未来的改进提供了重要信息。&lt;/p&gt;&lt;p&gt;而且，正如我们常说的：从简单开始，然后迭代。测试愉快！&lt;/p&gt;</description><pubDate>Thu, 02 May 2024 16:44:00 GMT</pubDate><guid isPermaLink="true">https://grafana.com/blog/2024/05/02/setting-up-your-grafana-k6-performance-testing-suite-javascript-tools-shared-libraries-and-more/</guid></item><item><title>【Grafana Cloud Synthetic Monitoring: How to simulate user journeys to ensure the best possible end-user experience】Grafana 云综合监控：如何模拟用户旅程以确保最佳的最终用户体验</title><link>https://grafana.com/blog/2024/05/01/grafana-cloud-synthetic-monitoring-all-the-latest-features/</link><description>&lt;p&gt;在 Grafana Labs，我们长期致力于帮助用户从外部角度了解他们的应用程序和服务的行为方式。近十年来，这种关键实践（称为综合监控）一直是我们的重点关注点。&lt;/p&gt;&lt;p&gt;早在 2015 年，我们就发布了 worldPing，这是我们第一个帮助衡量用户体验和提高网站性能的产品。然后，在 2020 年， &lt;a href="https://grafana.com/blog/2020/10/05/intro-to-synthetic-monitoring-and-grafana-labs-new-iteration-on-worldping/"&gt;我们在 Grafana Cloud 中引入了综合监控&lt;/a&gt;，它是 worldPing 的后继者，提供了新的、更强大的功能来主动监控和增强最终用户体验。&lt;/p&gt;&lt;p&gt;今天，我们很高兴与大家分享，随着我们改进的&lt;a href="https://grafana.com/products/cloud/synthetic-monitoring/"&gt;Grafana 云综合监控&lt;/a&gt;的推出，这一发展仍在继续。由&lt;a href="https://grafana.com/oss/k6/"&gt;Grafana k6&lt;/a&gt;提供支持并具有两种新的检查类型（MultiHTTP 和脚本化），综合监控使您能够模拟最复杂的交易和用户旅程。&lt;/p&gt;&lt;div class="shortcode youtube"&gt;&lt;/div&gt;&lt;h2 id="moving-beyond-protocol-tests"&gt;超越协议测试&lt;/h2&gt;&lt;p&gt;到目前为止，综合监控使用&lt;a href="https://github.com/prometheus/blackbox_exporter" rel="noopener noreferrer" target="_blank"&gt;Prometheus 黑盒导出器&lt;/a&gt;在协议级别进行测试：HTTP、DNS、TCP、gRPC 和 ICMP（用于 ping 和 Traceroute）。这对于运行状况和正常运行时间监控非常有效，但它并没有涵盖综合监控用例的全部范围。&lt;/p&gt;&lt;p&gt;为了确保当今系统的可靠性，开发人员、平台工程师和 SRE 需要监控日益复杂的交易和关键的用户旅程。这些通常涉及多个步骤，每个步骤都需要验证。我们无法使用黑盒导出器来做到这一点，但 Grafana Labs 确实有一个专门用于此类测试的产品： &lt;a href="https://grafana.com/oss/k6/"&gt;k6&lt;/a&gt; 。&lt;/p&gt;&lt;h2 id="synthetic-monitoring-with-k6"&gt;使用 k6 进行综合监控&lt;/h2&gt;&lt;p&gt;k6 专为负载测试而设计，但它具有非常适合综合监控的功能，包括：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;用 Go 编写的高性能 JavaScript 引擎&lt;/li&gt;&lt;li&gt;旨在帮助模拟和测试真实应用程序流量的脚本 API&lt;/li&gt;&lt;li&gt;对 HTTP、WebSockets 和 gRPC 的协议支持&lt;/li&gt;&lt;li&gt;内置指标，能够添加自定义指标和日志以帮助排除故障&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;很明显，k6 可以很好地补充 Blackbox Exporter，因此在过去的一年中，我们逐渐将其集成到综合监控架构中。第一个 k6 检查类型现已可供使用。&lt;/p&gt;&lt;h2 id="introducing-multihttp-and-scripted-checks"&gt;引入 MultiHTTP 和脚本检查&lt;/h2&gt;&lt;p&gt;今天，我们推出了两项由 k6 提供支持的新功能，用于创建模拟复杂交易和用户旅程的多步骤合成：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; &lt;strong&gt;MultiHTTP 检查（普遍可用）：&lt;/strong&gt;提供基于表单的方法来定义多步骤测试。在后台，该表单会生成一个 k6 脚本，因此您无需编写代码。&lt;/li&gt;&lt;li&gt; &lt;strong&gt;k6 脚本化检查（公共预览版）：&lt;/strong&gt;为您提供在 JavaScript 中定义工作流程测试的功能和灵活性，使用&lt;a href="https://grafana.com/docs/k6/latest/javascript-api/"&gt;k6 API&lt;/a&gt;高效地编写测试。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;使用这两种类型，您可以将步骤链接在一起以模拟工作流程，将数据从一个步骤传递到下一个步骤。您可以通过定义断言来验证工作流程中的每个步骤，断言是确认您获得预期结果的布尔条件。与综合监控中的所有其他检查类型一样，您仍然可以：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;通过我们的&lt;strong&gt;API&lt;/strong&gt;和&lt;strong&gt;Terraform 提供程序&lt;/strong&gt;自动设置/部署和维护检查。&lt;/li&gt;&lt;li&gt;激活&lt;strong&gt;预构建的 Prometheus 式警报&lt;/strong&gt;（或定义您自己的警报），以主动跟踪 SLO 并通知值班团队出现问题。&lt;/li&gt;&lt;li&gt;使用&lt;strong&gt;内置仪表板&lt;/strong&gt;可视化结果、分析结果并快速访问有助于解决问题的相关日志、跟踪和指标。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="example-testing-a-workflow"&gt;示例：测试工作流程&lt;/h2&gt;&lt;p&gt;用户工作流程通常如下所示：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;登录网站或服务&lt;/li&gt;&lt;li&gt;执行一个操作（如创建对象），然后执行相反的操作（删除对象）&lt;/li&gt;&lt;li&gt;登出&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;使用综合监视器，我们可以通过不断验证该序列是否有效且足够快来确保最终用户获得良好的体验。让我们使用&lt;a href="http://test-api.k6.io" rel="noopener noreferrer" target="_blank"&gt;test-api.k6.io&lt;/a&gt;构建一个示例，它提供了一组公共端点来模拟上述工作流程步骤。我们会将其模拟为 MultiHTTP 和脚本检查，以便您可以并排比较它们。&lt;/p&gt;&lt;h3 id="multihttp"&gt;多HTTP&lt;/h3&gt;&lt;p&gt; test-api.k6.io 提供了一个简单的 REST API 来管理宠物鳄鱼列表。这些“鳄鱼”是简单的测试对象，由姓名、性别和出生日期组成。 （你可能会问，为什么是鳄鱼？因为 k6 的吉祥物是鳄鱼！）&lt;/p&gt;&lt;p&gt;我们将使用 API 执行以下操作：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;使用预定义的&lt;code&gt;&amp;quot;synthetics_test_user&amp;quot;&lt;/code&gt;登录&lt;/li&gt;&lt;li&gt;将鳄鱼对象添加到用户列表中，然后将其删除&lt;/li&gt;&lt;li&gt;登出&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;让我们仔细看看每个步骤。&lt;/p&gt;&lt;h4 id="login"&gt;登录&lt;/h4&gt;&lt;p&gt;设置作业名称、选择探测位置等后，您将指定 HTTP 请求的序列。第一个是调用&lt;a href="https://test-api.k6.io/auth/cookie/login/" rel="noopener noreferrer" target="_blank"&gt;https://test-api.k6.io/auth/cookie/login/&lt;/a&gt; ，传递带有用户名和密码的 JSON 请求正文。&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;{ &amp;quot;username&amp;quot;: &amp;quot;synthetics_test_user&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;synthetics_test_user&amp;quot; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;然后，我们将使用断言来验证结果以检查：&lt;/p&gt;&lt;ol&gt;&lt;li&gt; 200 HTTP 响应代码&lt;/li&gt;&lt;li&gt;响应正文中预期的用户名&lt;code&gt;synthetics_test_user&lt;/code&gt;&lt;/li&gt;&lt;li&gt;响应正文中预期的电子邮件地址&lt;a href="mailto:synthetics_test_user@test.com"&gt;&lt;code&gt;synthetics_test_user@test.com&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/synthetic-monitoring-grafana-cloud/synthetic_monitoring_multihttp_username_password.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="指定 HTTP 请求的屏幕截图。" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="指定 HTTP 请求的屏幕截图。" src="https://grafana.com/media/blog/synthetic-monitoring-grafana-cloud/synthetic_monitoring_multihttp_username_password.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/synthetic-monitoring-grafana-cloud/synthetic_monitoring_multiHTTP_synthetic_test_user.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="200 HTTP 响应代码的屏幕截图。" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="200 HTTP 响应代码的屏幕截图。" src="https://grafana.com/media/blog/synthetic-monitoring-grafana-cloud/synthetic_monitoring_multiHTTP_synthetic_test_user.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;请注意，此登录调用将创建一个会话 cookie，需要该 cookie 来验证后续调用。 k6 为我们处理会话 cookie，就像浏览器一样。它透明地管理 cookie 的接收、存储和传输。&lt;/p&gt;&lt;h4 id="create-and-delete"&gt;创建和删除&lt;/h4&gt;&lt;p&gt;接下来，我们调用&lt;code&gt;POST my/crocodiles/&lt;/code&gt;端点来创建一个新的 crocodile 对象，并传递包含姓名、性别和出生日期的有效负载。&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;{ &amp;quot;name&amp;quot;: &amp;quot;synthetics test object&amp;quot;, &amp;quot;sex&amp;quot;: &amp;quot;F&amp;quot;, &amp;quot;date_of_birth&amp;quot;: &amp;quot;2024-04-14&amp;quot; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;!--StartFragment--&gt;&lt;p&gt;我们将断言：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;调用成功并返回 HTTP 201 响应代码&lt;/li&gt;&lt;li&gt;JSON 响应包含预期的名称&lt;code&gt;synthetics test object&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/synthetic-monitoring-grafana-cloud/synthetic_monitoring_multihttp_request-body-payload.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="显示合成测试对象的屏幕截图。" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="显示合成测试对象的屏幕截图。" src="https://grafana.com/media/blog/synthetic-monitoring-grafana-cloud/synthetic_monitoring_multihttp_request-body-payload.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/synthetic-monitoring-grafana-cloud/synthetic_monitoring_multihttp_201_response.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="201 响应代码的屏幕截图。" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="201 响应代码的屏幕截图。" src="https://grafana.com/media/blog/synthetic-monitoring-grafana-cloud/synthetic_monitoring_multihttp_201_response.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;对于下一步，我们需要鳄鱼对象 ID。创建一个名为&lt;code&gt;objectId&lt;/code&gt;的变量，并将 JSON 响应中&lt;code&gt;id&lt;/code&gt;字段的值保存在该变量中。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/synthetic-monitoring-grafana-cloud/synthetic_monitoring_multihttp_id_field.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="创建 objectID 的屏幕截图。" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="创建 objectID 的屏幕截图。" src="https://grafana.com/media/blog/synthetic-monitoring-grafana-cloud/synthetic_monitoring_multihttp_id_field.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;现在我们将反转创建并使用&lt;code&gt;DELETE my/crocodiles/&lt;/code&gt;端点删除对象。使用保存的&lt;code&gt;objectId&lt;/code&gt;变量，我们可以构建请求路径： &lt;code&gt;https://test-api.k6.io/my/crocodiles/${objectId}/&lt;/code&gt; 。然后我们将断言响应代码是 HTTP 204。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/synthetic-monitoring-grafana-cloud/synthetic_monitoring_multihttp_204-response-code.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="204 响应代码的屏幕截图。" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="204 响应代码的屏幕截图。" src="https://grafana.com/media/blog/synthetic-monitoring-grafana-cloud/synthetic_monitoring_multihttp_204-response-code.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;h4 id="logout"&gt;登出&lt;/h4&gt;&lt;p&gt;最后，我们将调用&lt;code&gt;POST auth/cookie/logout/&lt;/code&gt;端点并断言 HTTP 200 响应代码以完成工作流程。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/synthetic-monitoring-grafana-cloud/synthetic_monitoring_multihttp_200_response.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="200 响应代码的屏幕截图。" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="200 响应代码的屏幕截图。" src="https://grafana.com/media/blog/synthetic-monitoring-grafana-cloud/synthetic_monitoring_multihttp_200_response.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;h3 id="k6-scripted"&gt; k6 脚本化&lt;/h3&gt;&lt;p&gt;我们的 MultiHTTP 检查可以完成这项工作，但随着工作流程变得越来越复杂，如果没有代码的灵活性，它们将变得更难正确模拟。以下是我们可以做的一些补充：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;创建新用户：&lt;/strong&gt;现在，我们在检查中使用同一用户。这意味着测试用户必须提前存在于每个环境中，从而降低了测试的可移植性。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;测试隔离：&lt;/strong&gt;使用共享用户从多个探针位置运行监视器意味着我们将看到并发编辑，如果我们将测试扩展到涵盖列出用户鳄鱼对象的&lt;code&gt;GET /my/crocodiles/&lt;/code&gt;等 API，则会导致不可预测的结果。通过为每个监视器执行创建一个新用户，我们可以避免这种情况。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;动态字段值：&lt;/strong&gt;为了测试一系列输入，我们可以动态生成字段值，例如姓名、性别和出生日期，这些值目前是静态的。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;让我们创建涵盖这些项目的同一工作流程的脚本版本。打开新的脚本检查、设置作业名称、选择探测位置等后，您会看到一个脚本编辑器，其中包含如下默认示例：&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;import { check } from &amp;#39;k6&amp;#39; import http from &amp;#39;k6/http&amp;#39; export default function main() { const res = http.get(&amp;#39;http://test.k6.io/&amp;#39;); // console.log will be represented as logs in Loki console.log(&amp;#39;got a response&amp;#39;) check(res, { &amp;#39;is status 200&amp;#39;: (r) =&amp;gt; r.status === 200, }); }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt; &lt;code&gt;default&lt;/code&gt;函数包含我们的测试代码。让我们开始修改这个函数来构建工作流程。&lt;/p&gt;&lt;h4 id="user-registration"&gt;用户注册&lt;/h4&gt;&lt;p&gt;通过脚本化检查，我们将使用 JavaScript 生成用户信息，并在每次执行此监视器时创建一个新用户，而不是预定义的测试用户。我们使用&lt;a href="https://k6.io/docs/javascript-api/jslib/utils/" rel="noopener noreferrer" target="_blank"&gt;&lt;code&gt;k6-utils&lt;/code&gt;&lt;/a&gt;中的 k6 &lt;code&gt;randomString&lt;/code&gt;函数生成随机的名字、姓氏、电子邮件地址和密码。&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;import { check } from &amp;#39;k6&amp;#39; import http from &amp;#39;k6/http&amp;#39; import { randomString } from &amp;#39;https://jslib.k6.io/k6-utils/1.2.0/index.js&amp;#39;; export default function() { // Generate user info const first_name = randomString(10); const last_name = randomString(10); const email = `${first_name}.${last_name}@test.com`; const password = randomString(10);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;接下来，我们将该数据传递给&lt;code&gt;user/register/&lt;/code&gt; API，然后使用&lt;code&gt;check()&lt;/code&gt;函数断言预期的 HTTP 状态代码 201。&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt;&lt;code class="language-javascript"&gt; // Generate user info const first_name = randomString(10); const last_name = randomString(10); const email = `${first_name}.${last_name}@test.com`; const password = randomString(10); // STEP 1: Register a new user let response = http.post(&amp;quot;https://test-api.k6.io/user/register/&amp;quot;, { first_name, last_name, username: email, email, password }); check(response, { &amp;#39;1. User registration&amp;#39;: (r) =&amp;gt; r.status === 201, }) || fail(`User registration failed with ${response.status}`);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id="login-1"&gt;登录&lt;/h4&gt;&lt;p&gt;然后，我们将像在 MultiHTTP 示例中那样调用&lt;code&gt;auth/cookie/login&lt;/code&gt;端点，并使用 check 函数定义一组相同的断言。并排比较此步骤的脚本版本和 MultiHTTP 版本，可以看出它们有多么相似：&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;// STEP 2: Autheticate response = http.post(&amp;quot;https://test-api.k6.io/auth/cookie/login/&amp;quot;, { username:email, password }); check(response, { &amp;quot;2a. login successful&amp;quot;: (r) =&amp;gt; r.status === 200, &amp;quot;2b. user name is correct&amp;quot;: (r) =&amp;gt; r.json(&amp;#39;first_name&amp;#39;) === first_name &amp;quot;2c. user email is correct&amp;quot;: (r) =&amp;gt; r.json(&amp;#39;email&amp;#39;) === email })&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;与等效的 MultiHTTP 部分进行比较：&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/synthetic-monitoring-grafana-cloud/synthetic_monitoring_multiHTTP_synthetic_test_user.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="等效 MultiHTTP 部分的屏幕截图。" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="等效 MultiHTTP 部分的屏幕截图。" src="https://grafana.com/media/blog/synthetic-monitoring-grafana-cloud/synthetic_monitoring_multiHTTP_synthetic_test_user.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;h4 id="create-and-delete-1"&gt;创建和删除&lt;/h4&gt;&lt;p&gt;接下来，我们将创建一个鳄鱼对象，动态生成名称、性别和出生日期。正如我们在 MultiHTTP 示例中所做的那样，我们将&lt;code&gt;id&lt;/code&gt;保存为变量，以便在调用删除 API 时使用。&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;import { check } from &amp;quot;k6&amp;quot;; import http from &amp;quot;k6/http&amp;quot;; import { randomString, randomIntBetween } from &amp;#39;https://jslib.k6.io/k6-utils/1.2.0/index.js&amp;#39;; ... // STEP 3: Create a &amp;quot;crocodile&amp;quot; object const name = randomString(10); const sex = [&amp;#39;M&amp;#39;,&amp;#39;F&amp;#39;][randomIntBetween(0,1)]; const date_of_birth = new Date().toISOString().split(&amp;#39;T&amp;#39;)[0]; response = http.post(&amp;quot;https://test-api.k6.io/my/crocodiles/&amp;quot;,{name, sex, date_of_birth}); const id = parseInt(response.json(&amp;#39;id&amp;#39;)); check( response, { &amp;quot;3a. Crocodile created and has and id&amp;quot;: (r) =&amp;gt; r.status === 201 &amp;amp;&amp;amp; id &amp;amp;&amp;amp; id &amp;gt; 0, &amp;quot;3b. Crocodile name is correct&amp;quot;: (r) =&amp;gt; r.json(&amp;#39;name&amp;#39;) === name }); // STEP 4: Delete the &amp;quot;crocodile&amp;quot; // (The http.url helper will group distinct URLs together in the metrics) response = http.del(http.url`https://test-api.k6.io/my/crocodiles/${id}/`); check( response, { &amp;quot;4a. Crocodile was deleted&amp;quot;: (r) =&amp;gt; r.status === 204 })&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id="logout-1"&gt;登出&lt;/h4&gt;&lt;p&gt;我们将通过注销来完成工作流程。&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt;&lt;code class="language-javascript"&gt; // STEP 5: Logout response = http.post(`https://test-api.k6.io/auth/cookie/logout/`); check( response, { &amp;quot;5a. Logout successful&amp;quot;: (r) =&amp;gt; r.status === 200, });&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;这是完整的脚本：&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;import {check, fail} from &amp;quot;k6&amp;quot;; import http from &amp;quot;k6/http&amp;quot;; import { randomString, randomIntBetween } from &amp;#39;https://jslib.k6.io/k6-utils/1.2.0/index.js&amp;#39;; export default function() { // User info const first_name = randomString(10); const last_name = randomString(10); const email = `${first_name}.${last_name}@test.com`; const password = randomString(10); // STEP 1: Register a new user let response = http.post(&amp;quot;https://test-api.k6.io/user/register/&amp;quot;, { first_name, last_name, username: email, email, password }); check(response, { &amp;#39;1. User registration&amp;#39;: (r) =&amp;gt; r.status === 201, }) || fail(`User registration failed with ${response.status}`); // STEP 2: Autheticate response = http.post(&amp;quot;https://test-api.k6.io/auth/cookie/login/&amp;quot;, { username:email, password }); check(response, { &amp;quot;2a. login successful&amp;quot;: (r) =&amp;gt; r.status === 200, &amp;quot;2b. user name is correct&amp;quot;: (r) =&amp;gt; r.json(&amp;#39;first_name&amp;#39;) === first_name, &amp;quot;2c. user email is correct&amp;quot;: (r) =&amp;gt; r.json(&amp;#39;email&amp;#39;) === email }); // STEP 3: Create a &amp;quot;crocodile&amp;quot; object const name = randomString(10); const sex = [&amp;#39;M&amp;#39;,&amp;#39;F&amp;#39;][randomIntBetween(0,1)]; const date_of_birth = new Date().toISOString().split(&amp;#39;T&amp;#39;)[0]; response = http.post(&amp;quot;https://test-api.k6.io/my/crocodiles/&amp;quot;,{name, sex, date_of_birth}); const id = parseInt(response.json(&amp;#39;id&amp;#39;)); check( response, { &amp;quot;3a. Crocodile created and has and id&amp;quot;: (r) =&amp;gt; r.status === 201 &amp;amp;&amp;amp; id &amp;amp;&amp;amp; id &amp;gt; 0, &amp;quot;3b. Crocodile name is correct&amp;quot;: (r) =&amp;gt; r.json(&amp;#39;name&amp;#39;) === name, }) || fail(`Crocodile creation failed with status ${response.status}`); // STEP 4: Delete the &amp;quot;crocodile&amp;quot; // (The http.url helper will group distinct URLs together in the metrics) response = http.del(http.url`https://test-api.k6.io/my/crocodiles/${id}/`); check( response, { &amp;quot;4a. Crocodile was deleted&amp;quot;: (r) =&amp;gt; r.status === 204 }) // STEP 5: Logout response = http.post(`https://test-api.k6.io/auth/cookie/logout/`); check( response, { &amp;quot;5a. Logout successful&amp;quot;: (r) =&amp;gt; r.status === 200 }); }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id="bonus-lets-run-a-load-test"&gt;奖励：让我们运行负载测试&lt;/h3&gt;&lt;p&gt;现在我们已经有了用于此工作流程的 k6 脚本，我们可以在开发生命周期的其他部分使用它。可重用的脚本使团队无需维护类似但独立的测试场景，从而提高协作和效率。例如，开发人员可以在 CI 管道中使用用于综合监控的相同脚本，并且卓越测试中心可以使用它来运行自动化功能测试或在代码到达生产之前执行负载测试。&lt;/p&gt;&lt;p&gt;让我们转到 Grafana Cloud k6 并使用相同的脚本运行小型负载测试（这里，我们使用&lt;a href="https://grafana.com/products/cloud/k6/"&gt;Grafana Cloud k6&lt;/a&gt; ，我们完全托管的性能测试解决方案，但如果您跨环境共享工作流程，您的代码可能位于存储库中并且您需要使用&lt;a href="https://registry.terraform.io/providers/grafana/grafana/latest/docs" rel="noopener noreferrer" target="_blank"&gt;Terraform 提供&lt;/a&gt;程序进行合成并使用&lt;a href="https://grafana.com/docs/k6/latest/get-started/running-k6/"&gt;k6 CLI&lt;/a&gt;进行负载测试）。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/synthetic-monitoring-grafana-cloud/synthetic_monitoring_load_test_script.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="k6 中的测试脚本。" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="k6 中的测试脚本。" src="https://grafana.com/media/blog/synthetic-monitoring-grafana-cloud/synthetic_monitoring_load_test_script.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;使用我们用于综合监控的相同脚本，我们可以配置其他&lt;a href="https://grafana.com/docs/k6/latest/using-k6/k6-options/"&gt;选项&lt;/a&gt;来控制测试持续时间、并发性等（请记住，现在这是性能测试！），然后运行负载测试以获得下面的输出。 （&lt;em&gt;注意：test-api.k6.io 是一个共享的公共测试环境，因此请不要对其运行重负载测试。&lt;/em&gt; ）&lt;/p&gt;&lt;p&gt;这为我们提供了工作流程步骤的结果以及性能见解。我们可以将其作为 CI 管道的一部分运行，或者作为开发或登台环境中的预定负载测试。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/synthetic-monitoring-grafana-cloud/sythentic_monitoring_performance_overview.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="k6 中的性能报告。" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="k6 中的性能报告。" src="https://grafana.com/media/blog/synthetic-monitoring-grafana-cloud/sythentic_monitoring_performance_overview.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;h2 id="next-steps"&gt;下一步&lt;/h2&gt;&lt;p&gt;k6 脚本化和 MultiHTTP 检查允许您监控复杂的事务、工作流程和关键用户旅程。通过脚本化检查，您可以享受 JavaScript 的强大功能和灵活性，而 MultiHTTP 则为您提供熟悉的基于表单的方法，而无需编写代码。这些新检查只是我们使用 k6 可以做的事情的表面。在不久的将来，我们希望将更多 k6 的功能添加到综合监控中，例如支持使用&lt;a href="https://grafana.com/docs/k6/latest/using-k6-browser/"&gt;k6-browser 模块&lt;/a&gt;进行测试！&lt;/p&gt;&lt;p&gt;如需了解更多信息并开始使用综合监控，您可以查看我们的&lt;a href="https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/"&gt;技术文档&lt;/a&gt;。&lt;/p&gt;&lt;p&gt; &lt;em&gt;&lt;a href="https://grafana.com/products/cloud/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Cloud&lt;/a&gt;是开始综合监控的最简单方法。我们有一个慷慨的永久免费套餐，其中包括每月 10 万次测试执行等等。 &lt;a href="https://grafana.com/auth/sign-up/create-user?pg=plugins&amp;amp;plcmt=grafana-synthetic-monitoring-app"&gt;现在免费注册&lt;/a&gt;！&lt;/em&gt;&lt;/p&gt;</description><pubDate>Wed, 01 May 2024 09:37:00 GMT</pubDate><guid isPermaLink="true">https://grafana.com/blog/2024/05/01/grafana-cloud-synthetic-monitoring-all-the-latest-features/</guid></item><item><title>【Organizing your Grafana k6 performance testing suite: Best practices to get started】组织您的 Grafana k6 性能测试套件：入门最佳实践</title><link>https://grafana.com/blog/2024/04/30/organizing-your-grafana-k6-performance-testing-suite-best-practices-to-get-started/</link><description>&lt;p&gt;2017 年，我们开源了 Grafana k6，并向所有人提供了第一个测试版。这不是我们的第一次牛仔竞技 - k6 标志着我们团队十多年来开发的第三个负载测试工具。我们已经认识到现有解决方案的差距，以及阻碍开发者社区采用的障碍。&lt;/p&gt;&lt;p&gt;该计划既简单又雄心勃勃：让我们构建一个开发人员真正喜欢使用的工具&lt;em&gt;，并&lt;/em&gt;帮助工程团队构建更可靠的软件。 k6 是我们团队的第一个 JavaScript 脚本化工具。&lt;/p&gt;&lt;p&gt;自早期以来，我们已经取得了长足的进步，但我们仍然听到新用户提出同样的常见问题： &lt;em&gt;“我应该如何使用 k6 构建我的性能测试项目？”&lt;/em&gt;&lt;/p&gt;&lt;p&gt;在这篇博文中，我们提供了一些&lt;a href="https://grafana.com/oss/k6/"&gt;Grafana k6&lt;/a&gt;入门指南，然后分享了&lt;strong&gt;组织性能测试套件的最佳实践列表。&lt;/strong&gt;无论您使用开源 Grafana k6 还是&lt;a href="https://grafana.com/products/cloud/k6/"&gt;Grafana Cloud k6&lt;/a&gt; （我们完全托管的性能测试平台），这些实践都将帮助您更快地进行规划和提升。&lt;/p&gt;&lt;h2 id="getting-started-with-k6"&gt; k6 入门&lt;/h2&gt;&lt;p&gt;对于许多团队来说，开始使用 k6（或者一般来说是性能测试）是一个新的旅程。我们的一般建议很简单，旨在揭开这一过程的神秘面纱：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;像对待任何其他类型的测试套件一样对待它。&lt;/li&gt;&lt;li&gt;从简单开始，然后迭代。基本的连续测试比根本不测试要好。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;让我们进一步深入探讨每一点。&lt;/p&gt;&lt;h3 id="treat-it-as-you-would-any-other-kind-of-testing-suite"&gt;像对待任何其他类型的测试套件一样对待它&lt;/h3&gt;&lt;p&gt;工程团队通常在遇到严重的可靠性问题后开始进行性能测试。但为了更加主动并在潜在的可靠性问题发生之前解决它们，您应该像进行任何其他类型的频繁测试一样接受性能测试。&lt;/p&gt;&lt;p&gt;也许，对于其他类型的测试，您可以根据失败风险、关键业务流程或问题频率来确定优先级。在使用 k6 进行性能测试时，您可以采用相同的策略和原则。 （不过，有一些具体的事情需要记住——更多内容见下文。）&lt;/p&gt;&lt;h3 id="start-simple-and-iterate"&gt;从简单开始并迭代&lt;/h3&gt;&lt;p&gt;这一切都从一些测试开始，随着团队获得更多的经验和信心，性能测试套件自然会扩展。与其他类型的测试一样，性能测试成功的关键在于采用持续测试方法。 （我将放弃在本博客中深入探讨“原因”，但要深入了解该主题，请查看我的同事 Marie Cruz 撰写的&lt;a href="https://dzone.com/articles/a-continuous-testing-approach-to-performance" rel="noopener noreferrer" target="_blank"&gt;这篇文章&lt;/a&gt;，该文章与&lt;a href="https://grafana.com/docs/k6/latest/testing-guides/automated-performance-testing/"&gt;k6 自动化指南&lt;/a&gt;完美搭配。）&lt;/p&gt;&lt;h2 id="it-is-just-another-testing-suite--but-often-has-a-broader-scope"&gt;它&lt;em&gt;只是&lt;/em&gt;另一个测试套件 - 但通常具有更广泛的范围&lt;/h2&gt;&lt;p&gt;同样，我们希望您像对待任何其他类型的测试一样对待性能测试。也就是说，承认性能测试的具体特征并揭穿很难的神话是至关重要的。&lt;/p&gt;&lt;p&gt;我时常听到性能工程师专家说“性能测试很难”，但我的看法却截然不同。困难通常来自于孤立的操作，而不是来自性能测试实践本身。&lt;/p&gt;&lt;p&gt;更具体地说，当领导测试工作的人员不完全熟悉操作系统或其实现细节时，通常会出现挑战。在这种情况下，编写测试、了解系统性能并调查潜在问题确实会很困难。如果您发现自己处于这种情况，请与开发人员密切合作， &lt;a href="https://k6.io/modern-load-testing-for-engineering-teams/#work-with-developers-to-shift-testing-left" rel="noopener noreferrer" target="_blank"&gt;“将测试左移”&lt;/a&gt;并采用全团队测试方法。&lt;br /&gt;&lt;br /&gt;作为一名开发人员，如果有一定的测试经验，性能测试的做法是比较简单的。简而言之，它就像自动化功能测试，但增加了负载维度。数据参数化虽然可能很棘手，但肯定是易于管理的。&lt;/p&gt;&lt;p&gt;将其视为一个循环：测试、开发、再次测试。冲洗并重复，直到您可以验证系统在模拟负载下按预期运行（基于您的关键可靠性指标）。&lt;br /&gt;&lt;br /&gt;有几个方面需要牢记，使性能测试与其他测试类型不同，这些方面影响我们测试套件的设计：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;不同的测试环境。&lt;/strong&gt;我们的系统或应用程序通常部署在多个环境中：开发、QA、预生产、生产等。出于不同目的在不同环境中运行相同的测试是很常见的，通常具有不同的工作负载（这引出了我的下一点…… ）&lt;/li&gt;&lt;li&gt;&lt;strong&gt;使用不同的工作负载进行测试。&lt;/strong&gt;被测系统在中等流量、高负载流量和峰值流量下的表现通常有所不同。因此，通常运行不同的&lt;a href="https://grafana.com/docs/k6/latest/testing-guides/test-types/"&gt;负载测试类型&lt;/a&gt;来验证预期流量模式下的性能。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;可靠性是团队努力的结果。&lt;/strong&gt;应用程序的可靠性取决于底层子系统的可靠性。无论可靠性和质量保证的组织方法或测试方法如何，负责这些不同系统和服务的所有团队都参与测试至关重要。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这些方面带来了挑战，需要灵活的测试方法。&lt;/p&gt;&lt;h2 id="four-best-practices-for-performance-testing-suites"&gt;性能测试套件的四个最佳实践&lt;/h2&gt;&lt;p&gt;多年来，k6 团队在性能测试套件中观察到了一些常见模式。在这里，我们将概述这些常见和一般的最佳实践，其中还包括&lt;a href="https://k6.io/champions-program/" rel="noopener noreferrer" target="_blank"&gt;Grafana k6 冠军&lt;/a&gt;Grzegorz Piechnik、Krzysztof Widera、Paul Maxwell-Walters 和 Sahani Perera 的建议。我们感谢他们与社区分享他们的专业知识！&lt;/p&gt;&lt;p&gt;&lt;em&gt;注意：以下部分提供了模式概述，示例仅供参考。每个项目都可以以自己独特的方式实现这些模式。&lt;/em&gt;&lt;/p&gt;&lt;h3 id="1-modularize-test-configurations"&gt; 1. 模块化测试配置&lt;/h3&gt;&lt;p&gt;模块化测试对于跨不同环境和工作负载重用测试至关重要。这种模块化方法提供了更大的灵活性，增强了测试维护，并促进了团队成员之间的协作。&lt;/p&gt;&lt;p&gt;首先，使用&lt;a href="https://grafana.com/docs/k6/latest/using-k6/environment-variables/"&gt;环境变量&lt;/a&gt;指定不同的基本端点：&lt;/p&gt;&lt;div class="code-snippet code-snippet__mini"&gt;&lt;div class="lang-toolbar__mini"&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="code-snippet code-snippet__border"&gt;&lt;pre&gt;&lt;code class="language-none"&gt;k6 run -e BASE_URL=https://pizza.grafana.fun script.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;然后，您的测试脚本可以通过&lt;code&gt;__ENV&lt;/code&gt;变量读取该值，确保测试代码保持不变：&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;const BASE_URL = __ENV.BASE_URL || &amp;#39;http://localhost:3333&amp;#39;; let res = http.get(`${BASE_URL}/api/pizza`);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;或者，您可以使用密钥对对象来存储每个环境的设置。当每个环境有多个设置时，这是更好的选择：&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;const EnvConfig = { dev: { BASE_URL: &amp;#39;http://localhost:3333&amp;#39;, MY_FLAG: true } qa: { BASE_URL: &amp;#39;https://pizza.qa.grafana.fun&amp;#39;, MY_FLAG: true }, pre: { BASE_URL: &amp;#39;https://pizza.ste.grafana.fun&amp;#39;, MY_FLAG: false }, prod: { BASE_URL: &amp;#39;https://pizza.grafana.fun&amp;#39;, MY_FLAG: false } }; const Config = EnvConfig[__ENV.ENVIRONMENT] || EnvConfig[&amp;#39;dev&amp;#39;]; const BASE_URL = Config.BASE_URL;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;注意：请记住不要在配置文件中存储敏感数据。对于基于云的测试，请考虑使用&lt;a href="https://grafana.com/docs/grafana-cloud/k6/author-run/cloud-scripting-extras/cloud-environment-variables/"&gt;云环境变量&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;&lt;p&gt;我们之前的测试现在可以针对托管应用程序的四个环境运行。例如：&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;k6 run -e ENVIRONMENT=prod script.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;我们还可以将相同的方法应用于不同的工作负载（流量）。为了简单起见，使用相同的方法设置 k6 工作负载，无论是&lt;a href="https://grafana.com/docs/k6/latest/get-started/running-k6/#ramp-vus-up-and-down-in-stages"&gt;阶段&lt;/a&gt;还是&lt;a href="https://grafana.com/docs/k6/latest/using-k6/scenarios/"&gt;场景&lt;/a&gt;。这是使用阶段的示例：&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;const WorkloadConfig = { average: [ { duration: &amp;#39;1m&amp;#39;, target: 100 }, { duration: &amp;#39;4m&amp;#39;, target: 100 }, { duration: &amp;#39;1m&amp;#39;, target: 0 }, ], stress: [ { duration: &amp;#39;1m&amp;#39;, target: 700 }, { duration: &amp;#39;4m&amp;#39;, target: 700 }, { duration: &amp;#39;1m&amp;#39;, target: 0 }, ], smoke: [{ duration: &amp;#39;10s&amp;#39;, target: 1 }], }; const stages = WorkloadConfig[__ENV.WORKLOAD] || WorkloadConfig[&amp;#39;smoke&amp;#39;]; export const options = { stages: stages, };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;我们的测试现在配置为运行三种不同的工作负载。因此，我们设计了一项针对 3 种工作负载和 4 种环境的测试——单次测试有 12 种组合。&lt;/p&gt;&lt;p&gt;我们的目标是为各种场景创建其他测试，例如不同的 API 或用户流程。当然，重用工作负载和环境设置的想法似乎很理想，对吗？我们会这么做的。但是，请务必记住，并非每个测试和环境都适合所有工作负载。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;并非所有用户流都会收到相同的流量。&lt;/strong&gt;有些操作比其他操作处理更多的流量。对于流量较低或较高的场景，通常适合将工作负载区分为几个子级别，例如&lt;code&gt;averageLow&lt;/code&gt;和&lt;code&gt;averageHigh&lt;/code&gt; 。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;并非所有测试都在所有环境中执行。&lt;/strong&gt;每个环境配置不同的基础设施设置并支持不同的容量。开发或 QA 环境不会设置与生产或预生产相同的资源和可扩展性策略。在没有高可用性设置的环境中运行压力测试没有什么意义。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;专注于性能回归。&lt;/strong&gt;预发布环境很少完全复制生产环境的基础架构。不要期望两个环境在相同流量下表现相同。我们不应该痴迷于在所有环境中使用相同的工作负载。目标是建立&lt;a href="https://grafana.com/docs/grafana-cloud/k6/analyze-results/test-comparison/#use-a-test-as-a-baseline"&gt;性能基线&lt;/a&gt;的工作负载，然后进行频繁的测试来识别性能变化（回归）。&lt;/p&gt;&lt;p&gt;考虑到这些方面，我们的工作负载设置可能会演变为以下内容：&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;// config/workload.js export const WorkloadConfig = { smoke: [...], stag: { averageLow: [...], averageMed: [...], averageHigh: [...], stress: [...], }, pre: { averageLow: [...], averageMed: [...], averageHigh: [...], stress: [...], peak: [...], }, prod: {...} };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;前面的代码片段是用于演示目的的基本示例。不同的团队可能有不同的方法来组织配置文件。有些团队可能只使用一个配置文件来设置环境和工作负载，而其他团队可能更喜欢按数据类型拆分配置文件，如下所示：&lt;/p&gt;&lt;div class="code-snippet code-snippet__mini"&gt;&lt;div class="lang-toolbar__mini"&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="code-snippet code-snippet__border"&gt;&lt;pre&gt;&lt;code class="language-none"&gt;├── config/ │ ├── workloads.js │ └── settings.js ├── test1.js └── test2.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;另一种替代方法是按环境分隔配置文件，并使用 Bundler 仅加载必要的设置。下面显示了一个示例，要了解更多信息，您可以阅读&lt;a href="https://grafana.com/blog/2024/05/02/setting-up-your-grafana-k6-performance-testing-suite-javascript-tools-shared-libraries-and-more/"&gt;我们有关 JavaScript 工具、模块和 TypeScript 的相关博客文章&lt;/a&gt;：&lt;/p&gt;&lt;div class="code-snippet code-snippet__mini"&gt;&lt;div class="lang-toolbar__mini"&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="code-snippet code-snippet__border"&gt;&lt;pre&gt;&lt;code class="language-none"&gt;├── config/ │ ├── dev.js │ ├── pre.js │ └── prod.js ├── test1.js └── test2.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;您可以随意组织这些配置文件，使其最适合您的特定环境和测试流程。您可能会经历几次迭代，创建更多测试，直到您的配置设置变得更加稳定。&lt;/p&gt;&lt;p&gt;尽管每个测试环境和场景都是独特的，但某些测试组通常共享范围和实现细节。因此，这些和许多其他&lt;a href="https://grafana.com/docs/k6/latest/using-k6/k6-options/reference"&gt;k6 选项&lt;/a&gt;可以模块化，以进一步优化您的 k6 测试套件。&lt;/p&gt;&lt;p&gt;&lt;a href="https://grafana.com/docs/k6/latest/using-k6/thresholds/"&gt;阈值&lt;/a&gt;是一个常见且重要的考虑因素。您很可能已经在所有测试或特定测试组中定义了一些通用阈值。为了结束本节，以下是&lt;strong&gt;模块化阈值的示例：&lt;/strong&gt;&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;export const ThresholdsConfig = { common: { http_req_duration: [&amp;#39;p(99)&amp;lt;1000&amp;#39;], http_req_failed: [&amp;#39;rate&amp;lt;0.01&amp;#39;] }, pre: { instant: { http_req_duration: [&amp;#39;p(99)&amp;lt;300&amp;#39;], }, }, prod:{} };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;然后，测试可以导入并配置其阈值，如下所示：&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;import { ThresholdsConfig } from &amp;#39;./config/thresholds.js&amp;#39;; let thresholds = Object.assign({}, ThresholdsConfig.common, ThresholdsConfig.pre.instant); export const options = { thresholds: thresholds, };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id="2-implement-reusable-test-scenarios"&gt; 2. 实施可重用的测试场景&lt;/h3&gt;&lt;p&gt;我们的应用程序运行的每个环境通常都有不同的用途。因此，在多个环境中运行相同的“测试场景”（即相同的虚拟用户 (VU) 和测试逻辑）是很常见的，每个环境都有不同的目标。&lt;/p&gt;&lt;p&gt;例如，冒烟测试（最小负载）可能会在 QA 环境中运行以进行功能测试或检查测试错误。然后，可以针对预发布环境执行相同的测试场景以验证 SLO 指标，同时在生产中安排夜间测试以评估性能变化。简而言之，&lt;strong&gt;同一个场景为了不同的目标在多个环境中进行测试。&lt;/strong&gt;&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/grafana-k6-getting-started/grafana-k6-getting-started-guide-test-scenario-diagram.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="描述可重用测试场景的图表。" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="描述可重用测试场景的图表。" src="https://grafana.com/media/grafana-k6-getting-started/grafana-k6-getting-started-guide-test-scenario-diagram.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;在此类情况下，或者当您想要与现有测试结合运行场景时，有必要实现可重用的测试场景（VU 逻辑）。以下是构建测试和模块化场景的示例：&lt;/p&gt;&lt;div class="code-snippet code-snippet__mini"&gt;&lt;div class="lang-toolbar__mini"&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="code-snippet code-snippet__border"&gt;&lt;pre&gt;&lt;code class="language-none"&gt;├── scenarios/ │ ├── e2e/ | │ ├── checkout.js │ | └── read-news.js │ └── apis/ │ └── account.js ├── tests/ │ ├── smoke-read-news-test.js │ ├── pre/ | │ ├── stress-read-news-test.js │ | └── avg-read-news-test.js │ └── prod/ │ └── nightly-read-news-test.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;重用场景时，避免将场景逻辑与其他测试概念耦合。请考虑以下准则：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;实施可以扩展其默认行为的模块化场景。&lt;/li&gt;&lt;li&gt;使&lt;a href="https://grafana.com/docs/k6/latest/using-k6/metrics/create-custom-metrics/"&gt;自定义指标&lt;/a&gt;的使用成为可选。&lt;/li&gt;&lt;li&gt;避免&lt;a href="https://grafana.com/docs/k6/latest/using-k6/tags-and-groups/#groups"&gt;团体&lt;/a&gt;使用。&lt;/li&gt;&lt;li&gt;&lt;a href="https://grafana.com/docs/k6/latest/using-k6/tags-and-groups/#user-defined-tags"&gt;标记&lt;/a&gt;请求和检查（以及适当时的自定义指标）。&lt;/li&gt;&lt;li&gt;为了获得更大的灵活性，请使用&lt;a href="https://grafana.com/docs/k6/latest/using-k6/scenarios/"&gt;场景&lt;/a&gt;来设置工作负载。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;不要想太多。首先实施场景，以便在多个测试中重用它们。当您计划新测试时，一个常见的问题是是否扩展现有测试或创建新测试。&lt;br /&gt;&lt;br /&gt;在大多数情况下，我们建议避免多用途测试，并建议为每个场景进行新的测试，每个环境都有一个主要目的，如前所述。这可以防止混合职责，并有助于跟踪同一测试的历史结果，以识别长时间内的性能变化。&lt;/p&gt;&lt;p&gt;如果您有模块化的测试配置和测试场景，那么创建新的基本测试可能就像导入一些模块并调整一些设置一样简单：&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;// tests/pre/avg-read-news-test.js import { WorkloadConfig, EnvConfig } from &amp;#39;./config/workload.js&amp;#39;; import ReadNewsScenario from &amp;#39;./scenarios/read-news.js&amp;#39;; const Config = EnvConfig.pre; const stages = WorkloadConfig.pre.averageMed; export const options = { stages: stages, } export default function () { ReadNewsScenario(Config.BASE_URL); }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;此示例展示了如何轻松地通过重用现有模块来创建新测试。&lt;/p&gt;&lt;h3 id="3-create-object-oriented-models-for-data-access"&gt; 3. 创建面向对象的数据访问模型&lt;/h3&gt;&lt;p&gt;实现 API 客户端是与各种类型的 API（例如 RESTful 或 GraphQL）交互的常见模式。 API 客户端封装对后端的请求，抽象出 API 和 k6 的实现细节。&lt;/p&gt;&lt;p&gt;随着请求复杂性的增加或测试套件的增长，API 客户端成为我们的中心点，使与后端的交互变得更加容易。如果 API 发生变化，则只需更新客户端，而不是所有测试。&lt;br /&gt;&lt;br /&gt;这种模式还可以更快地编写新测试并且更容易理解测试代码。这对于团队协作特别有用，当团队成员不熟悉 API 规范或 k6 API 时尤其重要。&lt;/p&gt;&lt;p&gt;以下客户端包含访问所有 API 资源的方法：&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;export class APIClient { constructor(token, baseUrl, addCheck) {...} create(type, data, options) {... return {data, res};} find(type, id, options) {... return {data, res};} update(type, id, data, options) {... return {data, res};} remove(type, id, options) {... return {res};} }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;上面的例子作为基本参考。根据 API，您可以选择一个通用客户端或多个客户端，每个客户端适用于从 BaseClass 扩展的特定 API 范围。&lt;/p&gt;&lt;p&gt;该模式的方法应该封装检索和操作数据的逻辑，为其他测试人员提供直观的 API。这些方法应始终返回响应，使每个测试能够根据其特定场景管理响应及其数据。&lt;br /&gt;&lt;br /&gt;作为一般建议，不要将额外的责任归入客户端，并避免非一般情况下的自定义行为。有些人喜欢没有额外责任的客户，而另一些人则更喜欢包含通用逻辑，例如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;使用&lt;a href="https://grafana.com/docs/k6/latest/using-k6/checks/"&gt;检查&lt;/a&gt;验证预期的响应状态&lt;/li&gt;&lt;li&gt;&lt;a href="https://grafana.com/blog/2024/04/30/organizing-your-grafana-k6-performance-testing-suite-best-practices-to-get-started/#4-create-an-error-handling-wrapper"&gt;处理错误响应的报告&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;封装与数据交互的细节的面向对象模型是一种常见的软件模式，并且在性能测试中可能是有益的。此模式不限于 HTTP 请求，因为它可以是与测试代码中的数据或协议进行任何类型交互的有用抽象。例如，下面是一个&lt;a href="https://grafana.com/docs/k6/latest/using-k6-browser/recommended-practices/page-object-model-pattern/"&gt;使用 k6 浏览器与 HTML 页面元素交互的页面对象示例&lt;/a&gt;。&lt;/p&gt;&lt;h3 id="4-create-an-error-handling-wrapper"&gt; 4. 创建错误处理包装器&lt;/h3&gt;&lt;p&gt;如果您已经开始使用 k6，您可能已经注意到 k6 OSS 默认报告有限的错误信息。它只输出 HTTP 请求失败率&lt;a href="https://grafana.com/docs/k6/latest/using-k6/metrics/reference/#http"&gt;&lt;code&gt;http_req_failed&lt;/code&gt;&lt;/a&gt; ：&lt;/p&gt;&lt;div class="code-snippet code-snippet__mini"&gt;&lt;div class="lang-toolbar__mini"&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="code-snippet code-snippet__border"&gt;&lt;pre&gt;&lt;code class="language-none"&gt;http_req_failed................: 36.36% ✓ 40 ✗ 70&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;因此，用户通常会进行&lt;a href="https://grafana.com/docs/k6/latest/using-k6/checks/"&gt;检查&lt;/a&gt;来验证响应状态并了解每个特定请求发生的情况。&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;check(res, { &amp;#39;GET item is 200&amp;#39;: (r) =&amp;gt; r.status === 200, });&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;✗ GET item is 200 ↳ 63% — ✓ 70 / ✗ 40&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;但是，请记住，如果您&lt;a href="https://grafana.com/docs/k6/latest/results-output/"&gt;流式传输 k6 结果&lt;/a&gt;（指标数据点），这些数据点将包括响应状态等信息。在这种情况下，用户可以找到响应法规，而无需实施这些检查：&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link captioned" href="https://grafana.com/media/grafana-k6-getting-started/grafana-k6-getting-started-guide-requests-by-URL.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="A screenshot showing response statuses. " class="lazyload mb-0" title="*使用 Grafana 仪表板可视化 k6 请求结果。*" /&gt; &lt;noscript&gt;&lt;img alt="A screenshot showing response statuses. " src="https://grafana.com/media/grafana-k6-getting-started/grafana-k6-getting-started-guide-requests-by-URL.png" title="*使用 Grafana 仪表板可视化 k6 请求结果。*" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;figcaption class="w-100p caption mb-1 text-gray-13 "&gt;&lt;em&gt;使用 Grafana 仪表板可视化 k6 请求结果。&lt;/em&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;默认情况下，检查不会导致测试失败。因此，k6 check API 通常用于“信息性”断言；用户倾向于利用检查来提供测试执行的自定义报告。&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;✗ GET item is 200 ↳ 63% — ✓ 70 / ✗ 40 ✓ Add item is 201 ↳ 100% — ✓ 110 / ✗ 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;然而，这些检查缺乏额外的错误信息，并且可能需要更详细的信息才能在故障排除时更有帮助。&lt;br /&gt;&lt;br /&gt;为了在测试期间收集更多错误信息，&lt;strong&gt;我们的第一个建议是重点通过&lt;a href="https://grafana.com/docs/grafana-cloud/introduction/what-is-observability/"&gt;可观察性&lt;/a&gt;或使用检测应用程序的监控解决方案来查找这些错误&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;传统上，性能测试主要集中在测试工具本身内收集结果，通常独立运行。这导致系统操作方面缺乏可见性。&lt;/p&gt;&lt;p&gt;首先了解系统的运行方式及其遥测数据。然后，将您的测试结果与可观测性数据连接起来。您应该能够找到可观察性解决方案中的所有错误，这将指导您将错误与其根本原因联系起来。这就是最终的测试目标。要了解有关如何将测试数据与可观测性数据连接的更多信息，请参阅：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://grafana.com/docs/k6/latest/results-output/grafana-dashboards/"&gt;适用于 k6 OSS 的 Grafana 仪表板&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://grafana.com/docs/k6/latest/javascript-api/k6-experimental/tracing/"&gt;k6/实验/跟踪模块&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://grafana.com/docs/grafana-cloud/k6/analyze-results/correlate-results-in-grafana/"&gt;Grafana Cloud k6：关联 Grafana 中的结果&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;尽管如此，在测试报告中包含错误数据还是很有用的。在 k6 中，有两个常见选项用于存储附加错误信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;记录错误数据并将&lt;a href="https://k6.io/blog/using-loki-to-store-and-query-k6-logs/" rel="noopener noreferrer" target="_blank"&gt;k6 日志输出到 Grafana Loki&lt;/a&gt;或文件，或使用 Grafana Cloud k6。&lt;/li&gt;&lt;li&gt;创建&lt;a href="https://grafana.com/docs/k6/latest/using-k6/metrics/create-custom-metrics/"&gt;自定义计数器指标&lt;/a&gt;来跟踪错误数据。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;首先考虑要存储哪些数据，具体取决于您正在处理一般错误还是特定错误，并基于现有的可用可观测性/遥测数据。&lt;/p&gt;&lt;p&gt;另外，请记住，高负载测试可能会失败数千或数百万次，可能需要您存储大量数据。例如，您可以选择存储端点 URL、错误消息、TraceID 或任何相关的请求或响应详细信息。&lt;br /&gt;&lt;br /&gt;作为参考，下面是一个&lt;code&gt;ErrorHandler&lt;/code&gt;示例，它接受回调来指示处理程序如何记录错误详细信息：&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;class ErrorHandler { constructor(logErrorDetails) { this.logErrorDetails = logErrorDetails; } logError(isError, res, tags = {}) { if (!isError) return; const traceparentHeader = res.request.headers[&amp;#39;Traceparent&amp;#39;]; const errorData = Object.assign( { url: res.url, status: res.status, error_code: res.error_code, traceparent: traceparentHeader &amp;amp;&amp;amp; traceparentHeader.toString(), }, tags ); this.logErrorDetails(errorData); } }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;接下来，实例化&lt;code&gt;ErrorHandler&lt;/code&gt;并传递自定义回调以确定如何记录错误详细信息：&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;const errorHandler = new ErrorHandler((error) =&amp;gt; {console.error(error);}); // or const errors = new CounterMetric(&amp;#39;errors&amp;#39;); const errorHandler = new ErrorHandler((error) =&amp;gt; {errors.add(1, error);});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;然后，从场景或 API 客户端调用它，如下所示：&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;checkStatus = check(res, { &amp;#39;status is 200&amp;#39;: (res) =&amp;gt; res.status === 200 }); errorHandler.logError(!checkStatus, res);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id="next-steps-and-sharing-with-the-community"&gt;后续步骤并与社区分享&lt;/h2&gt;&lt;p&gt;我们希望这些建议可以帮助您实施更好、更灵活的性能测试套件。如果您正在寻找进一步的指导，请务必查看&lt;a href="https://grafana.com/blog/2024/05/02/setting-up-your-grafana-k6-performance-testing-suite-javascript-tools-shared-libraries-and-more/"&gt;我们的相关博客文章&lt;/a&gt;，其中探讨了如何使用 JavaScript 工具、模块、共享库等设置 k6 性能测试套件。&lt;/p&gt;&lt;p&gt;您还可以参考我们的&lt;a href="https://grafana.com/docs/k6/latest/testing-guides/automated-performance-testing/"&gt;自动化性能测试指南&lt;/a&gt;，该指南提供了建立可重复性能测试流程的指南。&lt;/p&gt;&lt;p&gt;再次特别感谢 Grafana k6 Champions，他们通过与我们分享他们的专业知识和经验来帮助制定这篇文章！&lt;br /&gt;&lt;br /&gt;如果您有自己的建议或最佳实践想要分享，请将它们添加到我们的&lt;a href="https://github.com/grafana/awesome-k6?tab=readme-ov-file#examplestemplates" rel="noopener noreferrer" target="_blank"&gt;精彩 k6 示例&lt;/a&gt;列表中，并&lt;a href="https://k6io.slack.com/" rel="noopener noreferrer" target="_blank"&gt;在 Slack&lt;/a&gt;和我们的 &lt;a href="https://community.grafana.com/c/grafana-k6/70" rel="noopener noreferrer" target="_blank"&gt;社区论坛&lt;/a&gt;上分享。您的见解不仅对其他用户有用，而且还为 k6 团队考虑未来的改进提供了重要信息。&lt;/p&gt;&lt;p&gt;而且，正如我们常说的：从简单开始，然后迭代。测试愉快！&lt;/p&gt;</description><pubDate>Tue, 30 Apr 2024 11:13:00 GMT</pubDate><guid isPermaLink="true">https://grafana.com/blog/2024/04/30/organizing-your-grafana-k6-performance-testing-suite-best-practices-to-get-started/</guid></item><item><title>【PTO peace of mind: Sync Grafana OnCall with Google Calendar out-of-office events】PTO 安心：将 Grafana OnCall 与 Google 日历外出活动同步</title><link>https://grafana.com/blog/2024/04/29/pto-peace-of-mind-sync-grafana-oncall-with-google-calendar-out-of-office-events/</link><description>&lt;p&gt;有时，小事可以产生很大的影响。&lt;/p&gt;&lt;p&gt;我们在&lt;a href="https://grafana.com/products/cloud/irm/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana 事件和响应管理&lt;/a&gt;(IRM) 中添加了一项新功能，可让您将 Google 日历外出活动与&lt;a href="https://grafana.com/products/cloud/oncall/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana OnCall&lt;/a&gt;同步。这样做，您的团队将确保其值班班次得到保障，同时您的工程师也可以确信，当他们在海滩度假、坐在医生办公室或在医院时，他们的手机上不会收到意外警报。当他们在工作日历上划出一些私人时间时，可以做他们想做的任何其他事情。&lt;/p&gt;&lt;p&gt;我们最近在内部推出了这一功能（所有 Grafana Labs 工程师轮流值班），我们收到了大量积极的反馈。因此，虽然这不是我们对 Grafana OnCall 所做的最大的工作流程改变（而且我们&lt;a href="https://grafana.com/blog/2023/08/31/a-better-grafana-oncall-web-based-scheduling-mobile-app-email-support/"&gt;最近&lt;/a&gt;&lt;a href="https://grafana.com/blog/2024/03/29/a-better-grafana-oncall-seamless-workflows-with-the-rest-of-grafana-cloud/"&gt;做了&lt;/a&gt;&lt;a href="https://grafana.com/blog/2023/09/18/a-better-grafana-oncall-delivering-on-features-for-users-at-scale/"&gt;很多&lt;/a&gt;改变），但它应该让您和您的团队更加安心，无论您是管理小组日程还是花时间离开。让我们看看它是如何工作的。&lt;/p&gt;&lt;h2 id="simplify-your-on-call-scheduling"&gt;简化您的待命安排&lt;/h2&gt;&lt;p&gt;去年，我们向 Grafana OnCall &lt;a href="https://grafana.com/blog/2023/09/28/introducing-grafana-oncall-shift-swaps-a-simpler-way-to-exchange-on-call-shifts-with-teammates/"&gt;添加了轮班交换功能&lt;/a&gt;。这为待命工程师提供了一种便捷的方式，让他们可以在团队成员不可用时找到他们交换排班。 &lt;a href="https://grafana.com/docs/oncall/latest/manage/on-call-schedules/shift-swaps/?pg=blog&amp;amp;plcmt=body-txt#google-calendar-integration"&gt;Google 日历集成&lt;/a&gt;更进一步，当您知道自己即将无法工作时，该过程会自动执行。&lt;/p&gt;&lt;p&gt;该集成将您的 Grafana OnCall 用户与您的 Google 日历用户连接起来，并为 Grafana OnCall 提供对您的 Google 日历活动（特别是外出活动）的读取访问权限。然后，Grafana OnCall 将定期检查您的日历中是否有外出活动，如果活动与待命轮班重叠，它将自动生成轮班交换请求。&lt;/p&gt;&lt;h3 id="how-to-connect-with-google-calendar"&gt;如何与 Google 日历连接&lt;/h3&gt;&lt;p&gt;要设置集成，请转至 Grafana OnCall“用户”页面上的&lt;strong&gt;查看我的个人资料&lt;/strong&gt;，然后按照&lt;strong&gt;Google 日历选项&lt;/strong&gt;卡下列出的步骤进行操作。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/oncall-google-calendar-sync/oncall-user-info-arrow.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="Grafana OnCall 用户信息表单，其中箭头指向 Google 日历选项卡" class="lazyload " /&gt; &lt;noscript&gt;&lt;img alt="Grafana OnCall 用户信息表单，其中箭头指向 Google 日历选项卡" src="https://grafana.com/media/blog/oncall-google-calendar-sync/oncall-user-info-arrow.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/oncall-google-calendar-sync/sync-meta.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="Grafana OnCall 中的 Google 日历选项卡要求连接服务" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="Grafana OnCall 中的 Google 日历选项卡要求连接服务" src="https://grafana.com/media/blog/oncall-google-calendar-sync/sync-meta.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;链接后，您将拥有其他配置选项。默认情况下，Grafana OnCall 将查看用户所属的所有待命计划，并在这些计划与外出活动重叠时创建轮班交换。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/oncall-google-calendar-sync/shift-swap-calendar.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="轮班交换请求" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="轮班交换请求" src="https://grafana.com/media/blog/oncall-google-calendar-sync/shift-swap-calendar.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;或者，您可以选择哪些待命时间表符合轮班交换的条件。如果您是多个待命日历的一部分，并且您不希望被自动从一个或多个日历中删除，那么这一点就会发挥作用。在这种情况下，您仍然可以选择手动请求换班。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/oncall-google-calendar-sync/specific-calendar-sync.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="在 Google 日历选项卡中指定日程同步选项" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="在 Google 日历选项卡中指定日程同步选项" src="https://grafana.com/media/blog/oncall-google-calendar-sync/specific-calendar-sync.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;您还可以通过将&lt;code&gt;#grafana-oncall-ignore&lt;/code&gt;添加到 Google 日历中的活动标题，让 Grafana OnCall 忽略特定事件。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;此集成在 Grafana Cloud 中自动可用。如果您使用 Grafana OnCall OSS，请按照&lt;a href="https://grafana.com/docs/oncall/latest/manage/on-call-schedules/shift-swaps/?pg=blog&amp;amp;plcmt=body-txt#configuring-for-open-source"&gt;此处概述的步骤&lt;/a&gt;配置连接。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="a-better-user-experience-with-grafana-oncall"&gt; Grafana OnCall 提供更好的用户体验&lt;/h2&gt;&lt;p&gt;值班轮班可能会带来压力，因此当事情出现问题时，您最不需要的就是增加压力的工具。正如我们之前提到的，我们在 Grafana Labs 都是轮班值班，所以这是一个我们非常关心的话题。&lt;/p&gt;&lt;p&gt;我们一直在努力使 Grafana OnCall 成为一个&lt;a href="https://grafana.com/blog/2023/08/31/a-better-grafana-oncall-web-based-scheduling-mobile-app-email-support/"&gt;用户友好的工具&lt;/a&gt;，添加了基于 Web 的调度、本机移动应用程序和电子邮件支持等功能。我们对未来几个月计划的其他创新感到兴奋，敬请期待！&lt;/p&gt;&lt;p&gt; &lt;em&gt;&lt;a href="https://grafana.com/products/cloud/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Cloud&lt;/a&gt;是开始使用指标、日志、跟踪、仪表板等的最简单方法。我们为每个用例提供慷慨的永久免费套餐和计划。&lt;a href="https://grafana.com/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt"&gt;现在免费注册&lt;/a&gt;！&lt;/em&gt;&lt;/p&gt;</description><pubDate>Mon, 29 Apr 2024 00:00:00 GMT</pubDate><guid isPermaLink="true">https://grafana.com/blog/2024/04/29/pto-peace-of-mind-sync-grafana-oncall-with-google-calendar-out-of-office-events/</guid></item><item><title>【GrafanaCON 2024: On-demand sessions are now available!】GrafanaCON 2024：点播会议现已推出！</title><link>https://grafana.com/blog/2024/04/25/grafanacon-2024-on-demand-sessions-are-now-available/</link><description>&lt;p&gt;4 月 9 日至 10 日，我们在阿姆斯特丹举办了年度 GrafanaCON 活动。 &lt;a href="https://grafana.com/about/events/grafanacon/2024/?pg=blog&amp;amp;plcmt=body-txt"&gt;GrafanaCON 2024&lt;/a&gt;专注于 Grafana 及其扩展的开源生态系统，议程紧凑，包括为期两天的技术讲座和用户成功案例，重点介绍了我们的社区成员使用 Grafana 的所有令人难以置信的方式。&lt;/p&gt;&lt;p&gt;今天，我们很高兴地告诉大家，GrafanaCON 2024 会议可以按需提供！因此，如果您无法亲自参加我们的售罄活动，您现在可以在家中了解所有最新公告、OSS 更新和鼓舞人心的社区用例。&lt;/p&gt;&lt;p&gt;在这里，我们重点介绍一些您今天就可以开始观看的 GrafanaCON 2024 点播会议。要查看活动点播会议的完整阵容，您可以访问&lt;a href="https://grafana.com/about/events/grafanacon/2024/?pg=blog&amp;amp;plcmt=body-txt"&gt;GrafanaCON 2024 网站&lt;/a&gt;。&lt;/p&gt;&lt;h2 id="from-the-grafana-labs-team"&gt;来自 Grafana 实验室团队&lt;/h2&gt;&lt;p&gt;在 GrafanaCON 2024 上，Grafana Labs 团队成员分享了我们 OSS 项目的最新进展，以及推进可观测性策略的最佳实践和见解。一些点播会议包括： &lt;/p&gt;&lt;h3 id="grafanacon-2024-opening-keynotehttpsgrafanacomabouteventsgrafanacon2024keynote-grafana-11pgblogplcmtbody-txt"&gt; &lt;a href="https://grafana.com/about/events/grafanacon/2024/keynote-grafana-11/?pg=blog&amp;amp;plcmt=body-txt"&gt;GrafanaCON 2024 开幕主题演讲&lt;/a&gt;&lt;/h3&gt;&lt;figure class="figure-wrapper w-100p "&gt;&lt;a class="lightbox-link" href="https://grafana.com/about/events/grafanacon/2024/keynote-grafana-11/"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="GrafanaCON 2024 开幕主题演讲的会议卡。" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="GrafanaCON 2024 开幕主题演讲的会议卡。" src="https://grafana.com/media/grafanacon/2024/ondemand/OpeningKeynote_vidthumb_2.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt; Grafana Labs 首席执行官兼联合创始人 Raj Dutt 宣布了 Golden Grot 社区仪表板奖的获奖者，我们的工程团队成员围绕我们的开源可观测性项目发布了一些令人兴奋的公告。最后，Grafana 的创建者 Torkel Ödegaard 公布了 Grafana 11 的新增功能。 &lt;/p&gt;&lt;h3 id="introducing-grafana-alloy-a-distribution-of-the-otel-collectorhttpsgrafanacomabouteventsgrafanacon2024introducing-otel-collector-distribution-grafana-alloypgblogplcmtbody-txt"&gt; &lt;a href="https://grafana.com/about/events/grafanacon/2024/introducing-otel-collector-distribution-grafana-alloy/?pg=blog&amp;amp;plcmt=body-txt"&gt;隆重推出 Grafana Alloy，它是 OTel Collector 的一个发行版&lt;/a&gt;&lt;/h3&gt;&lt;figure class="figure-wrapper w-100p "&gt;&lt;a class="lightbox-link" href="https://grafana.com/about/events/grafanacon/2024/introducing-otel-collector-distribution-grafana-alloy/"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="GrafanaCON 2024 的 Grafana 合金会议的会议卡。" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="GrafanaCON 2024 的 Grafana 合金会议的会议卡。" src="https://grafana.com/media/grafanacon/2024/ondemand/GrafanaCON24-Introducing-Alloy.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;向格拉法纳合金问好！ Grafana Labs 的 OpenTelemetry Collector 发行版汇集了 OTel 和 Prometheus 的精华，提供真正优化的混合体验，特别是与 Grafana Cloud 配合使用时。 Grafana Alloy 使用组件构建可观测性管道，以进行遥测收集、处理和交付。在本次会议中，高级软件工程师 Matt Durham 和 Paschalis Tsilias 深入探讨 Alloy 及其配置语言的核心概念，探索其新的调试功能，并展示如何迁移到 Grafana Alloy。他们还讨论了 Grafana Alloy 在 OpenTelemetry 领域的地位、其作为收集器的角色，以及如何使用它与现有基础设施并行收集 OTel 信号。您将了解如何使用支持的 OTel 组件构建 OTel 原生和混合管道。 &lt;/p&gt;&lt;h3 id="grafana-11-deep-divehttpsgrafanacomabouteventsgrafanacon2024grafana-11-deep-divepgblogplcmtbody-txt"&gt; &lt;a href="https://grafana.com/about/events/grafanacon/2024/grafana-11-deep-dive/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana 11 深潜&lt;/a&gt;&lt;/h3&gt;&lt;figure class="figure-wrapper w-100p "&gt;&lt;a class="lightbox-link" href="https://grafana.com/about/events/grafanacon/2024/grafana-11-deep-dive/"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="GrafanaCON 2024 的 Grafana 11 深入研究会议的会议卡。" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="GrafanaCON 2024 的 Grafana 11 深入研究会议的会议卡。" src="https://grafana.com/media/grafanacon/2024/ondemand/GrafanaCON24-Grafana-11-deep-dive.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;在本次会议中，您将深入了解 Grafana 11 为何成为您连接数据、以美观且实用的方式可视化数据、与其他人共享数据以及响应事件的更好方式。除了概述 Grafana 11 的新增功能外，本次演讲还演示了一些我们最喜欢的功能。&lt;/p&gt;&lt;p&gt;对于 Grafana 的操作人员，产品总监 Mitch Seaman 和工程总监 Mihaela Maior 介绍了 Grafana 11 如何帮助您：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;加入新团队，&lt;/li&gt;&lt;li&gt;大规模管理您的仪表板和警报，以及&lt;/li&gt;&lt;li&gt;管理升级、安全性和更大的环境。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;开源开发人员还将学习开发和发布应用程序、数据源和面板的新方法，以扩展 Grafana 的多种用途。 &lt;/p&gt;&lt;h3 id="5-years-in-loki-turns-30httpsgrafanacomabouteventsgrafanacon2024loki-30-release-otel-support-bloom-filterpgblogplcmtbody-txt"&gt; &lt;a href="https://grafana.com/about/events/grafanacon/2024/loki-3.0-release-otel-support-bloom-filter/?pg=blog&amp;amp;plcmt=body-txt"&gt;5 年后，Loki 3.0 版&lt;/a&gt;&lt;/h3&gt;&lt;figure class="figure-wrapper w-100p "&gt;&lt;a class="lightbox-link" href="https://grafana.com/about/events/grafanacon/2024/loki-3.0-release-otel-support-bloom-filter/"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="GrafanaCON 2024 的 Grafana 11 深入研究会议的会议卡。" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="GrafanaCON 2024 的 Grafana 11 深入研究会议的会议卡。" src="https://grafana.com/media/grafanacon/2024/ondemand/GrafanaCON24-Loki-turns-3.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt; Grafana Loki 于 2018 年底在西雅图的 KubeCon + CloudNativeCon 上发布，五年后，这个流行的日志项目发布了 3.0 版本。在本次会议中，Loki 维护者 Owen Diehl 讨论了主要版本的亮点 - 原生 OTel 支持、bloom-filter 查询加速等 - 以及未来的发展：使 Loki 成为适合所有人的通用工具，具有更高的规模，降低面向用户的复杂性，并降低成本。 &lt;/p&gt;&lt;h3 id="a-users-guide-to-the-open-source-grafana-app-platformhttpsgrafanacomabouteventsgrafanacon2024grafana-app-platform-introductionpgblogplcmtbody-txt"&gt; &lt;a href="https://grafana.com/about/events/grafanacon/2024/grafana-app-platform-introduction/?pg=blog&amp;amp;plcmt=body-txt"&gt;开源 Grafana 应用平台的用户指南&lt;/a&gt;&lt;/h3&gt;&lt;figure class="figure-wrapper w-100p "&gt;&lt;a class="lightbox-link" href="https://grafana.com/about/events/grafanacon/2024/grafana-app-platform-introduction/"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="GrafanaCON 2024 的应用程序平台会议的会议卡。" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="GrafanaCON 2024 的应用程序平台会议的会议卡。" src="https://grafana.com/media/grafanacon/2024/ondemand/GrafanaCON24-App-platform.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;根据构建和运行 SLO 应用程序的经验教训，Grafana Labs 推出了开源 Grafana 应用程序平台，帮助开发人员创建与 Grafana 紧密集成的类似复杂应用程序。在本次演讲中，杰出工程师 Ryan McKinley 和高级软件工程师 Stephanie Hingtgen 演示了应用程序平台的主要功能，包括对象和 API 的架构和版本控制、对象存储、监视对象、对象准入控制以及代码功能。&lt;/p&gt;&lt;h2 id="from-the-community"&gt;来自社区&lt;/h2&gt;&lt;p&gt;用户的声音是任何 GrafanaCON 活动的基石。今年，社区成员登台分享他们如何使用 Grafana 及其扩展的开源生态系统来实现一些令人着迷、富有创意和（毫不夸张）出色的用例。我们的一些点播 GrafanaCON 2024 用户故事包括： &lt;/p&gt;&lt;h3 id="how-cern-monitors-the-worlds-largest-computing-grid-with-grafana-and-mimirhttpsgrafanacomabouteventsgrafanacon2024cern-monitors-largest-computing-grid-with-grafana-and-mimirpgblogplcmtbody-txt"&gt; &lt;a href="https://grafana.com/about/events/grafanacon/2024/cern-monitors-largest-computing-grid-with-grafana-and-mimir/?pg=blog&amp;amp;plcmt=body-txt"&gt;CERN 如何使用 Grafana 和 Mimir 监控世界上最大的计算网格&lt;/a&gt;&lt;/h3&gt;&lt;figure class="figure-wrapper w-100p "&gt;&lt;a class="lightbox-link" href="https://grafana.com/about/events/grafanacon/2024/cern-monitors-largest-computing-grid-with-grafana-and-mimir/"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="GrafanaCON 2024 的 CERN 会议的会议卡。" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="GrafanaCON 2024 的 CERN 会议的会议卡。" src="https://grafana.com/media/grafanacon/2024/ondemand/GrafanaCON24-CERN.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;欧洲核研究组织 (CERN) 可能因大型强子对撞机 (LHC) 的所在地而闻名，该机构每天产生约 PB 的数据，但没有多少人了解这台令人印象深刻的机器周围的计算基础设施。欧洲核子研究组织拥有自己的数据中心，用于收集实验数据并将其提供给世界各地的物理学家。 CERN 数据中心也是全球最大计算网格 WLCG 的核心层，连接来自 42 个国家的 170 多个站点，累计拥有约 140 万个计算机内核。在本次演讲中，CERN 计算工程师 Nikolay Tsvetkov 概述了 CERN 监控服务，以及它如何利用 Grafana 和 Mimir 最有效地向 IT 服务经理和 WLCG 专家提供基本监控信息。 &lt;/p&gt;&lt;h3 id="grafana-in-space-monitoring-japans-slim-moon-lander-in-real-timehttpsgrafanacomabouteventsgrafanacon2024grafana-used-to-monitor-japan-slim-moon-landerpgblogplcmtbody-txt"&gt; &lt;a href="https://grafana.com/about/events/grafanacon/2024/grafana-used-to-monitor-japan-slim-moon-lander/?pg=blog&amp;amp;plcmt=body-txt"&gt;太空中的 Grafana：实时监控日本的 SLIM 月球着陆器&lt;/a&gt;&lt;/h3&gt;&lt;figure class="figure-wrapper w-100p "&gt;&lt;a class="lightbox-link" href="https://grafana.com/about/events/grafanacon/2024/grafana-used-to-monitor-japan-slim-moon-lander"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="GrafanaCON 2024 的 JAXA 会议的会议卡。" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="GrafanaCON 2024 的 JAXA 会议的会议卡。" src="https://grafana.com/media/grafanacon/2024/ondemand/GrafanaCON24-Grafana-in-space.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt; 1 月 19 日，日本成为第五个登陆月球的国家——格拉法纳就在那里！在本次会议中，JAXA 副高级研究员 Satoshi Nakahira 概述了 ISAS 空间科学任务和 SLIM 月球着陆器，并讨论了团队如何使用 Grafana 来实现航天局科学卫星和探测器的实时状态监测系统，包括SLIM 月球着陆器操作的实施和实际数据。 &lt;/p&gt;&lt;h3 id="how-planted-ramps-up-food-production-faster-with-grafanas-single-pane-of-glasshttpsgrafanacomabouteventsgrafanacon2024planted-food-tech-utilizes-grafana-as-single-pane-of-glasspgblogplcmtbody-txt"&gt; &lt;a href="https://grafana.com/about/events/grafanacon/2024/planted-food-tech-utilizes-grafana-as-single-pane-of-glass/?pg=blog&amp;amp;plcmt=body-txt"&gt;Planted 如何利用 Grafana 的单一管理平台更快地提高粮食产量&lt;/a&gt;&lt;/h3&gt;&lt;figure class="figure-wrapper w-100p "&gt;&lt;a class="lightbox-link" href="https://grafana.com/about/events/grafanacon/2024/planted-food-tech-utilizes-grafana-as-single-pane-of-glass"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="GrafanaCON 2024 的 Planted 会议的会议卡。" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="GrafanaCON 2024 的 Planted 会议的会议卡。" src="https://grafana.com/media/grafanacon/2024/ondemand/GrafanaCON24-Planted.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;植物肉是一个快速增长的行业，受到消费者寻求在不牺牲动物肉的情况下减少动物肉消费的需求不断增长的推动。在这个竞争激烈的市场中，产品改进、创新和产量提升的速度至关重要。在本次会议中，Planted 数据科学主管 Mathias Pawlowsky 讨论了这家总部位于苏黎世的食品科技公司如何利用 Grafana 作为所有生产数据的单一管理平台，以及轻松访问数据如何实现更好、更快的决策、更快的提升，并最终向世界提供更多植物蛋白食品。您将了解 Grafana 的核心功能如何帮助生产团队监控机器并分析流程数据以进行根本原因分析，以及 Grafana 通过插件的可扩展性如何允许他们通过数据操作面板收集人工输入、分析图像，甚至通过 API 调用控制机器使用 Infinity 插件。 &lt;/p&gt;&lt;h3 id="from-silence-to-signals-data-management-and-monitoring-at-the-national-library-of-the-netherlandshttpsgrafanacomabouteventsgrafanacon2024data-management-and-monitoring-at-national-library-of-the-netherlandspgblogplcmtbody-txt"&gt; &lt;a href="https://grafana.com/about/events/grafanacon/2024/data-management-and-monitoring-at-national-library-of-the-netherlands/?pg=blog&amp;amp;plcmt=body-txt"&gt;从沉默到信号：荷兰国家图书馆的数据管理和监控&lt;/a&gt;&lt;/h3&gt;&lt;figure class="figure-wrapper w-100p "&gt;&lt;a class="lightbox-link" href="https://grafana.com/about/events/grafanacon/2024/data-management-and-monitoring-at-national-library-of-the-netherlands/"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="荷兰国家图书馆举办的 GrafanaCON 2024 演讲的会议卡。" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="荷兰国家图书馆举办的 GrafanaCON 2024 演讲的会议卡。" src="https://grafana.com/media/grafanacon/2024/ondemand/GrafanaCON24-Library-of-Netherlands.png" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;为了履行为数字时代保存和提供荷兰文献的使命，荷兰国家图书馆进行了重大转变，从静态数据环境转变为交互式、信号丰富的监控平台。在本次演讲中，平台工程师 Gerard van Engelen 解释了实施 Grafana 可视化、Mimir 的指标和 Loki 的日志如何帮助荷兰国家图书馆获得对其数字环境（从性能问题到安全问题）的宝贵见解。荷兰国家图书馆的历程为其他旨在实现数据管理和监控系统现代化的文化和历史机构提供了令人信服的案例研究。&lt;/p&gt;&lt;p&gt;&lt;em&gt;您可以在&lt;a href="https://grafana.com/about/events/grafanacon/2024/"&gt;GrafanaCON 2024 网站&lt;/a&gt;上查看所有这些点播会议及更多内容。如果您想探索其他即将举行的活动（无论是现场活动还是虚拟活动），请查看 Grafana Labs&lt;a href="https://grafana.com/about/events/?pg=blog&amp;amp;plcmt=body-txt"&gt;活动页面&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;</description><pubDate>Thu, 25 Apr 2024 15:32:00 GMT</pubDate><guid isPermaLink="true">https://grafana.com/blog/2024/04/25/grafanacon-2024-on-demand-sessions-are-now-available/</guid></item></channel></rss>