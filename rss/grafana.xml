<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Grafana Labs 上的 Grafana Labs 博客</title><link>https://grafana.com/blog/</link><description>Grafana Labs 上的 Grafana Labs 博客中的最​​新内容</description><lastBuildDate>Sat, 22 Jun 2024 03:06:03 GMT</lastBuildDate><generator>rfeed v1.1.1</generator><docs>https://github.com/svpino/rfeed/blob/master/README.md</docs><item><title>【Shorten your feedback loop: Java observability with OpenTelemetry, Grafana Cloud, and Digma.ai】</title><link>https://grafana.com/blog/2024/06/21/shorten-your-feedback-loop-java-observability-with-opentelemetry-grafana-cloud-and-digma.ai/</link><description>&lt;p&gt;&lt;em&gt;Ron Dover 是&lt;a href="http://digma.ai" rel="noopener noreferrer" target="_blank"&gt;Digma.ai&lt;/a&gt;的首席技术官兼联合创始人，Digma.ai 是一个用于代码运行时 AI 分析的 IDE 插件，可帮助加速复杂代码库的开发。 Ron 是循证开发的坚定拥护者，也是软件工程各个方面持续反馈的支持者。&lt;/em&gt;&lt;/p&gt;&lt;p&gt;传统上，软件开发人员依赖简单的日志来了解代码执行和解决问题。指标、跟踪、仪表板和仪表主要属于 IT 和基础设施团队的领域，这使得开发人员对其应用程序性能的了解有限。这种职责划分通常意味着开发人员只能在出现问题时被动地使用可观察性工具。&lt;/p&gt;&lt;p&gt;随着现代可观测性解决方案的出现，情况正在发生变化。 &lt;a href="https://grafana.com/oss/opentelemetry/?pg=blog&amp;amp;plcmt=body-txt"&gt;OpenTelemetry&lt;/a&gt;等工具简化了 Java 应用程序的跟踪，Grafana 等平台提供了更清晰的应用程序性能视图，使可观察性对开发人员更加友好。此外，像&lt;a href="http://digma.ai" rel="noopener noreferrer" target="_blank"&gt;Digma.ai&lt;/a&gt;这样的专业工具正在弥合仪表板和日常编码工作流程之间的差距，使开发人员能够在整个开发生命周期中主动利用可观察性。&lt;/p&gt;&lt;p&gt;但这在实践中是如何运作的呢？如果可观察性所做的只是聚合数据，那么它对任何人都没有任何好处。因此，我们在本博客中的目标将是演示开发人员如何通过&lt;strong&gt;缩短反馈循环&lt;/strong&gt;将可观察性付诸实际应用。具体来说，我们希望缩短从引入错误或问题到开发人员意识到问题及其根源之间的持续时间。&lt;/p&gt;&lt;h2 id="connecting-a-java-app-to-grafana-cloud-and-digmaai"&gt;将 Java 应用程序连接到 Grafana Cloud 和 Digma.ai&lt;/h2&gt;&lt;p&gt;对于我们的示例场景，我们将示例 Spring Boot 应用程序连接到&lt;a href="https://grafana.com/products/cloud/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Cloud&lt;/a&gt; 。我们还将使用 Digma.ai，这是一种持续反馈工具，可以直接在 IDE 中分析应用程序跟踪。为了让这更有趣，我们将使用一种名为&lt;a href="https://grafana.com/oss/alloy-opentelemetry-collector/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Alloy 的&lt;/a&gt;新技术，这是一种基于组件且易于使用的&lt;a href="https://opentelemetry.io/docs/collector/" rel="noopener noreferrer" target="_blank"&gt;OpenTelemetry Collector 开源发行版。&lt;/a&gt;使用 Alloy 是配置我们要收集哪些数据以及要将数据发送到何处的简单方法。完整的管道将如下所示：&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/java-digma/java-workflow.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/java-digma/java-workflow.png"data-srcset="/media/blog/java-digma/java-workflow.png?w=320 320w, /media/blog/java-digma/java-workflow.png?w=550 550w, /media/blog/java-digma/java-workflow.png?w=750 750w, /media/blog/java-digma/java-workflow.png?w=900 900w, /media/blog/java-digma/java-workflow.png?w=1040 1040w, /media/blog/java-digma/java-workflow.png?w=1240 1240w, /media/blog/java-digma/java-workflow.png?w=1920 1920w"
data-sizes="auto"alt="工作流程图"
width="1462"
height="464"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/java-digma/java-workflow.png"
alt="工作流程图"
width="1462"
height="464"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;此示例的代码位于&lt;a href="https://github.com/doppleware/spring-petclinic-cf" target="_blank" rel="noopener noreferrer"&gt;此 GitHub 存储库&lt;/a&gt;中。&lt;/p&gt;&lt;h2 id="how-to-connect-your-java-app-to-grafana-cloud"&gt;如何将 Java 应用程序连接到 Grafana Cloud&lt;/h2&gt;&lt;p&gt;您需要一个 Grafana Cloud 帐户才能开始。如果您还没有，您可以使用此&lt;a href="/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt"&gt;链接&lt;/a&gt;注册免费套餐（大约需要五秒钟）。&lt;/p&gt;&lt;p&gt;完成后，我们需要获取大量输入来继续我们的设置并将数据发送到新创建的应用程序可观察性实例！在 Grafana 主页上，单击 OpenTelemetry 框中的&lt;strong&gt;配置&lt;/strong&gt;按钮： &lt;/p&gt;&lt;figure
class="figure-wrapper figure-wrapper__lightbox w-100p "
style="max-width: 502px;"
itemprop="associatedMedia"
itemscope=""
itemtype="http://schema.org/ImageObject"
&gt; &lt;a
class="lightbox-link"
href="/media/blog/java-digma/otel-configure.png"
itemprop="contentUrl"
&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/java-digma/otel-configure.png"data-srcset="/media/blog/java-digma/otel-configure.png?w=320 320w, /media/blog/java-digma/otel-configure.png?w=550 550w, /media/blog/java-digma/otel-configure.png?w=750 750w, /media/blog/java-digma/otel-configure.png?w=900 900w, /media/blog/java-digma/otel-configure.png?w=1040 1040w, /media/blog/java-digma/otel-configure.png?w=1240 1240w, /media/blog/java-digma/otel-configure.png?w=1920 1920w"
data-sizes="auto"alt="OpenTelemetry 配置按钮"
width="502"
height="148"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/java-digma/otel-configure.png"
alt="OpenTelemetry 配置按钮"
width="502"
height="148"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;在 OTel 页面中，我们需要复制稍后需要的一些参数，如下面的屏幕截图所示： &lt;/p&gt;&lt;figure
class="figure-wrapper figure-wrapper__lightbox w-100p "
style="max-width: 926px;"
itemprop="associatedMedia"
itemscope=""
itemtype="http://schema.org/ImageObject"
&gt; &lt;a
class="lightbox-link"
href="/media/blog/java-digma/otlp-endpoint.png"
itemprop="contentUrl"
&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/java-digma/otlp-endpoint.png"data-srcset="/media/blog/java-digma/otlp-endpoint.png?w=320 320w, /media/blog/java-digma/otlp-endpoint.png?w=550 550w, /media/blog/java-digma/otlp-endpoint.png?w=750 750w, /media/blog/java-digma/otlp-endpoint.png?w=900 900w, /media/blog/java-digma/otlp-endpoint.png?w=1040 1040w, /media/blog/java-digma/otlp-endpoint.png?w=1240 1240w, /media/blog/java-digma/otlp-endpoint.png?w=1920 1920w"
data-sizes="auto"alt="OTLP 端点菜单"
width="926"
height="565"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/java-digma/otlp-endpoint.png"
alt="OTLP 端点菜单"
width="926"
height="565"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;ol&gt;&lt;li&gt; &lt;strong&gt;OTLP 端点&lt;/strong&gt;：我们将把所有应用程序可观察性发送到该目的地。&lt;/li&gt;&lt;li&gt; &lt;strong&gt;Grafana 实例 ID&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;创建一个&lt;strong&gt;API 令牌&lt;/strong&gt;，稍后我们将在连接到 Grafana Cloud 实例时使用它。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;将这些值复制到安全的地方；我们将在稍后的设置中使用它们。&lt;/p&gt;&lt;h3 id="start-and-configure-the-grafana-alloy-container"&gt;启动并配置 Grafana Alloy 容器&lt;/h3&gt;&lt;p&gt;Grafana Alloy 容器将充当我们的可观测性“路由器”，收集并聚合我们的可观测性数据，然后将其传输到 Grafana Cloud 实例和 Digma。&lt;/p&gt;&lt;p&gt;我们将首先在示例应用程序下创建一个“observability”子文件夹。我们将在此处存储与配置可观察性管道相关的所有内容。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;在新的可观测性子文件夹下创建一个名为&lt;code&gt;config.river&lt;/code&gt;的新文件。此合金配置使用受 Terraform 启发的配置语言。粘贴以下文本并保存文件：&lt;/li&gt;&lt;/ol&gt;&lt;div class="code-snippet code-snippet__mini"&gt;&lt;div class="lang-toolbar__mini"&gt; &lt;span class="code-clipboard"&gt;&lt;button x-data="app_code_snippet()" x-init="init()" @click="copy()"&gt;&lt;img class="code-clipboard__icon" src="/media/images/icons/icon-copy-small-2.svg" alt="将代码复制到剪贴板" width="14" height="13"&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="code-snippet code-snippet__border"&gt;&lt;pre data-expanded="false"&gt; &lt;code class="language-none"&gt;//Basic authentication otelcol.auth.basic &amp;quot;grafana_auth&amp;quot; { username = env(&amp;quot;GRAFANA_CLOUD_INSTANCE_ID&amp;quot;) password = env(&amp;quot;GRAFANA_CLOUD_API_TOKEN&amp;quot;) } // Define the &amp;#39;Receiver&amp;#39; ingesting the data sent out from our app otelcol.receiver.otlp &amp;quot;default&amp;quot; { // configures the default grpc endpoint &amp;quot;0.0.0.0:4317&amp;quot; grpc { } // configures the default http/protobuf endpoint &amp;quot;0.0.0.0:4318&amp;quot; http { } output { traces = [otelcol.processor.batch.default.input] } } //The &amp;#39;processor&amp;#39; optimizes the network throughput by batching the output otelcol.processor.batch &amp;quot;default&amp;quot; { output { traces = [otelcol.exporter.otlp.digma.input,otelcol.exporter.otlphttp.grafana_cloud.input] } } //Our two exporters will send the data both to Digma (to analytize our code observability, and to our Grafana cloud instance otelcol.exporter.otlp &amp;quot;digma&amp;quot; { // Send traces to Digma without TLS enabled. client { endpoint = env(&amp;quot;DIGMA_OTLP_ENDPOINT&amp;quot;) tls { insecure = true } } } otelcol.exporter.otlphttp &amp;quot;grafana_cloud&amp;quot; { client { endpoint = env(&amp;quot;GRAFANA_CLOUD_OTLP_ENDPOINT&amp;quot;) auth = otelcol.auth.basic.grafana_auth.handler } }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;在此文件中，我们将可观察性管道定义为具有以下结构的代码： &lt;/p&gt;&lt;figure
class="figure-wrapper figure-wrapper__lightbox w-100p "
style="max-width: 1116px;"
itemprop="associatedMedia"
itemscope=""
itemtype="http://schema.org/ImageObject"
&gt; &lt;a
class="lightbox-link"
href="/media/blog/java-digma/otlp-workflow.png"
itemprop="contentUrl"
&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/java-digma/otlp-workflow.png"data-srcset="/media/blog/java-digma/otlp-workflow.png?w=320 320w, /media/blog/java-digma/otlp-workflow.png?w=550 550w, /media/blog/java-digma/otlp-workflow.png?w=750 750w, /media/blog/java-digma/otlp-workflow.png?w=900 900w, /media/blog/java-digma/otlp-workflow.png?w=1040 1040w, /media/blog/java-digma/otlp-workflow.png?w=1240 1240w, /media/blog/java-digma/otlp-workflow.png?w=1920 1920w"
data-sizes="auto"alt="OTLP工作流程"
width="1116"
height="486"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/java-digma/otlp-workflow.png"
alt="OTLP工作流程"
width="1116"
height="486"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;ul&gt;&lt;li&gt; &lt;strong&gt;OTLP 接收器&lt;/strong&gt;。该组件将接收我们的 Java 应用程序发出的跟踪。&lt;/li&gt;&lt;li&gt; &lt;strong&gt;OTLP 处理器&lt;/strong&gt;。这将用于使用批处理策略来优化我们的输出，以将跟踪一起发送而不是逐个发送。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;出口商&lt;/strong&gt;。这些将发送痕迹以进行存储和处理。我们将把跟踪发送到两个目的地：我们的 Grafana Cloud 实例和 Digma，我们将用它来分析我们的代码。&lt;/li&gt;&lt;/ul&gt;&lt;ol start="2"&gt;&lt;li&gt;创建一个新的“docker-compose.yaml”文件。该文件将定义 Alloy 容器并挂载我们的配置文件。&lt;/li&gt;&lt;/ol&gt;&lt;div class="code-snippet code-snippet__mini"&gt;&lt;div class="lang-toolbar__mini"&gt; &lt;span class="code-clipboard"&gt;&lt;button x-data="app_code_snippet()" x-init="init()" @click="copy()"&gt;&lt;img class="code-clipboard__icon" src="/media/images/icons/icon-copy-small-2.svg" alt="将代码复制到剪贴板" width="14" height="13"&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="code-snippet code-snippet__border"&gt;&lt;pre data-expanded="false"&gt; &lt;code class="language-none"&gt;version: &amp;quot;3.6&amp;quot; services: grafana-agent: image: grafana/agent:latest restart: always command: - run - --server.http.listen-addr=0.0.0.0:12345 - /etc/agent/config.river volumes: - ./config.river:/etc/agent/config.river ports: - &amp;quot;12345:12345&amp;quot; - &amp;quot;4317:4317&amp;quot; extra_hosts: - &amp;quot;host.docker.internal:host-gateway&amp;quot; environment: - AGENT_MODE=flow - OTLP_EXPORTER_DIGMA_COLLECTOR_API=host.docker.internal:5050 - GRAFANA_CLOUD_OTLP_ENDPOINT=--REPLACE_WITH_GRAFANA_ENDPOINT-- - GRAFANA_CLOUD_API_TOKEN=${GRAFANA_CLOUD_API_TOKEN} - GRAFANA_CLOUD_INSTANCE_ID=--REPLACE_WITH_GRAFNA_INSTANCE_ID--&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;使用从 Grafana Cloud 收集的信息替换“环境”元素下的值。我们希望将 API 令牌设置为参数，以避免将其本地存储在任何文件中。&lt;/p&gt;&lt;p&gt;运行 Docker Compose 文件，如下所示：&lt;/p&gt;&lt;div class="code-snippet code-snippet__mini"&gt;&lt;div class="lang-toolbar__mini"&gt; &lt;span class="code-clipboard"&gt;&lt;button x-data="app_code_snippet()" x-init="init()" @click="copy()"&gt;&lt;img class="code-clipboard__icon" src="/media/images/icons/icon-copy-small-2.svg" alt="将代码复制到剪贴板" width="14" height="13"&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="code-snippet code-snippet__border"&gt;&lt;pre data-expanded="false"&gt; &lt;code class="language-none"&gt;cd observability docker compose up -e GRAFANA_CLOUD_API_TOKEN=--REPLACE_WITH_TOKEN--&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt; Grafana Alloy 包含一个用于调试管道状态的 UI，可从此&lt;a href="http://localhost:12345" target="_blank" rel="noopener noreferrer"&gt;URL&lt;/a&gt;访问。从那里，我们可以看到管道每个组件的状态和配置，还有一个很好的图表向我们展示了管道不同组件之间的关系。 &lt;/p&gt;&lt;figure
class="figure-wrapper figure-wrapper__lightbox w-100p "
style="max-width: 1198px;"
itemprop="associatedMedia"
itemscope=""
itemtype="http://schema.org/ImageObject"
&gt; &lt;a
class="lightbox-link"
href="/media/blog/java-digma/relationship-graph.png"
itemprop="contentUrl"
&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/java-digma/relationship-graph.png"data-srcset="/media/blog/java-digma/relationship-graph.png?w=320 320w, /media/blog/java-digma/relationship-graph.png?w=550 550w, /media/blog/java-digma/relationship-graph.png?w=750 750w, /media/blog/java-digma/relationship-graph.png?w=900 900w, /media/blog/java-digma/relationship-graph.png?w=1040 1040w, /media/blog/java-digma/relationship-graph.png?w=1240 1240w, /media/blog/java-digma/relationship-graph.png?w=1920 1920w"
data-sizes="auto"alt="关系图"
width="1198"
height="795"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/java-digma/relationship-graph.png"
alt="关系图"
width="1198"
height="795"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;h3 id="install-the-digma-plugin"&gt;安装 Digma 插件&lt;/h3&gt;&lt;p&gt;现在我们需要安装 Digma 插件以立即开始从 Java 应用程序收集数据。您可以从 IDE 中的 IntelliJ 市场安装它： &lt;/p&gt;&lt;figure
class="figure-wrapper figure-wrapper__lightbox w-100p "
style="max-width: 1452px;"
itemprop="associatedMedia"
itemscope=""
itemtype="http://schema.org/ImageObject"
&gt; &lt;a
class="lightbox-link"
href="/media/blog/java-digma/digma-cf.png"
itemprop="contentUrl"
&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/java-digma/digma-cf.png"data-srcset="/media/blog/java-digma/digma-cf.png?w=320 320w, /media/blog/java-digma/digma-cf.png?w=550 550w, /media/blog/java-digma/digma-cf.png?w=750 750w, /media/blog/java-digma/digma-cf.png?w=900 900w, /media/blog/java-digma/digma-cf.png?w=1040 1040w, /media/blog/java-digma/digma-cf.png?w=1240 1240w, /media/blog/java-digma/digma-cf.png?w=1920 1920w"
data-sizes="auto"alt="IntelliJ 市场中的 Digma 持续反馈插件"
width="1452"
height="879"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/java-digma/digma-cf.png"
alt="IntelliJ 市场中的 Digma 持续反馈插件"
width="1452"
height="879"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;接下来，配置 Digma 插件以将本地跟踪发送到我们在前面的步骤中创建的 Alloy 容器。进入IntelliJ IDE的&lt;strong&gt;Settings&lt;/strong&gt;页面，搜索“Digma”，弹出Digma插件配置页面： &lt;/p&gt;&lt;figure
class="figure-wrapper figure-wrapper__lightbox w-100p "
style="max-width: 1451px;"
itemprop="associatedMedia"
itemscope=""
itemtype="http://schema.org/ImageObject"
&gt; &lt;a
class="lightbox-link"
href="/media/blog/java-digma/digma-plugin-2.png"
itemprop="contentUrl"
&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/java-digma/digma-plugin-2.png"data-srcset="/media/blog/java-digma/digma-plugin-2.png?w=320 320w, /media/blog/java-digma/digma-plugin-2.png?w=550 550w, /media/blog/java-digma/digma-plugin-2.png?w=750 750w, /media/blog/java-digma/digma-plugin-2.png?w=900 900w, /media/blog/java-digma/digma-plugin-2.png?w=1040 1040w, /media/blog/java-digma/digma-plugin-2.png?w=1240 1240w, /media/blog/java-digma/digma-plugin-2.png?w=1920 1920w"
data-sizes="auto"alt="Digma 插件形式"
width="1451"
height="890"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/java-digma/digma-plugin-2.png"
alt="Digma 插件形式"
width="1451"
height="890"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;编辑“运行时可观察性后端 URL”字段并将其设置为&lt;a href="http://localhost:4317" target="_blank" rel="noopener noreferrer"&gt;http://localhost:4317&lt;/a&gt; 。这是 Alloy 收集器使用的默认端口。&lt;/p&gt;&lt;h3 id="run-your-code-and-validate-that-everything-works-as-expected"&gt;运行您的代码并验证一切是否按预期工作！&lt;/h3&gt;&lt;p&gt;安装 Digma 后，您的代码将被自动检测。&lt;/p&gt;&lt;p&gt;您可以在 IDE 中打开 Digma 可观察性面板来验证一切是否正常。该面板将始终反映最新捕获的可观测性数据。 &lt;/p&gt;&lt;figure
class="figure-wrapper figure-wrapper__lightbox w-100p "
style="max-width: 1403px;"
itemprop="associatedMedia"
itemscope=""
itemtype="http://schema.org/ImageObject"
&gt; &lt;a
class="lightbox-link"
href="/media/blog/java-digma/grafana-cloud-traces.png"
itemprop="contentUrl"
&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/java-digma/grafana-cloud-traces.png"data-srcset="/media/blog/java-digma/grafana-cloud-traces.png?w=320 320w, /media/blog/java-digma/grafana-cloud-traces.png?w=550 550w, /media/blog/java-digma/grafana-cloud-traces.png?w=750 750w, /media/blog/java-digma/grafana-cloud-traces.png?w=900 900w, /media/blog/java-digma/grafana-cloud-traces.png?w=1040 1040w, /media/blog/java-digma/grafana-cloud-traces.png?w=1240 1240w, /media/blog/java-digma/grafana-cloud-traces.png?w=1920 1920w"
data-sizes="auto"alt="痕迹仪表板"
width="1403"
height="619"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/java-digma/grafana-cloud-traces.png"
alt="痕迹仪表板"
width="1403"
height="619"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;h2 id="how-to-use-observability-data-when-developing-code"&gt;开发代码时如何使用可观测性数据&lt;/h2&gt;&lt;p&gt;当您工作（运行、调试或运行测试）时，Digma 插件会忙于分析可观测性数据、查找问题并创建有用的使用分析。然后，它将该数据集成到 IDE 中。数据还将紧密集成到代码本身中，因此您将能够在跟踪和相应的代码行之间快速跳转。&lt;/p&gt;&lt;p&gt;您可以在三个主要区域看到正在运行的数据：&lt;/p&gt;&lt;h3 id="the-observability-panel"&gt;可观察性面板&lt;/h3&gt;&lt;p&gt;当我们对数据管道进行健康检查时，我们已经审查了这个领域。在这里，您将能够快速跳转以查看最近操作的跟踪或导航到相关端点。&lt;/p&gt;&lt;h3 id="the-insights-panel"&gt;见解面板&lt;/h3&gt;&lt;p&gt;该面板致力于对每个代码位置、资产、数据库查询端点等进行更深入的分析。它与 IDE 中的代码交互，可以将您带到相关的代码位置或显示见解（问题和分析） ）与当前选定的代码相关。 &lt;/p&gt;&lt;figure
class="figure-wrapper figure-wrapper__lightbox w-100p "
style="max-width: 559px;"
itemprop="associatedMedia"
itemscope=""
itemtype="http://schema.org/ImageObject"
&gt; &lt;a
class="lightbox-link"
href="/media/blog/java-digma/digma-insights.png"
itemprop="contentUrl"
&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/java-digma/digma-insights.png"data-srcset="/media/blog/java-digma/digma-insights.png?w=320 320w, /media/blog/java-digma/digma-insights.png?w=550 550w, /media/blog/java-digma/digma-insights.png?w=750 750w, /media/blog/java-digma/digma-insights.png?w=900 900w, /media/blog/java-digma/digma-insights.png?w=1040 1040w, /media/blog/java-digma/digma-insights.png?w=1240 1240w, /media/blog/java-digma/digma-insights.png?w=1920 1920w"
data-sizes="auto"alt="Digma 见解面板"
width="559"
height="800"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/java-digma/digma-insights.png"
alt="Digma 见解面板"
width="559"
height="800"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;h3 id="code-annotations"&gt;代码注释&lt;/h3&gt;&lt;p&gt;安装插件后，您将能够看到 CodeLens 覆盖在代码本身上，指示运行时使用情况、死代码和关键见解： &lt;/p&gt;&lt;figure
class="figure-wrapper figure-wrapper__lightbox w-100p "
style="max-width: 1088px;"
itemprop="associatedMedia"
itemscope=""
itemtype="http://schema.org/ImageObject"
&gt; &lt;a
class="lightbox-link"
href="/media/blog/java-digma/code-sample.png"
itemprop="contentUrl"
&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/java-digma/code-sample.png"data-srcset="/media/blog/java-digma/code-sample.png?w=320 320w, /media/blog/java-digma/code-sample.png?w=550 550w, /media/blog/java-digma/code-sample.png?w=750 750w, /media/blog/java-digma/code-sample.png?w=900 900w, /media/blog/java-digma/code-sample.png?w=1040 1040w, /media/blog/java-digma/code-sample.png?w=1240 1240w, /media/blog/java-digma/code-sample.png?w=1920 1920w"
data-sizes="auto"alt="代码示例"
width="1088"
height="591"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/java-digma/code-sample.png"
alt="代码示例"
width="1088"
height="591"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;h3 id="bonus-open-the-tracing-visualization-in-grafana-cloud-from-your-ide"&gt;奖励：从 IDE 打开 Grafana Cloud 中的跟踪可视化&lt;/h3&gt;&lt;p&gt;正如我们在上一节中看到的，我们可以在 IDE 中看到跟踪可视化。但是，我们还可以将 Digma 与 Grafana Cloud 连接起来，直接在您的实例中打开跟踪。 &lt;/p&gt;&lt;figure
class="figure-wrapper figure-wrapper__lightbox w-100p "
style="max-width: 700px;"
itemprop="associatedMedia"
itemscope=""
itemtype="http://schema.org/ImageObject"
&gt; &lt;a
class="lightbox-link"
href="/media/blog/java-digma/digma-plugin.png"
itemprop="contentUrl"
&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/java-digma/digma-plugin.png"data-srcset="/media/blog/java-digma/digma-plugin.png?w=320 320w, /media/blog/java-digma/digma-plugin.png?w=550 550w, /media/blog/java-digma/digma-plugin.png?w=750 750w, /media/blog/java-digma/digma-plugin.png?w=900 900w, /media/blog/java-digma/digma-plugin.png?w=1040 1040w, /media/blog/java-digma/digma-plugin.png?w=1240 1240w, /media/blog/java-digma/digma-plugin.png?w=1920 1920w"
data-sizes="auto"alt="Digma 插件报名表"
width="700"
height="478"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/java-digma/digma-plugin.png"
alt="Digma 插件报名表"
width="700"
height="478"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;要启用此行为：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;打开 Digma 设置页面。&lt;/li&gt;&lt;li&gt;将 Digma IntelliJ 插件的“Jaeger 链接模式”设置更改为外部&lt;/li&gt;&lt;li&gt;更改“Jaeger URL”设置以指向您的 Grafana Cloud Tracese 页面。您可以使用以下 URL 模板（并替换 [Your_Account]）：&lt;br /&gt;&lt;br /&gt; https://[YOUR_ACCOUNT].grafana.net/explore?left=%7B%22range%22%3A%7B%22from%22%3A%22now-5m%22%2C%22to%22%3A%22now%22 %7D%2C%22datasource%22%3A%22grafanacloud-traces%22%2C%22queries%22%3A%5B%7B%22query%22%3A% &lt;code&gt;{TRACE_ID}&lt;/code&gt; %22%2C%22queryType%22%3A%22traceql %22%7D%5D%7D&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;现在，在 IntelliJ 的 Digma Observability 视图中，如果单击跟踪按钮，您将在&lt;a href="/products/cloud/traces/"&gt;Grafana Cloud Traces&lt;/a&gt;中看到跟踪可视化。&lt;/p&gt;&lt;h2 id="code-with-feedback"&gt;带反馈的代码&lt;/h2&gt;&lt;p&gt;现在一切都已启动并运行，您可以开始尝试&lt;a href="https://digma.ai/continuous-feedback/" target="_blank" rel="noopener noreferrer"&gt;持续反馈&lt;/a&gt;(CF) 的新开发实践，它提供即时代码反馈和分析。作为开发人员，我们注意到可以轻松收集有关代码运行时的大量有用数据；然而，使这些数据有用完全是另一回事。这就是为什么将代码可观察性集成到更接近开发周期可以加速代码发布并帮助比以前更早地发现问题。观看&lt;a href="https://www.youtube.com/watch?v=3wgQl69WSvw" target="_blank" rel="noopener noreferrer"&gt;此视频&lt;/a&gt;了解 CF 的工作原理。&lt;/p&gt;&lt;p&gt;通过&lt;a href="https://continuous-feedback.slack.com/ssb/redirect" target="_blank" rel="noopener noreferrer"&gt;Slack 频道&lt;/a&gt;联系我们，让我们了解您的里程变化情况以及您能够利用的反馈类型！&lt;/p&gt;</description><pubDate>Fri, 21 Jun 2024 00:00:00 GMT</pubDate><guid isPermaLink="true">https://grafana.com/blog/2024/06/21/shorten-your-feedback-loop-java-observability-with-opentelemetry-grafana-cloud-and-digma.ai/</guid></item><item><title>【How the DoD is embracing OSS and DevSecOps modernization with Grafana】</title><link>https://grafana.com/blog/2024/06/20/how-the-dod-is-embracing-oss-and-devsecops-modernization-with-grafana/</link><description>&lt;p&gt;当谈到可观察性时，我们相信开源最终会获胜。这是广大用户的共同看法，无论他们从事&lt;a href="https://grafana.com/blog/2023/09/25/how-to-monitor-slos-with-grafana-grafana-loki-prometheus-and-pyrra-inside-the-daimler-truck-observability-stack/"&gt;汽车制造&lt;/a&gt;、 &lt;a href="https://grafana.com/blog/2022/11/28/how-banco-itau-tracks-1.5b-daily-metrics-on-prem-and-in-aws-with-grafana-and-observability/"&gt;银行业&lt;/a&gt;还是&lt;a href="https://grafana.com/blog/2024/03/22/how-shipping/third-party-logistics-companies-reduce-mttr-and-increase-uptime-with-the-grafana-lgtm-stack/"&gt;航运业&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;美国联邦政府是另一个证明这一点的行业，表明即使是那些在最严格的安全和合规要求下运营的企业也将 OSS 视为他们的首选方法。在这篇博文中，我们将简要介绍国防部如何优先考虑开源，作为更广泛推动软件开发现代化的一部分，以及 Grafana 如何支持这些努力。&lt;/p&gt;&lt;h2 id="oss-and-software-factories"&gt; OSS 和软件工厂&lt;/h2&gt;&lt;p&gt;国防部几十年来一直&lt;a href="https://dodcio.defense.gov/Open-Source-Software-FAQ/#q-does-the-dod-already-use-open-source-software" rel="noopener noreferrer" target="_blank"&gt;广泛使用开源&lt;/a&gt;，但它越来越成为国防软件项目的起点，作为减少依赖性、避免供应商锁定以及部署为云和微服务构建的工具的手段。在&lt;a href="https://dodcio.defense.gov/portals/0/documents/library/softwaredev-opensource.pdf" rel="noopener noreferrer" target="_blank"&gt;2022 年的一份备忘录&lt;/a&gt;中，国防部首席信息官约翰·谢尔曼 (John Sherman) 写道，该部门更喜欢“在购买专有产品之前采用现有的政府或 OSS 解决方案”，并补充说“OSS 构成了软件定义世界的基石，对于更快地交付软件至关重要。”&lt;/p&gt;&lt;p&gt;去年，国防部公开发布了一项&lt;a href="https://dodcio.defense.gov/Portals/0/Documents/Library/SW-Mod-I-PlanExecutiveSummary.pdf" rel="noopener noreferrer" target="_blank"&gt;软件现代化计划&lt;/a&gt;，该计划不仅优先考虑速度，还优先考虑软件开发和管理中更好的质量和保护。这种转变的一个重要部分是推动创建 &lt;a href="https://en.wikipedia.org/wiki/Software_factory" rel="noopener noreferrer" target="_blank"&gt;软件工厂&lt;/a&gt;生态系统，该生态系统创建一个工具和流程框架来自动化开发人员使用的许多底层组件。对于国防部来说，这意味着创建一个以 DevSecOps 原则为基础的持续开发管道。&lt;/p&gt;&lt;blockquote class="pullquote en "&gt;&lt;div class="pullquote__content"&gt;&lt;p&gt; OSS 构成了软件定义世界的基石，对于更快地交付软件至关重要。&lt;/p&gt;&lt;p&gt;美国国防部首席信息官约翰·谢尔曼&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;p&gt;软件工厂提供商联盟已经开始出现，重点是&lt;a href="https://coalition.dso.mil/about-us/" rel="noopener noreferrer" target="_blank"&gt;构建开放的生态系统&lt;/a&gt;。其中一个提供商&lt;a href="https://p1.dso.mil/" rel="noopener noreferrer" target="_blank"&gt;Platform One&lt;/a&gt;托管 CI/CD DevSecOps 管道，并提供用于托管微服务的安全 Kubernetes 平台。 Platform One 的核心产品包括 Big Bang，这是一个可定制的平台，旨在加速国防部内的软件开发和部署。它提供了一套全面的工具和服务，包括基础设施配置、CI/CD 管道和安全扫描，目前正被空军、陆军和海军等国防部部门使用。&lt;/p&gt;&lt;p&gt;去年，第一平台&lt;a href="https://docs-bigbang.dso.mil/latest/blog/big-bang-2-0/" rel="noopener noreferrer" target="_blank"&gt;推出了Big Bang 2.0&lt;/a&gt; ，降低准入门槛，默认平台免费开放。该版本的一个重要部分是包含了三个 Grafana Labs 开源项目：用于日志的&lt;a href="https://grafana.com/oss/loki/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Loki&lt;/a&gt; 、用于可视化的&lt;a href="https://grafana.com/oss/grafana?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana&lt;/a&gt;和用于跟踪的&lt;a href="https://grafana.com/oss/tempo/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Tempo&lt;/a&gt; 。&lt;/p&gt;&lt;p&gt; Big Bang 的默认堆栈已从 Elasticsearch、Fluentbit 和 Kibana 的组合切换为 Promtail、Loki 和 Grafana，Platform One 表示用户的资源成本较低，并且无需核心功能的许可证要求。作为这一转变的一部分，Big Bang 2.0 还将追踪从 Jaeger 转移到 Tempo，因为它与其堆栈集成得更好。&lt;/p&gt;&lt;h2 id="how-dod-software-factories-can-rely-on-grafana"&gt;国防部软件工厂如何依赖 Grafana&lt;/h2&gt;&lt;p&gt; Grafana 非常适合现代软件开发，无论哪个行业。它是一个集中式可观察平台，聚合来自不同来源的数据，包括基础设施、应用程序和网络设备。这使得软件工厂能够在单一管理平台中全面了解整个生态系统，从而能够主动检测和解决问题。&lt;/p&gt;&lt;p&gt;开发人员可以使用基于角色的定制仪表板来立即了解关键绩效指标 (KPI)，例如构建和部署指标、系统正常运行时间和资源利用率。他们还可以使用 Grafana 通过识别交付流程中的瓶颈和低效率来提高系统可靠性。&lt;/p&gt;&lt;p&gt;要了解有关 Grafana 如何帮助 DoD 团队提供更快、更可靠的部署的更多信息，请发送电子邮件至&lt;a href="mailto:federal@grafana.com"&gt;Federal@grafana.com&lt;/a&gt;&lt;a href="https://grafana.com/blog/federal@grafana.com"&gt;&lt;/a&gt; 。请查看我们的&lt;a href="https://grafana.com/blog/2021/09/29/the-u.s.-department-of-defense-formally-authorizes-grafana-grafana-enterprise-and-loki-for-its-100000-developers/"&gt;其他博客文章，&lt;/a&gt;重点介绍&lt;a href="https://grafana.com/blog/2022/02/04/a-look-at-how-the-u.s.-department-of-defense-deploys-the-grafana-stack/?pg=blog&amp;amp;plcmt=body-txt"&gt;DoD 如何部署 Grafana&lt;/a&gt; 。&lt;/p&gt;</description><pubDate>Thu, 20 Jun 2024 00:00:00 GMT</pubDate><guid isPermaLink="true">https://grafana.com/blog/2024/06/20/how-the-dod-is-embracing-oss-and-devsecops-modernization-with-grafana/</guid></item><item><title>【Translate Datadog metrics into OTLP with the OpenTelemetry Collector and Grafana Alloy】</title><link>https://grafana.com/blog/2024/06/18/translate-datadog-metrics-into-otlp-with-the-opentelemetry-collector-and-grafana-alloy/</link><description>&lt;p&gt;今天，我们很高兴地宣布，我们将以开源方式发布&lt;a href="https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/datadogreceiver" rel="noopener noreferrer" target="_blank"&gt;OpenTelemetry Datadog 接收器&lt;/a&gt;的新代码。此代码允许用户将 Datadog 指标格式转换为本机 OTLP 格式。然后，这些指标可以发送到任何与 OpenTelemetry 兼容的指标系统，无论是 Prometheus、 &lt;a href="https://grafana.com/oss/mimir/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Mimir&lt;/a&gt;还是其他后端数据库。&lt;/p&gt;&lt;p&gt; Grafana Labs 的核心价值观是拥抱&lt;a href="https://grafana.com/blog/2022/11/01/watch-grafana-labs-ceo-co-founder-raj-dutt-discuss-why-companies-need-observability/"&gt;“大帐篷”理念&lt;/a&gt;，过去当我们作为&lt;a href="https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/1852#issuecomment-1403663819" rel="noopener noreferrer" target="_blank"&gt;Datadog 接收器的审阅者和代码共同所有者以获取 OTel 社区提出的跟踪时&lt;/a&gt;，或者当我们构建&lt;a href="https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/18635" rel="noopener noreferrer" target="_blank"&gt;Loki 接收器&lt;/a&gt;时，就证明了这一点。我们相信让我们的用户能够在他们的可观察性策略中做出自己的选择。我们优先考虑互操作性和减少供应商锁定，并且我们坚信开源的价值。&lt;/p&gt;&lt;p&gt;我们的 OpenTelemetry Datadog 接收器代码最初是一个支持大客户迁移的项目。本着尽快将工作代码交到尽可能多的人手中的精神，我们从今天开始在&lt;a href="https://github.com/grafana/alloy" rel="noopener noreferrer" target="_blank"&gt;Grafana Alloy&lt;/a&gt;中提供它，这是我们的 OpenTelemetry Collector 发行版，它独特地为 OpenTelemetry 和 Prometheus 格式提供本机管道。基于此代码库，我们已向&lt;a href="https://github.com/open-telemetry/opentelemetry-collector-contrib/pull/33631" rel="noopener noreferrer" target="_blank"&gt;OpenTelemetry 提交了第一个 PR&lt;/a&gt; ，并将通过正常渠道合并我们的所有工作。由于我们预计此代码会根据社区审查和反馈进行更改，因此此功能在 Grafana Alloy 中被标记为实验性的。一旦我们的代码被合并到 OpenTelemetry 的上游主分支中，我们也将在 Grafana Alloy 中更新并发布它。&lt;/p&gt;&lt;h2 id="translate-datadog-metrics-to-otlp-how-it-works"&gt;将 Datadog 指标转换为 OTLP：它是如何工作的&lt;/h2&gt;&lt;p&gt;&lt;em&gt;编者注：Datadog、Prometheus 和 OpenTelemetry 对指标类型使用不同的术语。在本博客中，除非另有说明，我们使用 OpenTelemetry 术语。&lt;/em&gt;&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/opentelemetry-datadog-receiver/datadog-otlp-metrics-chart.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/opentelemetry-datadog-receiver/datadog-otlp-metrics-chart.png"data-srcset="/media/blog/opentelemetry-datadog-receiver/datadog-otlp-metrics-chart.png?w=320 320w, /media/blog/opentelemetry-datadog-receiver/datadog-otlp-metrics-chart.png?w=550 550w, /media/blog/opentelemetry-datadog-receiver/datadog-otlp-metrics-chart.png?w=750 750w, /media/blog/opentelemetry-datadog-receiver/datadog-otlp-metrics-chart.png?w=900 900w, /media/blog/opentelemetry-datadog-receiver/datadog-otlp-metrics-chart.png?w=1040 1040w, /media/blog/opentelemetry-datadog-receiver/datadog-otlp-metrics-chart.png?w=1240 1240w, /media/blog/opentelemetry-datadog-receiver/datadog-otlp-metrics-chart.png?w=1920 1920w"
data-sizes="auto"alt="Datadog 指标如何转换为 OTLP 格式的图表"
width="1200"
height="628"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/opentelemetry-datadog-receiver/datadog-otlp-metrics-chart.png"
alt="Datadog 指标如何转换为 OTLP 格式的图表"
width="1200"
height="628"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt; Datadog 的&lt;a href="https://docs.datadoghq.com/metrics/types/?tab=count" target="_blank" rel="noopener noreferrer"&gt;官方文档&lt;/a&gt;提供了有关其指标类型的完整信息：计数、计量、速率、直方图和分布。&lt;/p&gt;&lt;p&gt;转换 Count、Gauge 和 Rate 指标类型的过程相对简单，因为它们都可以相当直接地映射到&lt;a href="https://opentelemetry.io/docs/specs/otel/metrics/data-model/#point-kinds" target="_blank" rel="noopener noreferrer"&gt;OpenTelemetry 指标格式&lt;/a&gt;。 Datadog Gauge 指标可以映射到 OpenTelemetry Gauge 指标，Count 和 Rate 指标可以映射到 OpenTelemetry Sum 指标（通过调整 Rate 指标的值来考虑间隔）。&lt;/p&gt;&lt;p&gt; Datadog Distribution 指标类型可以最接近地映射到 OpenTelemetry 的指数直方图指标类型。由于两个系统中定义桶边界的方式不同，这是一个更具挑战性的转换。实施了尽力翻译，以最大程度地减少生成的指数直方图的准确性损失。&lt;/p&gt;&lt;p&gt;有关技术实现的更多详细信息将在未来的博客文章中介绍。&lt;/p&gt;&lt;h2 id="from-datadog-metrics-to-prometheus-metrics"&gt;从 Datadog 指标到 Prometheus 指标&lt;/h2&gt;&lt;p&gt;启用 Datadog 接收器后，收集器将有效地使用来自 Datadog 检测应用程序的 OpenTelemetry 指标。您可以从各种收集器导出器中进行选择，将这些指标写入特定后端。但是，我们建议您使用&lt;a href="https://opentelemetry.io/docs/languages/sdk-configuration/otlp-exporter/" target="_blank" rel="noopener noreferrer"&gt;默认的 OTLP 导出器&lt;/a&gt;，以使您的管道尽可能成为 OTel 原生管道。&lt;/p&gt;&lt;p&gt;值得注意的是，OpenTelemetry 规范定义了&lt;a href="https://opentelemetry.io/docs/specs/otel/metrics/data-model/#temporality" target="_blank" rel="noopener noreferrer"&gt;两种不同的时间性&lt;/a&gt;。如果您打算写入 Prometheus、Mimir OSS 或 Grafana Cloud，则需要处理器在这些时间性之间进行转换。&lt;/p&gt;&lt;p&gt;对于此类用例，我们构建并贡献了一个开源处理器，称为&lt;a href="https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/deltatocumulativeprocessor" target="_blank" rel="noopener noreferrer"&gt;deltatocumulative 处理器&lt;/a&gt;。一旦 OTLP 指标从 Datadog 接收器发出并通过该处理器，它们就可以通过 OTLP HTTP 导出器导出到 Prometheus 的本机 OTLP 端点或其他系统，例如 Grafana Cloud。&lt;/p&gt;&lt;p&gt;我们计划将来发布有关 deltatocumulative 处理器的技术深度博客。&lt;/p&gt;&lt;h2 id="how-to-get-started-translating-datadog-metrics-to-otlp"&gt;如何开始将 Datadog 指标转换为 OTLP&lt;/h2&gt;&lt;p&gt;我们预计上游审核过程将需要几周时间，因为我们会与 OpenTelemetry 社区进行协调。同时，我们希望您今天就能够尝试这一点，因此我们将接收器和处理器包含在&lt;a href="https://github.com/grafana/alloy/releases/tag/v1.2.0-rc.0" target="_blank" rel="noopener noreferrer"&gt;Grafana Alloy v1.2.0 候选版本&lt;/a&gt;中。 &lt;/p&gt;&lt;figure
class="figure-wrapper figure-wrapper__lightbox w-100p "
style="max-width: 1200px;"
itemprop="associatedMedia"
itemscope=""
itemtype="http://schema.org/ImageObject"
&gt; &lt;a
class="lightbox-link"
href="/media/blog/opentelemetry-datadog-receiver/datadog-opentelemetry-architecture-diagram.png"
itemprop="contentUrl"
&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/opentelemetry-datadog-receiver/datadog-opentelemetry-architecture-diagram.png"data-srcset="/media/blog/opentelemetry-datadog-receiver/datadog-opentelemetry-architecture-diagram.png?w=320 320w, /media/blog/opentelemetry-datadog-receiver/datadog-opentelemetry-architecture-diagram.png?w=550 550w, /media/blog/opentelemetry-datadog-receiver/datadog-opentelemetry-architecture-diagram.png?w=750 750w, /media/blog/opentelemetry-datadog-receiver/datadog-opentelemetry-architecture-diagram.png?w=900 900w, /media/blog/opentelemetry-datadog-receiver/datadog-opentelemetry-architecture-diagram.png?w=1040 1040w, /media/blog/opentelemetry-datadog-receiver/datadog-opentelemetry-architecture-diagram.png?w=1240 1240w, /media/blog/opentelemetry-datadog-receiver/datadog-opentelemetry-architecture-diagram.png?w=1920 1920w"
data-sizes="auto"alt="Grafana Alloy 配置中使用的 OpenTelemetry Datadog 接收器架构"
width="1200"
height="628"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/opentelemetry-datadog-receiver/datadog-opentelemetry-architecture-diagram.png"
alt="Grafana Alloy 配置中使用的 OpenTelemetry Datadog 接收器架构"
width="1200"
height="628"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;这是合金配置示例：&lt;/p&gt;&lt;div class="code-snippet code-snippet__mini"&gt;&lt;div class="lang-toolbar__mini"&gt; &lt;span class="code-clipboard"&gt;&lt;button x-data="app_code_snippet()" x-init="init()" @click="copy()"&gt;&lt;img class="code-clipboard__icon" src="/media/images/icons/icon-copy-small-2.svg" alt="将代码复制到剪贴板" width="14" height="13"&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="code-snippet code-snippet__border"&gt;&lt;pre data-expanded="false"&gt; &lt;code class="language-none"&gt;otelcol.processor.deltatocumulative “example” { max_stale = “5m” max_streams = 10000 output { metrics = [otelcol.processor.batch.example.input] } } otelcol.processor.batch “example” { output { metrics = [otelcol.exporter.otlp.default.input] } } otelcol.receiver.datadog “example” { endpoint = “localhost:4444” output { metrics = [otelcol.processor.deltatocumulative.example.input] } }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id="how-to-configure-datadog-agent-to-send-data-to-alloy"&gt;如何配置 Datadog Agent 将数据发送到 Alloy&lt;/h3&gt;&lt;p&gt;您可以设置 Datadog Agent 以将 Datadog 指标同时转发到 Alloy 和 Datadog。我们向当前想要尝试此方法的 Datadog 用户推荐此方法。&lt;/p&gt;&lt;p&gt;将以下环境变量添加到您的 datadog-agent 安装中，其中 port 是之前为 Datadog 接收器配置的端口。&lt;/p&gt;&lt;div class="code-snippet code-snippet__mini"&gt;&lt;div class="lang-toolbar__mini"&gt; &lt;span class="code-clipboard"&gt;&lt;button x-data="app_code_snippet()" x-init="init()" @click="copy()"&gt;&lt;img class="code-clipboard__icon" src="/media/images/icons/icon-copy-small-2.svg" alt="将代码复制到剪贴板" width="14" height="13"&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="code-snippet code-snippet__border"&gt;&lt;pre data-expanded="false"&gt; &lt;code class="language-none"&gt;DD_ADDITIONAL_ENDPOINTS=&amp;#39;{&amp;quot;http://&amp;lt;alloy_endpoint&amp;gt;:&amp;lt;port&amp;gt;&amp;quot;: [&amp;quot;grafana-labs&amp;quot;]}&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;您还可以通过更新配置 yaml 中的 Datadog URL 来设置 Datadog Agent 将所有指标转发到 Alloy：&lt;/p&gt;&lt;div class="code-snippet code-snippet__mini"&gt;&lt;div class="lang-toolbar__mini"&gt; &lt;span class="code-clipboard"&gt;&lt;button x-data="app_code_snippet()" x-init="init()" @click="copy()"&gt;&lt;img class="code-clipboard__icon" src="/media/images/icons/icon-copy-small-2.svg" alt="将代码复制到剪贴板" width="14" height="13"&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="code-snippet code-snippet__border"&gt;&lt;pre data-expanded="false"&gt; &lt;code class="language-none"&gt;dd_url: http://&amp;lt;alloy_endpoint&amp;gt;:&amp;lt;port&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;或者通过环境变量：&lt;/p&gt;&lt;div class="code-snippet code-snippet__mini"&gt;&lt;div class="lang-toolbar__mini"&gt; &lt;span class="code-clipboard"&gt;&lt;button x-data="app_code_snippet()" x-init="init()" @click="copy()"&gt;&lt;img class="code-clipboard__icon" src="/media/images/icons/icon-copy-small-2.svg" alt="将代码复制到剪贴板" width="14" height="13"&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="code-snippet code-snippet__border"&gt;&lt;pre data-expanded="false"&gt; &lt;code class="language-none"&gt;DD_DD_URL=http://&amp;lt;alloy_endpoint&amp;gt;:&amp;lt;port&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;如需分步指南，请查看我们的&lt;a href="/docs/alloy/next/tasks/configure-alloy-to-use-datadog-receiver/"&gt;合金文档&lt;/a&gt;。&lt;/p&gt;&lt;h2 id="tell-us-what-you-think"&gt;告诉我们你的想法！&lt;/h2&gt;&lt;p&gt;一如既往，欢迎并感谢社区反馈！请将您在接收器中发现的任何问题提交到 GitHub 的上游&lt;a href="https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/" target="_blank" rel="noopener noreferrer"&gt;opentelemetry-collector-contrib 存储库&lt;/a&gt;中。&lt;/p&gt;&lt;p&gt;除了这个用于 Datadog 指标摄取的新解决方案之外，Grafana Labs 还可以帮助客户自动将仪表板、警报和 SLO 从 Datadog 迁移到 Grafana Cloud。这些迁移由我们专门的专业服务团队领导，可以大大缩短将在 Datadog 上投入大量资金的组织迁移到 Grafana Cloud 所需的时间。要了解更多信息，请联系&lt;a href="/contact?about=grafana-plugins&amp;amp;topic=enterprise-plugin&amp;amp;pg=blog&amp;amp;plcmt=body-txt&amp;amp;value=Datadog"&gt;客户支持&lt;/a&gt;。&lt;/p&gt;&lt;p&gt; &lt;em&gt;&lt;a href="/products/cloud/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Cloud&lt;/a&gt;是开始使用指标、日志、跟踪、仪表板等的最简单方法。我们为每个用例提供慷慨的永久免费套餐和计划。&lt;a href="/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt"&gt;现在免费注册&lt;/a&gt;！&lt;/em&gt;&lt;/p&gt;</description><pubDate>Tue, 18 Jun 2024 00:00:00 GMT</pubDate><guid isPermaLink="true">https://grafana.com/blog/2024/06/18/translate-datadog-metrics-into-otlp-with-the-opentelemetry-collector-and-grafana-alloy/</guid></item><item><title>【How to use OpenTelemetry resource attributes and Grafana Cloud Application Observability to accelerate root cause analysis】</title><link>https://grafana.com/blog/2024/06/17/how-to-use-opentelemetry-resource-attributes-and-grafana-cloud-application-observability-to-accelerate-root-cause-analysis/</link><description>&lt;p&gt;让我们想象一个场景：您使用 OpenTelemetry，并且您的可观察性后端在多个主机上运行。您收集有关应用程序延迟的数据，并注意到您想要调查的最近的增长。但是您如何知道哪个主机导致了性能下降呢？&lt;/p&gt;&lt;p&gt;这正是&lt;a href="https://opentelemetry.io/docs/languages/js/resources/" rel="noopener noreferrer" target="_blank"&gt;OpenTelmetry 资源的&lt;/a&gt;用武之地。&lt;/p&gt;&lt;p&gt;在 OpenTelemetry 的上下文中，&lt;em&gt;资源&lt;/em&gt;表示生成遥测数据的实体，例如容器、主机、进程、服务或操作系统。创建&lt;code&gt;TraceProvider&lt;/code&gt;或&lt;code&gt;MetricProvider&lt;/code&gt;时，资源将与其关联，因此，其&lt;code&gt;Tracer&lt;/code&gt;和&lt;code&gt;Meter&lt;/code&gt;生成的所有范围和指标也将与其关联。&lt;/p&gt;&lt;p&gt;每个资源都有自己的一组&lt;em&gt;属性&lt;/em&gt;。例如，主机具有有关其 ID、映像、名称、类型、IP 和 CPU 的属性。有了这些信息，您就可以过滤并缩小导致问题的主机范围。您甚至可以比较属性以注意模式。例如，您可能会注意到一种模式，其中特定类型的所有主机都具有更好的延迟，然后可以使用该信息对其余主机进行更改以匹配具有更好性能的主机。&lt;/p&gt;&lt;p&gt;有关资源的信息是通过 OpenTelemetry &lt;em&gt;&lt;a href="https://opentelemetry.io/docs/languages/php/resources/#resource-detection" rel="noopener noreferrer" target="_blank"&gt;资源检测器&lt;/a&gt;&lt;/em&gt;收集的，但并非所有资源检测器都默认启用。&lt;/p&gt;&lt;p&gt;让我们仔细看看如何使用资源检测器收集资源属性，以及如何使用&lt;a href="https://grafana.com/products/cloud/application-observability/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Cloud Application Observability&lt;/a&gt;从这些属性中获取有意义的见解。&lt;/p&gt;&lt;h2 id="how-to-collect-resource-attributes"&gt;如何收集资源属性&lt;/h2&gt;&lt;p&gt;大多数 OpenTelemetry SDK 都提供了可供您使用的资源检测器列表。最常见的是主机、云提供商、服务、进程、进程运行时、操作系统、容器和 Kubernetes。每个特定于语言的 SDK 都有自己的方式来设置其资源检测器。&lt;/p&gt;&lt;p&gt;您可以查看相应的文档，了解有关如何设置每种语言和资源检测器类型的更多详细信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; &lt;strong&gt;Java&lt;/strong&gt; ： &lt;a href="https://github.com/open-telemetry/opentelemetry-java-contrib/tree/main/aws-resources" rel="noopener noreferrer" target="_blank"&gt;AWS&lt;/a&gt; 、 &lt;a href="https://github.com/open-telemetry/opentelemetry-java-contrib/tree/main/gcp-resources" rel="noopener noreferrer" target="_blank"&gt;GCP&lt;/a&gt; 、 &lt;a href="https://github.com/open-telemetry/opentelemetry-java-contrib/tree/main/resource-providers" rel="noopener noreferrer" target="_blank"&gt;提供商&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;.NET&lt;/strong&gt; ： &lt;a href="https://github.com/open-telemetry/opentelemetry-dotnet-contrib/tree/main/src/OpenTelemetry.Resources.AWS" rel="noopener noreferrer" target="_blank"&gt;AWS&lt;/a&gt; 、 &lt;a href="https://github.com/open-telemetry/opentelemetry-dotnet-contrib/tree/main/src/OpenTelemetry.Resources.Azure" rel="noopener noreferrer" target="_blank"&gt;Azure&lt;/a&gt; 、 &lt;a href="https://github.com/open-telemetry/opentelemetry-dotnet-contrib/tree/main/src/OpenTelemetry.Resources.Container" rel="noopener noreferrer" target="_blank"&gt;容器&lt;/a&gt;、 &lt;a href="https://github.com/open-telemetry/opentelemetry-dotnet-contrib/tree/main/src/OpenTelemetry.Resources.Gcp" rel="noopener noreferrer" target="_blank"&gt;GCP&lt;/a&gt; 、 &lt;a href="https://github.com/open-telemetry/opentelemetry-dotnet-contrib/tree/main/src/OpenTelemetry.Resources.Host" rel="noopener noreferrer" target="_blank"&gt;主机&lt;/a&gt;、 &lt;a href="https://github.com/open-telemetry/opentelemetry-dotnet-contrib/tree/main/src/OpenTelemetry.Resources.Process" rel="noopener noreferrer" target="_blank"&gt;进程&lt;/a&gt;、 &lt;a href="https://github.com/open-telemetry/opentelemetry-dotnet-contrib/tree/main/src/OpenTelemetry.Resources.ProcessRuntime" rel="noopener noreferrer" target="_blank"&gt;运行时&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Node.js&lt;/strong&gt; ： &lt;a href="https://github.com/open-telemetry/opentelemetry-js-contrib/tree/main/detectors/node/opentelemetry-resource-detector-alibaba-cloud" rel="noopener noreferrer" target="_blank"&gt;阿里巴巴&lt;/a&gt;、 &lt;a href="https://github.com/open-telemetry/opentelemetry-js-contrib/tree/main/detectors/node/opentelemetry-resource-detector-aws" rel="noopener noreferrer" target="_blank"&gt;AWS&lt;/a&gt; 、 &lt;a href="https://github.com/open-telemetry/opentelemetry-js-contrib/tree/main/detectors/node/opentelemetry-resource-detector-azure" rel="noopener noreferrer" target="_blank"&gt;Azure&lt;/a&gt; 、 &lt;a href="https://github.com/open-telemetry/opentelemetry-js-contrib/tree/main/detectors/node/opentelemetry-resource-detector-container" rel="noopener noreferrer" target="_blank"&gt;容器&lt;/a&gt;、 &lt;a href="https://github.com/open-telemetry/opentelemetry-js-contrib/tree/main/detectors/node/opentelemetry-resource-detector-gcp" rel="noopener noreferrer" target="_blank"&gt;GCP&lt;/a&gt; 、 &lt;a href="https://github.com/open-telemetry/opentelemetry-js-contrib/tree/main/detectors/node/opentelemetry-resource-detector-instana" rel="noopener noreferrer" target="_blank"&gt;Instana&lt;/a&gt; 、 &lt;a href="https://github.com/open-telemetry/opentelemetry-js/tree/main/experimental/packages/opentelemetry-sdk-node#resourcedetectors" rel="noopener noreferrer" target="_blank"&gt;通用&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;去&lt;/strong&gt;： &lt;a href="https://github.com/open-telemetry/opentelemetry-go-contrib/tree/main/detectors/aws" rel="noopener noreferrer" target="_blank"&gt;AWS&lt;/a&gt; 、 &lt;a href="https://github.com/open-telemetry/opentelemetry-go-contrib/tree/main/detectors/gcp" rel="noopener noreferrer" target="_blank"&gt;GCP&lt;/a&gt;&lt;/li&gt;&lt;li&gt; &lt;strong&gt;Python&lt;/strong&gt; ： &lt;a href="https://github.com/open-telemetry/opentelemetry-python-contrib/tree/main/resource/opentelemetry-resource-detector-azure" rel="noopener noreferrer" target="_blank"&gt;Azure&lt;/a&gt; 、 &lt;a href="https://github.com/open-telemetry/opentelemetry-python-contrib/tree/main/resource/opentelemetry-resource-detector-container" rel="noopener noreferrer" target="_blank"&gt;容器&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;PHP&lt;/strong&gt; ： &lt;a href="https://github.com/open-telemetry/opentelemetry-php-contrib/tree/main/src/ResourceDetectors/Azure" rel="noopener noreferrer" target="_blank"&gt;Azure&lt;/a&gt; ， &lt;a href="https://github.com/open-telemetry/opentelemetry-php-contrib/tree/main/src/ResourceDetectors/Container" rel="noopener noreferrer" target="_blank"&gt;容器&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在这篇文章的后面，我们将通过一个示例来演示如何在 Node.js 中设置资源检测器。&lt;/p&gt;&lt;blockquote&gt;&lt;h3 id="committed-to-upstream-opentelemetry"&gt;致力于上游 OpenTelemetry&lt;/h3&gt;&lt;p&gt;我们相信有一些资源属性可以对用户有所帮助，例如主机的 ID、名称和版本以及服务。 OpenTelemtry SDK 正在逐步开发，不同的语言可以根据功能开发的顺序定义不同的优先级。使用这些 SDK 的人员数量也各不相同，这意味着某些语言比其他语言发展得更进一步。这就是为什么我们的团队一直在积极致力于在不同语言的 SDK 中实现某些属性的资源检测器，这样我们就可以将它们全部放到同一个地方。&lt;/p&gt;&lt;p&gt;在 Grafana Labs，我们非常重视并&lt;a href="https://grafana.com/blog/2024/01/31/opentelemetry-and-grafana-labs-whats-new-and-whats-next/"&gt;坚定致力于&lt;/a&gt;OpenTelemetry 项目。这意味着我们创建或改进资源检测器的工作是直接在上游完成的，以使所有用户受益，而不仅仅是 Grafana 用户。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="how-to-use-resource-attributes"&gt;如何使用资源属性&lt;/h2&gt;&lt;p&gt;现在，我们将通过一个示例来介绍如何收集有关&lt;code&gt;host.id&lt;/code&gt;和&lt;code&gt;service.instance.id&lt;/code&gt;的信息，这些信息是我们的 OpenTelemetry SDK 团队已经研究过的资源属性的示例。这些属性现在可以由它们自己的资源检测器收集，也可以作为 Node.js、Java、.NET、Go、Python 和 PHP SDK 上云提供商资源检测器的一部分进行收集：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; &lt;code&gt;host.id&lt;/code&gt; ：唯一的主机 ID。对于云，这必须是云提供商分配的&lt;code&gt;instance_id&lt;/code&gt; 。对于非容器化系统，这应该是&lt;code&gt;machine-id&lt;/code&gt; 。&lt;/li&gt;&lt;li&gt; &lt;code&gt;service.instance.id&lt;/code&gt; ：服务实例的字符串 ID，格式为 UUID。对于同一&lt;code&gt;service.namespace,service.name&lt;/code&gt;对的每个实例，它必须是唯一的。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;em&gt;注意：本指南适用于本地开发或评估设置，并将数据直接发送到 Grafana Cloud，无需&lt;a href="https://opentelemetry.io/docs/collector/" rel="noopener noreferrer" target="_blank"&gt;OpenTelemetry Collector&lt;/a&gt;或&lt;a href="https://grafana.com/docs/alloy/latest/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Alloy&lt;/a&gt; 。可以&lt;a href="https://grafana.com/docs/grafana-cloud/monitor-applications/application-observability/setup/instrument/nodejs/"&gt;在此处&lt;/a&gt;找到制作指南。&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;您还可以将数据发送到 Grafana Cloud 或自托管的 Grafana LGTM Stack（查看本&lt;a href="https://github.com/grafana/docker-otel-lgtm/" rel="noopener noreferrer" target="_blank"&gt;指南&lt;/a&gt;）并使用 Grafana 构建您自己的仪表板。&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;由于 OpenTelemetry 与供应商无关，因此您还可以针对使用 OTLP 协议接受 OpenTelemetry 数据的任何供应商后端执行此博客文章中的步骤 - 只需忽略 Grafana 特定的部分即可。&lt;/em&gt;&lt;/p&gt;&lt;p&gt;确保您已在本地安装以下软件： &lt;a href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm" rel="noopener noreferrer" target="_blank"&gt;Node.js 和 npm&lt;/a&gt; 。&lt;/p&gt;&lt;h3 id="create-a-nodejs-application"&gt;创建 Node.js 应用程序&lt;/h3&gt;&lt;p&gt;如果您已经有应用程序，则可以跳过此步骤。此示例使用基本的&lt;a href="https://expressjs.com/" rel="noopener noreferrer" target="_blank"&gt;Express&lt;/a&gt;应用程序，但您可以使用任何其他框架。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;在开发目录中创建一个空的&lt;code&gt;package.json&lt;/code&gt; 。&lt;/li&gt;&lt;/ol&gt;&lt;div class="code-snippet code-snippet__mini"&gt;&lt;div class="lang-toolbar__mini"&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="code-snippet code-snippet__border"&gt;&lt;pre&gt;&lt;code class="language-none"&gt;npm init -y&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol start="2"&gt;&lt;li&gt;安装 Express 依赖项。&lt;/li&gt;&lt;/ol&gt;&lt;div class="code-snippet code-snippet__mini"&gt;&lt;div class="lang-toolbar__mini"&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="code-snippet code-snippet__border"&gt;&lt;pre&gt;&lt;code class="language-none"&gt;npm install typescript \ ts-node \ @types/node \ express \ @types/express # initialize typescript npx tsc --init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol start="3"&gt;&lt;li&gt;创建一个&lt;code&gt;app.ts&lt;/code&gt;文件。&lt;/li&gt;&lt;/ol&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;JavaScript&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-javascript"&gt;import express, { Express } from &amp;#39;express&amp;#39;; const PORT: number = parseInt(process.env.PORT || &amp;#39;8080&amp;#39;); const app: Express = express(); function getRandomNumber(min: number, max: number) { return Math.floor(Math.random() * (max - min) + min); } app.get(&amp;#39;/rolldice&amp;#39;, (req, res) =&amp;gt; { res.send(getRandomNumber(1, 6).toString()); }); app.listen(PORT, () =&amp;gt; { console.log(`Listening for requests on http://localhost:${PORT}`); });&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol start="4"&gt;&lt;li&gt;运行应用程序并打开&lt;a href="http://localhost:8080/rolldice" rel="noopener noreferrer" target="_blank"&gt;http://localhost:8080/rolldice&lt;/a&gt;以确保其正常工作。&lt;/li&gt;&lt;/ol&gt;&lt;div class="code-snippet code-snippet__mini"&gt;&lt;div class="lang-toolbar__mini"&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="code-snippet code-snippet__border"&gt;&lt;pre&gt;&lt;code class="language-none"&gt;$ npx ts-node app.ts Listening for requests on http://localhost:8080&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;以下命令安装 Node.js API、SDK 和自动检测工具。&lt;/p&gt;&lt;div class="code-snippet code-snippet__mini"&gt;&lt;div class="lang-toolbar__mini"&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="code-snippet code-snippet__border"&gt;&lt;pre&gt;&lt;code class="language-none"&gt;npm install --save @opentelemetry/api npm install --save @opentelemetry/auto-instrumentations-node&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id="configure-an-application"&gt;配置应用程序&lt;/h3&gt;&lt;p&gt;接下来，我们需要收集身份验证环境变量以连接到 Grafana。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;登录&lt;a href="https://grafana.com/"&gt;Grafana Cloud&lt;/a&gt; （还没有 Grafana Cloud 帐户？&lt;a href="https://grafana.com/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt"&gt;立即注册一个免费帐户&lt;/a&gt;）。浏览器将导航到 Grafana Cloud Portal 页面： &lt;a href="https://grafana.com/profile/org"&gt;https://grafana.com/profile/org&lt;/a&gt; 。如果帐户有权访问多个 Grafana Cloud 组织，请从左上方的&lt;strong&gt;组织&lt;/strong&gt;下拉列表中选择一个组织。如果组织有权访问多个 Grafana Cloud 堆栈，请从&lt;strong&gt;左侧边栏&lt;/strong&gt;或主&lt;strong&gt;堆栈&lt;/strong&gt;列表导航到堆栈。&lt;/li&gt;&lt;li&gt;选择堆栈后，或在单堆栈场景中，在&lt;strong&gt;管理您的 Grafana Cloud Stack&lt;/strong&gt;下方，单击 OpenTelemetry 部分中的&lt;strong&gt;配置&lt;/strong&gt;。&lt;/li&gt;&lt;/ol&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/otel-reource-attributes/otel-resource-attributes-configure.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/otel-reource-attributes/otel-resource-attributes-configure.png"data-srcset="/media/blog/otel-reource-attributes/otel-resource-attributes-configure.png?w=320 320w, /media/blog/otel-reource-attributes/otel-resource-attributes-configure.png?w=550 550w, /media/blog/otel-reource-attributes/otel-resource-attributes-configure.png?w=750 750w, /media/blog/otel-reource-attributes/otel-resource-attributes-configure.png?w=900 900w, /media/blog/otel-reource-attributes/otel-resource-attributes-configure.png?w=1040 1040w, /media/blog/otel-reource-attributes/otel-resource-attributes-configure.png?w=1240 1240w, /media/blog/otel-reource-attributes/otel-resource-attributes-configure.png?w=1920 1920w"
data-sizes="auto"alt="OpenTelemetry 的“配置”按钮的屏幕截图。"
width="348"
height="163"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/otel-reource-attributes/otel-resource-attributes-configure.png"
alt="OpenTelemetry 的“配置”按钮的屏幕截图。"
width="348"
height="163"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;ol start="3"&gt;&lt;li&gt;在&lt;strong&gt;“密码/API 令牌”&lt;/strong&gt;部分中，单击&lt;strong&gt;“立即生成”&lt;/strong&gt;以创建新的 API 令牌：&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;为 API 令牌命名&lt;em&gt;-&lt;/em&gt;例如&lt;code&gt;test-service&lt;/code&gt; 。&lt;/li&gt;&lt;li&gt;单击&lt;strong&gt;创建令牌。&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;单击&lt;strong&gt;“关闭”&lt;/strong&gt;而不复制令牌。&lt;/li&gt;&lt;li&gt;单击&lt;strong&gt;复制到剪贴板&lt;/strong&gt;将环境变量复制到剪贴板。 &lt;/li&gt;&lt;/ul&gt;&lt;figure
class="figure-wrapper figure-wrapper__lightbox w-100p "
style="max-width: 1230px;"
itemprop="associatedMedia"
itemscope=""
itemtype="http://schema.org/ImageObject"
&gt; &lt;a
class="lightbox-link"
href="/media/blog/otel-reource-attributes/otel-resource-attributes-attributes-env-variables.png"
itemprop="contentUrl"
&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/otel-reource-attributes/otel-resource-attributes-attributes-env-variables.png"data-srcset="/media/blog/otel-reource-attributes/otel-resource-attributes-attributes-env-variables.png?w=320 320w, /media/blog/otel-reource-attributes/otel-resource-attributes-attributes-env-variables.png?w=550 550w, /media/blog/otel-reource-attributes/otel-resource-attributes-attributes-env-variables.png?w=750 750w, /media/blog/otel-reource-attributes/otel-resource-attributes-attributes-env-variables.png?w=900 900w, /media/blog/otel-reource-attributes/otel-resource-attributes-attributes-env-variables.png?w=1040 1040w, /media/blog/otel-reource-attributes/otel-resource-attributes-attributes-env-variables.png?w=1240 1240w, /media/blog/otel-reource-attributes/otel-resource-attributes-attributes-env-variables.png?w=1920 1920w"
data-sizes="auto"alt="环境变量的屏幕截图。"
width="1230"
height="298"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/otel-reource-attributes/otel-resource-attributes-attributes-env-variables.png"
alt="环境变量的屏幕截图。"
width="1230"
height="298"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;ol start="4"&gt;&lt;li&gt;选择一个服务名称来标识该服务&lt;em&gt;-&lt;/em&gt;例如&lt;code&gt;test&lt;/code&gt; 。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;现在，更新以下 shell 脚本，以使用上面检索到的信息配置应用程序并启用自动检测。&lt;/p&gt;&lt;div class="code-snippet code-snippet__mini"&gt;&lt;div class="lang-toolbar__mini"&gt; &lt;span class="code-clipboard"&gt;&lt;button x-data="app_code_snippet()" x-init="init()" @click="copy()"&gt;&lt;img class="code-clipboard__icon" src="/media/images/icons/icon-copy-small-2.svg" alt="将代码复制到剪贴板" width="14" height="13"&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="code-snippet code-snippet__border"&gt;&lt;pre data-expanded="false"&gt; &lt;code class="language-none"&gt;# Authentication environment variables from steps above export OTEL_EXPORTER_OTLP_PROTOCOL=&amp;quot;http/protobuf&amp;quot; export OTEL_EXPORTER_OTLP_ENDPOINT=&amp;quot;https://...&amp;quot; export OTEL_EXPORTER_OTLP_HEADERS=&amp;quot;Authorization=Basic ...&amp;quot; export OTEL_SERVICE_NAME=&amp;lt;Service Name&amp;gt; export OTEL_TRACES_EXPORTER=&amp;quot;otlp&amp;quot; export OTEL_METRICS_EXPORTER=&amp;quot;otlp&amp;quot; export NODE_OPTIONS=&amp;quot;--require @opentelemetry/auto-instrumentations-node/register&amp;quot; # List the resource detectors we want to collect the attributes of export OTEL_NODE_RESOURCE_DETECTORS=&amp;quot;env,host,os,serviceinstance&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;如果您的应用程序使用云提供商，请将其添加到上面环境变量&lt;code&gt;OTEL_NODE_RESOURCE_DETECTORS&lt;/code&gt;上的检测器列表中。&lt;/p&gt;&lt;div class="code-snippet code-snippet__mini"&gt;&lt;div class="lang-toolbar__mini"&gt; &lt;span class="code-clipboard"&gt;&lt;button x-data="app_code_snippet()" x-init="init()" @click="copy()"&gt;&lt;img class="code-clipboard__icon" src="/media/images/icons/icon-copy-small-2.svg" alt="将代码复制到剪贴板" width="14" height="13"&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="code-snippet code-snippet__border"&gt;&lt;pre data-expanded="false"&gt; &lt;code class="language-none"&gt;# Alibaba Cloud export OTEL_NODE_RESOURCE_DETECTORS=&amp;quot;env,host,serviceinstance,alibaba&amp;quot; # Amazon Web Services export OTEL_NODE_RESOURCE_DETECTORS=&amp;quot;env,host,os,serviceinstance,aws&amp;quot; # Azure export OTEL_NODE_RESOURCE_DETECTORS=&amp;quot;env,host,os,serviceinstance,azure&amp;quot; # Google Cloud Platform export OTEL_NODE_RESOURCE_DETECTORS=&amp;quot;env,host,os,serviceinstance,gcp&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id="run-the-application"&gt;运行应用程序&lt;/h3&gt;&lt;p&gt;现在您已完成所有设置，您可以运行您的应用程序。&lt;/p&gt;&lt;div class="code-snippet code-snippet__mini"&gt;&lt;div class="lang-toolbar__mini"&gt; &lt;span class="code-clipboard"&gt;&lt;button x-data="app_code_snippet()" x-init="init()" @click="copy()"&gt;&lt;img class="code-clipboard__icon" src="/media/images/icons/icon-copy-small-2.svg" alt="将代码复制到剪贴板" width="14" height="13"&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="code-snippet code-snippet__border"&gt;&lt;pre data-expanded="false"&gt; &lt;code class="language-none"&gt;$ npx ts-node app.ts OpenTelemetry automatic instrumentation started successfully OpenTelemetry automatic instrumentation started successfully Listening for requests on http://localhost:8080&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id="observe-the-service-in-application-observability"&gt;在应用程序可观察性中观察服务&lt;/h2&gt;&lt;p&gt;Grafana Cloud 中的开放应用程序可观察性：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;使用&lt;code&gt;https://&amp;lt;your-stack-name&amp;gt;.grafana.net&lt;/code&gt;导航到堆栈。&lt;/li&gt;&lt;li&gt;展开 Grafana 徽标下方的左上方菜单。&lt;/li&gt;&lt;li&gt;单击&lt;strong&gt;“指标”&lt;/strong&gt; ，然后单击&lt;strong&gt;“新指标探索”&lt;/strong&gt; 。&lt;/li&gt;&lt;li&gt;您将能够看到不同的指标图表。&lt;/li&gt;&lt;/ol&gt;&lt;h3 id="identify-problematic-resources"&gt;识别有问题的资源&lt;/h3&gt;&lt;p&gt;指标页面将列出当前发送到 Grafana 实例的所有指标。您还可以按您想要关注的指标进行过滤，例如延迟。 &lt;/p&gt;&lt;figure
class="figure-wrapper figure-wrapper__lightbox w-100p "
style="max-width: 1999px;"
itemprop="associatedMedia"
itemscope=""
itemtype="http://schema.org/ImageObject"
&gt; &lt;a
class="lightbox-link"
href="/media/blog/otel-reource-attributes/otel-resource-attributes-filter-by-metrics.png"
itemprop="contentUrl"
&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/otel-reource-attributes/otel-resource-attributes-filter-by-metrics.png"data-srcset="/media/blog/otel-reource-attributes/otel-resource-attributes-filter-by-metrics.png?w=320 320w, /media/blog/otel-reource-attributes/otel-resource-attributes-filter-by-metrics.png?w=550 550w, /media/blog/otel-reource-attributes/otel-resource-attributes-filter-by-metrics.png?w=750 750w, /media/blog/otel-reource-attributes/otel-resource-attributes-filter-by-metrics.png?w=900 900w, /media/blog/otel-reource-attributes/otel-resource-attributes-filter-by-metrics.png?w=1040 1040w, /media/blog/otel-reource-attributes/otel-resource-attributes-filter-by-metrics.png?w=1240 1240w, /media/blog/otel-reource-attributes/otel-resource-attributes-filter-by-metrics.png?w=1920 1920w"
data-sizes="auto"alt="按指标过滤功能的屏幕截图。"
width="1999"
height="919"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/otel-reource-attributes/otel-resource-attributes-filter-by-metrics.png"
alt="按指标过滤功能的屏幕截图。"
width="1999"
height="919"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;然后，您可以通过单击&lt;strong&gt;“选择”&lt;/strong&gt;从列表中选择要进一步分析的图表。&lt;/p&gt;&lt;p&gt;例如，选择&lt;code&gt;traces_spanmetrics_latency_count&lt;/code&gt;的图表，它将打开一个页面，其中列出了您可以进行细分的所有可能的资源。通过单击任何值，您可以看到按所选资源的不同属性值细分的不同图表。您还可以通过单击&lt;strong&gt;“细分”&lt;/strong&gt;选项卡，然后单击任意资源名称来进行此选择。这是选择&lt;code&gt;host_id&lt;/code&gt;时的样子： &lt;/p&gt;&lt;figure
class="figure-wrapper figure-wrapper__lightbox w-100p "
style="max-width: 1999px;"
itemprop="associatedMedia"
itemscope=""
itemtype="http://schema.org/ImageObject"
&gt; &lt;a
class="lightbox-link"
href="/media/blog/otel-reource-attributes/otel-resource-attributes-meta.png"
itemprop="contentUrl"
&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/otel-reource-attributes/otel-resource-attributes-meta.png"data-srcset="/media/blog/otel-reource-attributes/otel-resource-attributes-meta.png?w=320 320w, /media/blog/otel-reource-attributes/otel-resource-attributes-meta.png?w=550 550w, /media/blog/otel-reource-attributes/otel-resource-attributes-meta.png?w=750 750w, /media/blog/otel-reource-attributes/otel-resource-attributes-meta.png?w=900 900w, /media/blog/otel-reource-attributes/otel-resource-attributes-meta.png?w=1040 1040w, /media/blog/otel-reource-attributes/otel-resource-attributes-meta.png?w=1240 1240w, /media/blog/otel-reource-attributes/otel-resource-attributes-meta.png?w=1920 1920w"
data-sizes="auto"alt="“细分”选项卡的屏幕截图。"
width="1999"
height="984"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/otel-reource-attributes/otel-resource-attributes-meta.png"
alt="“细分”选项卡的屏幕截图。"
width="1999"
height="984"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;在此示例中，我们可以看到第一个图表比其他图表具有更高的值。如果您已经知道该主机与其他主机相比的差异，则可以帮助您确定导致该特定资源的延迟值较高的原因。如果选择其他资源（例如&lt;code&gt;service_instance_id&lt;/code&gt;等），这将类似地工作。&lt;/p&gt;&lt;h3 id="filter-traces-by-resource-attribute-value"&gt;按资源属性值过滤跟踪&lt;/h3&gt;&lt;p&gt;如果仅了解在上一步中发现的资源属性还不够，您可以在&lt;strong&gt;“跟踪”&lt;/strong&gt;选项卡中获取更多详细信息。为此，请按照下列步骤操作：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;展开 Grafana 徽标下方的左上方菜单。&lt;/li&gt;&lt;li&gt;单击&lt;strong&gt;应用程序&lt;/strong&gt;并选择您选择的应用程序名称。&lt;/li&gt;&lt;li&gt;单击&lt;strong&gt;“痕迹”&lt;/strong&gt;选项卡。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;您会注意到它被&lt;code&gt;{resource.service.name=&amp;quot;test&amp;quot;}&lt;/code&gt;过滤。&lt;/p&gt;&lt;p&gt;选择在 TraceQL 中&lt;strong&gt;编辑&lt;/strong&gt;并添加您收集的任何资源属性，例如：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;要查看来自同一主机 ID 的所有跟踪： &lt;code&gt;{resource.service.name=&amp;quot;test&amp;quot; &amp;amp;&amp;amp; resource.host.id=&amp;quot;5E60C495-B5F9-54CA-B256-30016D15AAE4&amp;quot;}&lt;/code&gt;&lt;/li&gt;&lt;li&gt;要查看来自同一服务实例 ID 的所有跟踪： &lt;code&gt;{resource.service.name=&amp;quot;test-service-id-6&amp;quot; &amp;amp;&amp;amp; resource.service.instance.id=&amp;quot;12098e72-fd23-4927-92d4-65a205014241&amp;quot;}&lt;/code&gt; &lt;/li&gt;&lt;/ol&gt;&lt;figure
class="figure-wrapper figure-wrapper__lightbox w-100p "
style="max-width: 1804px;"
itemprop="associatedMedia"
itemscope=""
itemtype="http://schema.org/ImageObject"
&gt; &lt;a
class="lightbox-link"
href="/media/blog/otel-reource-attributes/otel-resource-attributes-edit-in-traceql.png"
itemprop="contentUrl"
&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/otel-reource-attributes/otel-resource-attributes-edit-in-traceql.png"data-srcset="/media/blog/otel-reource-attributes/otel-resource-attributes-edit-in-traceql.png?w=320 320w, /media/blog/otel-reource-attributes/otel-resource-attributes-edit-in-traceql.png?w=550 550w, /media/blog/otel-reource-attributes/otel-resource-attributes-edit-in-traceql.png?w=750 750w, /media/blog/otel-reource-attributes/otel-resource-attributes-edit-in-traceql.png?w=900 900w, /media/blog/otel-reource-attributes/otel-resource-attributes-edit-in-traceql.png?w=1040 1040w, /media/blog/otel-reource-attributes/otel-resource-attributes-edit-in-traceql.png?w=1240 1240w, /media/blog/otel-reource-attributes/otel-resource-attributes-edit-in-traceql.png?w=1920 1920w"
data-sizes="auto"alt="“跟踪”选项卡的屏幕截图。"
width="1804"
height="878"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/otel-reource-attributes/otel-resource-attributes-edit-in-traceql.png"
alt="“跟踪”选项卡的屏幕截图。"
width="1804"
height="878"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;这将列出与您选择的值匹配的跟踪。要获取有关这些痕迹的更多详细信息，您可以：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;单击您感兴趣的跟踪的&lt;strong&gt;跟踪 ID&lt;/strong&gt;列的值。这将在右侧打开一个新区域，其中包含有关跟踪的详细信息。 &lt;/li&gt;&lt;/ol&gt;&lt;figure
class="figure-wrapper figure-wrapper__lightbox w-100p "
style="max-width: 1426px;"
itemprop="associatedMedia"
itemscope=""
itemtype="http://schema.org/ImageObject"
&gt; &lt;a
class="lightbox-link"
href="/media/blog/otel-reource-attributes/otel-resource-attributes-column-trace-id.png"
itemprop="contentUrl"
&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/otel-reource-attributes/otel-resource-attributes-column-trace-id.png"data-srcset="/media/blog/otel-reource-attributes/otel-resource-attributes-column-trace-id.png?w=320 320w, /media/blog/otel-reource-attributes/otel-resource-attributes-column-trace-id.png?w=550 550w, /media/blog/otel-reource-attributes/otel-resource-attributes-column-trace-id.png?w=750 750w, /media/blog/otel-reource-attributes/otel-resource-attributes-column-trace-id.png?w=900 900w, /media/blog/otel-reource-attributes/otel-resource-attributes-column-trace-id.png?w=1040 1040w, /media/blog/otel-reource-attributes/otel-resource-attributes-column-trace-id.png?w=1240 1240w, /media/blog/otel-reource-attributes/otel-resource-attributes-column-trace-id.png?w=1920 1920w"
data-sizes="auto"alt="显示跟踪详细信息的屏幕截图。"
width="1426"
height="874"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/otel-reource-attributes/otel-resource-attributes-column-trace-id.png"
alt="显示跟踪详细信息的屏幕截图。"
width="1426"
height="874"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;ol start="2"&gt;&lt;li&gt;单击&lt;strong&gt;“服务和操作”&lt;/strong&gt;部分中的任意行，它将打开有关该范围的详细信息。 &lt;/li&gt;&lt;/ol&gt;&lt;figure
class="figure-wrapper figure-wrapper__lightbox w-100p "
style="max-width: 1408px;"
itemprop="associatedMedia"
itemscope=""
itemtype="http://schema.org/ImageObject"
&gt; &lt;a
class="lightbox-link"
href="/media/blog/otel-reource-attributes/otel-resource-attributes-service-and-ops.png"
itemprop="contentUrl"
&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/otel-reource-attributes/otel-resource-attributes-service-and-ops.png"data-srcset="/media/blog/otel-reource-attributes/otel-resource-attributes-service-and-ops.png?w=320 320w, /media/blog/otel-reource-attributes/otel-resource-attributes-service-and-ops.png?w=550 550w, /media/blog/otel-reource-attributes/otel-resource-attributes-service-and-ops.png?w=750 750w, /media/blog/otel-reource-attributes/otel-resource-attributes-service-and-ops.png?w=900 900w, /media/blog/otel-reource-attributes/otel-resource-attributes-service-and-ops.png?w=1040 1040w, /media/blog/otel-reource-attributes/otel-resource-attributes-service-and-ops.png?w=1240 1240w, /media/blog/otel-reource-attributes/otel-resource-attributes-service-and-ops.png?w=1920 1920w"
data-sizes="auto"alt="服务和操作部分的屏幕截图。"
width="1408"
height="1432"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/otel-reource-attributes/otel-resource-attributes-service-and-ops.png"
alt="服务和操作部分的屏幕截图。"
width="1408"
height="1432"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;ol start="3"&gt;&lt;li&gt;单击&lt;strong&gt;资源属性&lt;/strong&gt;或&lt;strong&gt;跨度属性&lt;/strong&gt;，它将列出随该跨度发送的所有值。 &lt;/li&gt;&lt;/ol&gt;&lt;figure
class="figure-wrapper figure-wrapper__lightbox w-100p "
style="max-width: 1296px;"
itemprop="associatedMedia"
itemscope=""
itemtype="http://schema.org/ImageObject"
&gt; &lt;a
class="lightbox-link"
href="/media/blog/otel-reource-attributes/otel-resource-attributes-attributes-dropdown.png"
itemprop="contentUrl"
&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/otel-reource-attributes/otel-resource-attributes-attributes-dropdown.png"data-srcset="/media/blog/otel-reource-attributes/otel-resource-attributes-attributes-dropdown.png?w=320 320w, /media/blog/otel-reource-attributes/otel-resource-attributes-attributes-dropdown.png?w=550 550w, /media/blog/otel-reource-attributes/otel-resource-attributes-attributes-dropdown.png?w=750 750w, /media/blog/otel-reource-attributes/otel-resource-attributes-attributes-dropdown.png?w=900 900w, /media/blog/otel-reource-attributes/otel-resource-attributes-attributes-dropdown.png?w=1040 1040w, /media/blog/otel-reource-attributes/otel-resource-attributes-attributes-dropdown.png?w=1240 1240w, /media/blog/otel-reource-attributes/otel-resource-attributes-attributes-dropdown.png?w=1920 1920w"
data-sizes="auto"alt="资源属性部分的屏幕截图。"
width="1296"
height="1164"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/otel-reource-attributes/otel-resource-attributes-attributes-dropdown.png"
alt="资源属性部分的屏幕截图。"
width="1296"
height="1164"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;掌握资源属性的值后，您可以决定哪些值最适合您的应用程序，然后调整未按预期执行的部分。&lt;/p&gt;&lt;h2 id="tell-us-what-you-think"&gt;告诉我们你的想法&lt;/h2&gt;&lt;p&gt;我们很想听听您在应用程序可观察性和 OpenTelemetry 方面的体验！请随时访问&lt;a href="https://slack.grafana.com" target="_blank" rel="noopener noreferrer"&gt;https://slack.grafana.com&lt;/a&gt;并加入&lt;a href="https://grafana.slack.com/archives/C05E87XRK3J" target="_blank" rel="noopener noreferrer"&gt;#application-observability&lt;/a&gt;频道来联系我们的 Slack 社区。&lt;/p&gt;&lt;p&gt;此外，有关完整的实施细节和最佳实践，您可以查看我们的&lt;a href="/docs/grafana-cloud/monitor-applications/application-observability/"&gt;应用程序可观察性文档&lt;/a&gt;。&lt;/p&gt;&lt;p&gt; &lt;em&gt;&lt;a href="/products/cloud/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Cloud&lt;/a&gt;是开始使用指标、日志、跟踪和仪表板的最简单方法。我们为每个用例提供慷慨的永久免费套餐和计划。&lt;a href="/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt"&gt;现在免费注册&lt;/a&gt;！&lt;/em&gt;&lt;/p&gt;</description><pubDate>Mon, 17 Jun 2024 00:00:00 GMT</pubDate><guid isPermaLink="true">https://grafana.com/blog/2024/06/17/how-to-use-opentelemetry-resource-attributes-and-grafana-cloud-application-observability-to-accelerate-root-cause-analysis/</guid></item><item><title>【How Dell successfully migrated to Grafana Cloud and consolidated its observability in the process】</title><link>https://grafana.com/blog/2024/06/14/how-dell-successfully-migrated-to-grafana-cloud-and-consolidated-its-observability-in-the-process/</link><description>&lt;p&gt;虽然某些监控工具擅长执行特定任务，但当您对系统有整体了解时，可观察性效果最佳。您需要一个能够共同处理所有遥测数据的平台，否则您最终可能会得到一组复杂、低效且昂贵的不一致、孤立的工具。&lt;/p&gt;&lt;p&gt;这是 Dell Technologies 的一个团队去年在转向&lt;a href="https://grafana.com/products/cloud/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Cloud&lt;/a&gt;之前意识到的。&lt;/p&gt;&lt;p&gt;在&lt;a href="https://grafana.com/events/observabilitycon-on-the-road/2024/dallas/how-dell-consolidated-observability-with-grafana-cloud/"&gt;ObservabilityCON On the Road 2024 演示&lt;/a&gt;中，Dell Technologies 的现场可靠性工程师 Brian Murphy 讲述了本地可观测性和 IT 管理平台 SolarWinds 带来的变化，以及他的公司如何在不丢失功能的情况下整合其可观测性工具。&lt;/p&gt;&lt;p&gt;戴尔甚至还在这个过程中获得了有用的工具。现在，他们使用 Grafana Cloud 的&lt;a href="https://grafana.com/blog/2023/05/09/adaptive-metrics-grafana-cloud-announcement/?pg=blog&amp;amp;plcmt=body-txt"&gt;自适应指标&lt;/a&gt;功能来节省资金，并且只捕获他们需要的指标。 “你不必看没有用的垃圾，”墨菲说。 “而且解决起来要容易得多。”&lt;/p&gt;&lt;p&gt;与此同时， &lt;a href="https://grafana.com/docs/oncall/latest/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana OnCall&lt;/a&gt;使 13,000 名工程师更轻松地解决问题，并减少了收件箱的混乱情况。全公司的团队成员（包括高管）都受益于智能、实用的仪表板。&lt;/p&gt;&lt;p&gt;&lt;em&gt;注意：ObservabilityCON on the Road 2024 的 Dell Technologies 会议现已可供点播观看。您可以在下面的 YouTube 上查看完整的会议内容。&lt;/em&gt; &lt;/p&gt;&lt;div class="shortcode youtube"&gt;&lt;/div&gt;&lt;h2 id="a-lot-of-ground-to-cover-and-just-one-tool-to-do-it-with"&gt;需要涵盖的内容很多，只需一种工具即可完成&lt;/h2&gt;&lt;p&gt;Murphy 在戴尔面向内部的基础设施解决方案小组 (ISG) 工作。更具体地说，他在一个名为 Tech Ops 2.0 的团队工作，该团队专注于提高可靠性和 MTTx，并确保他们的合作伙伴“快乐和成功”。他们还拥有大量 IT 资产，包括：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;该公司的“北极星工具”，包括 Jira、Confluence、GitHub Enterprise、Jenkins 等&lt;/li&gt;&lt;li&gt;构建管道&lt;/li&gt;&lt;li&gt;戴尔分布于全球的数据中心&lt;/li&gt;&lt;li&gt;它的 Kubernetes 集群，加上所有硬件和随之而来的网络&lt;/li&gt;&lt;li&gt;内部云&lt;/li&gt;&lt;li&gt;400 个交换机，由全球 10 个不同地点的几个团队进行监控&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;此前，戴尔使用 SolarWinds 来监控一切。尽管它提供了网络性能监控并具有团队正在使用的功能，但也存在缺点。 “这是非常利基的。它只做一件事，”墨菲解释道。&lt;/p&gt;&lt;p&gt;团队很少使用 SolarWinds（如果有的话）。还有一个问题是，与某个地区的问题相关的警报被发送到数千英里之外的团队。他说，所有这些噪音都是“一个大问题”。 “我们想减少噪音。”&lt;/p&gt;&lt;p&gt;还存在自托管的挑战，以及组合遥测数据的重大障碍。 “它没有与其他任何东西整合，”墨菲解释道。 “我们没有让它与其他任何东西交谈。如果您想做 SolarWinds 中没有的任何操作，则必须切换选项卡。您必须登录其他系统。这是一个筒仓。”&lt;/p&gt;&lt;h2 id="time-for-a-change"&gt;改变的时候了&lt;/h2&gt;&lt;p&gt;戴尔选择不再与 SolarWinds 续签合同。 Murphy 认为这是谈论“可观测性新方向”的绝佳机会，在评估其他产品后，他们决定 Grafana Labs 是最佳选择。他说：“它将把所有东西聚集在一起，打破那些围墙，打破孤岛。”&lt;/p&gt;&lt;p&gt;通过与世界各地的分布式团队交谈，Murphy 的团队能够掌握用例——工程师在 SolarWinds 中做了什么以及他们仍然需要什么。几个月内，他们使用 Grafana 推出新代理并创建仪表板和警报。在进行正式迁移之前，工程师接受了培训并熟悉了新工具，因此大规模部署很快，Murphy 的团队也满足了过渡期限。&lt;/p&gt;&lt;p&gt; “按时完成任务很好，”他说，“但对我来说更重要的是我们没有损失任何东西。我们对硬件和网络的可观察性得以维持。”他团队的合作伙伴或客户都没有注意到这一变化。 “可靠性零差距，没有负面影响。所以对我来说，那是一个巨大的胜利时刻。”&lt;/p&gt;&lt;h2 id="a-new-unified-way-forward-with-grafana-cloud"&gt; Grafana Cloud 的全新、统一的前进方式&lt;/h2&gt;&lt;p&gt;借助 Grafana Cloud，戴尔团队从一个只做一件事的工具转变为一个拥有多种工具、可以做更多事情的平台。&lt;/p&gt;&lt;p&gt; “我们实际上获得了以前无法获得的信息，这很酷，”墨菲说。&lt;/p&gt;&lt;p&gt;他们构建了 SNMP 导出器和代理，并解锁了节点导出器和一些黑匣子导出器。他们还设置了警报、通知、基于角色的仪表板，并开始采用 Grafana Cloud 的更多部分。例如，他们使用自适应指标功能来删除大量未使用的指标。&lt;/p&gt;&lt;p&gt;墨菲表示，他的团队只是编写了一些规则并停止发布未使用的指标。下图来自 Grafana 仪表板，显示了一段时间内的指标。他说，绿线是公司正在节省的资金。 “黄色的是我们正在保存的指标以及我们没有保存的指标。所以黄线是我们正在聚合的东西。”&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/dell-migration/screenshot-dell-migration-graph.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/dell-migration/screenshot-dell-migration-graph.png"data-srcset="/media/blog/dell-migration/screenshot-dell-migration-graph.png?w=320 320w, /media/blog/dell-migration/screenshot-dell-migration-graph.png?w=550 550w, /media/blog/dell-migration/screenshot-dell-migration-graph.png?w=750 750w, /media/blog/dell-migration/screenshot-dell-migration-graph.png?w=900 900w, /media/blog/dell-migration/screenshot-dell-migration-graph.png?w=1040 1040w, /media/blog/dell-migration/screenshot-dell-migration-graph.png?w=1240 1240w, /media/blog/dell-migration/screenshot-dell-migration-graph.png?w=1920 1920w"
data-sizes="auto"alt="Grafana 仪表板中的指标图表显示绿线上方有一条黄线"
width="1200"
height="299"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/dell-migration/screenshot-dell-migration-graph.png"
alt="Grafana 仪表板中的指标图表显示绿线上方有一条黄线"
width="1200"
height="299"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;他们还在&lt;a href="/docs/grafana-cloud/testing/synthetic-monitoring/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Cloud Synthetic Monitoring&lt;/a&gt;中使用私有探测器来密切关注其云环境。 “它让我们清楚地了解网络流量的下降情况。当我们确实发现问题时，这些图表会为我们提供帮助。”&lt;/p&gt;&lt;p&gt;最重要的是，Murphy 的团队为“想了解我们生活的世界中事情进展如何”的公司高管以及使用 Grafana OnCall 来解决出现问题的支持团队成员创建了仪表板。 “高管们似乎对自己的外表很满意，”他说。 “团队很乐意使用它们，解决问题，让事情发生。” &lt;/p&gt;&lt;figure
class="figure-wrapper figure-wrapper__lightbox w-100p "
style="max-width: 1584px;"
itemprop="associatedMedia"
itemscope=""
itemtype="http://schema.org/ImageObject"
&gt; &lt;a
class="lightbox-link"
href="/media/blog/dell-migration/screenshot-dell-migration-dashboard-cropped-USE-THIS.png"
itemprop="contentUrl"
&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/dell-migration/screenshot-dell-migration-dashboard-cropped-USE-THIS.png"data-srcset="/media/blog/dell-migration/screenshot-dell-migration-dashboard-cropped-USE-THIS.png?w=320 320w, /media/blog/dell-migration/screenshot-dell-migration-dashboard-cropped-USE-THIS.png?w=550 550w, /media/blog/dell-migration/screenshot-dell-migration-dashboard-cropped-USE-THIS.png?w=750 750w, /media/blog/dell-migration/screenshot-dell-migration-dashboard-cropped-USE-THIS.png?w=900 900w, /media/blog/dell-migration/screenshot-dell-migration-dashboard-cropped-USE-THIS.png?w=1040 1040w, /media/blog/dell-migration/screenshot-dell-migration-dashboard-cropped-USE-THIS.png?w=1240 1240w, /media/blog/dell-migration/screenshot-dell-migration-dashboard-cropped-USE-THIS.png?w=1920 1920w"
data-sizes="auto"alt="Grafana 仪表板面板的屏幕截图，其中包含一个带有数字百分比的大框、饼图以及绿色、黄色和红色框"
width="1584"
height="906"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/dell-migration/screenshot-dell-migration-dashboard-cropped-USE-THIS.png"
alt="Grafana 仪表板面板的屏幕截图，其中包含一个带有数字百分比的大框、饼图以及绿色、黄色和红色框"
width="1584"
height="906"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;墨菲表示，总的来说，Grafana Cloud 已成为戴尔“第一块事件管理平台”。事实上，当有人收到警报时，运行手册说寻找信息的第一个地方是 Grafana 仪表板。 “这样一来，除非必要，否则他们就不会在六种不同的设备之间切换。”他说，他们还利用 OnCall 集成，这意味着不需要接收电子邮件的人收到的电子邮件数量会减少。&lt;/p&gt;&lt;p&gt;减少一项支持和维护服务也让那些“维护、喂养和培育 SolarWinds 实例”的人们能够腾出时间来从事“更酷、更新、更好、更有趣、更有趣”的事情。&lt;/p&gt;&lt;h2 id="whats-next"&gt;下一步是什么&lt;/h2&gt;&lt;p&gt;Murphy 表示，戴尔正在积极将 40 或 50 个其他团队和服务迁移到 Grafana Cloud，包括 Artifactory、JIRA、Confluence、他们的 Kubernetes 和 OpenShift。目标是让每个人都在同一个屋檐下，这样用户就可以摆脱幼稚的警报，并发出“真正智能、合格的警报”。&lt;/p&gt;&lt;p&gt;该公司有一个新团队负责监控数千个其他交换机。 “你猜怎么了？”墨菲说道。 “我们只是为他们提供相同的仪表板，他们就获得了价值。我们刚刚添加了一个数据源选择器。就是这样。这就是我们所要做的一切来制作这些数据，让这些仪表板对他们来说又酷又新。”&lt;/p&gt;&lt;p&gt;他表示，展望未来，他们计划进行更多基于 SLO 的警报（例如，当风扇故障时），以专注于体验。他们还在考虑使用&lt;a href="/oss/beyla-ebpf/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Beyla&lt;/a&gt; ，这是一种基于 eBPF 的开源自动检测工具。继自适应指标取得成功之后，他们渴望尝试目前正在开发中的自适应日志。 “我们发送了很多日志，很多日志，”他说。他们将继续为 Grafana Cloud 引入更多团队和更多服务。&lt;/p&gt;&lt;p&gt; &lt;em&gt;&lt;a href="/products/cloud/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Cloud&lt;/a&gt;是开始连续分析、指标、日志、跟踪和仪表板的最简单方法。我们为每个用例提供慷慨的永久免费套餐和计划。&lt;a href="/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt"&gt;现在免费注册！&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</description><pubDate>Fri, 14 Jun 2024 12:04:00 GMT</pubDate><guid isPermaLink="true">https://grafana.com/blog/2024/06/14/how-dell-successfully-migrated-to-grafana-cloud-and-consolidated-its-observability-in-the-process/</guid></item><item><title>【Improved anomaly detection and faster root cause analysis: the latest features in Grafana Cloud Application Observability】</title><link>https://grafana.com/blog/2024/06/13/improved-anomaly-detection-and-faster-root-cause-analysis-the-latest-features-in-grafana-cloud-application-observability/</link><description>&lt;p&gt;近年来，“我们从客户那里听到的最大需求是更容易地理解他们的可观测性数据，将可观测性扩展到应用程序层，并获得更深入的情境化分析，”CTO Tom Wilkie 说道。 Grafana 实验室，ObservabilityCON 2023。&lt;/p&gt;&lt;p&gt;为此，去年我们推出了&lt;a href="https://grafana.com/products/cloud/application-observability/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Cloud Application Observability&lt;/a&gt; ，这是一种固执己见、开箱即用的解决方案，旨在提高现代应用程序的可靠性。 Grafana Cloud 中的应用程序可观测性以对 OpenTelemetry 和 Prometheus 的本机支持为特色，可帮助开发人员和 SRE 无缝统一应用程序和基础设施洞察，这是加速异常检测和根本原因分析、缩短 MTTR 并推进整体可观测性策略的重要功能。&lt;/p&gt;&lt;p&gt;自从我们去年秋天&lt;a href="https://grafana.com/blog/2023/11/14/announcing-application-observability-in-grafana-cloud-with-native-support-for-opentelemetry-and-prometheus/"&gt;宣布全面推出应用程序可观察性&lt;/a&gt;以来，我们一直在努力开发新功能，以进一步增强用户体验，并使 Grafana Cloud 用户能够更深入地了解应用程序性能。&lt;/p&gt;&lt;p&gt;下面介绍了在应用程序可观察性中使用遥测信号的一些方法，以改进异常检测并更好地了解服务的行为。&lt;/p&gt;&lt;p&gt;&lt;em&gt;注意：要查看应用程序可观察性最新功能的演示，您可以观看下面的 YouTube 视频。&lt;/em&gt; &lt;/p&gt;&lt;div class="shortcode youtube"&gt;&lt;/div&gt;&lt;h2 id="analyze-performance-over-time-with-time-frame-comparison"&gt;通过时间范围比较来分析一段时间内的绩效&lt;/h2&gt;&lt;p&gt;在处理数据时，尤其是随着时间的推移而处理的数据时，总是存在一个令人烦恼的问题：“我看到的是正常值还是异常值？”&lt;/p&gt;&lt;p&gt;为了帮助回答这个问题，我们添加了&lt;a href="https://grafana.com/docs/grafana-cloud/monitor-applications/application-observability/manual/service/?pg=blog&amp;amp;plcmt=body-txt/#time-frame-comparison"&gt;时间范围比较&lt;/a&gt;，这是对应用程序可观察性用户体验的增强，允许您比较特定服务在一段时间内的指标，例如今天与昨天或当月与前几个月。&lt;/p&gt;&lt;p&gt;想象一下：您的电子商务业务正在进行大规模促销，并且想要了解对&lt;code&gt;productcatalog&lt;/code&gt;服务的请求率是否仍在参数范围内。要在 Grafana 中执行此操作，您需要手动创建一个使用两个不同回溯期的面板。在应用程序可观察性中，您只需切换比较复选框即可查看与当前值相比的一系列预期值。这样，您就可以放心，您的服务仍在运行。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/app-observability-updates/application-observability-updates-timeframe-comparison.gif"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="显示时间范围比较功能的 gif。" class="lazyload " height="452" width="1024" /&gt;&lt;noscript&gt;&lt;img alt="显示时间范围比较功能的 gif。" height="452" src="https://grafana.com/media/blog/app-observability-updates/application-observability-updates-timeframe-comparison.gif" width="1024" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;h2 id="identify-anomalies-with-automatic-baselining"&gt;通过自动基线识别异常&lt;/h2&gt;&lt;p&gt;但是等等——季节性怎么样？继续我们上面的例子，如果您是一家电子商务企业，那么您最繁忙的月份可能是下半年。为了考虑到这种季节性，并确保进行同类比较，我们引入了&lt;a href="https://grafana.com/docs/grafana-cloud/monitor-applications/application-observability/manual/automatic-baseline/?pg=blog&amp;amp;plcmt=body-txt"&gt;自动基线&lt;/a&gt;作为将当前时间范围与时间窗口比较中的基线进行比较的方法。&lt;/p&gt;&lt;p&gt;自动基线使用标准偏差来帮助您了解您所看到的是否是正常模式，或者是否偏离预期计算，以便您可以快速开始排除故障。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/app-observability-updates/application-observability-updates-auto-baselining.gif"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="显示自动基线功能的 gif。" class="lazyload " height="481" width="1024" /&gt;&lt;noscript&gt;&lt;img alt="显示自动基线功能的 gif。" height="481" src="https://grafana.com/media/blog/app-observability-updates/application-observability-updates-auto-baselining.gif" width="1024" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;h2 id="narrow-down-problem-dimensions-with-group-by-and-filter-by"&gt;使用分组依据和过滤依据缩小问题维度&lt;/h2&gt;&lt;p&gt;一旦您通过警报或用户界面发现异常，下一步就是缩小问题范围：是否存在可以解释异常的变量？&lt;/p&gt;&lt;p&gt;在 Grafana Cloud 应用程序可观察性中，您可以探索不同的属性及其值如何影响应用程序性能。这些属性是应用程序固有的特征，例如其部署坐标或特定于域的属性（例如部门名称或地理位置）。&lt;/p&gt;&lt;p&gt;假设您通过基线比较发现了异常情况，并且想要分析原因。现在，您可以使用&lt;a href="https://grafana.com/docs/grafana-cloud/monitor-applications/application-observability/manual/group-filter/?pg=application-observability&amp;amp;plcmt=hero-btn-2/?pg=blog&amp;amp;plcmt=body-txt#group-by"&gt;分组功能&lt;/a&gt;按&lt;code&gt;k8s.cluster.name&lt;/code&gt;等属性来细分面板，并获取托管工作负载的每个集群的速率、错误和持续时间。这可以帮助您了解是否有一个特定位置的性能比其他位置差。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/app-observability-updates/application-observability-updates-groupby.gif"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="显示按功能分组的 gif。" class="lazyload " height="543" width="1024" /&gt;&lt;noscript&gt;&lt;img alt="显示按功能分组的 gif。" height="543" src="https://grafana.com/media/blog/app-observability-updates/application-observability-updates-groupby.gif" width="1024" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;找到异常值后，您可以使用&lt;a href="https://grafana.com/docs/grafana-cloud/monitor-applications/application-observability/manual/group-filter/?pg=application-observability&amp;amp;plcmt=hero-btn-2#filter-by"&gt;过滤功能&lt;/a&gt;根据属性值管理哪些数据可见。例如，如果您按地理区域对数据进行分组并确定错误仅发生在欧洲区域，则您可以筛选数据以仅可视化欧洲地理区域。然后，您可以重复该步骤以进一步细分数据并确定问题。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/app-observability-updates/application-observability-updates-filterby.gif"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="按功能显示过滤器的 gif。" class="lazyload " height="541" width="1024" /&gt;&lt;noscript&gt;&lt;img alt="按功能显示过滤器的 gif。" height="541" src="https://grafana.com/media/blog/app-observability-updates/application-observability-updates-filterby.gif" width="1024" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;h2 id="faster-root-cause-analysis-with-in-context-navigation"&gt;通过上下文导航更快地进行根本原因分析&lt;/h2&gt;&lt;p&gt;当看到面板上的图案时，您常常想进一步挖掘，对吗？好吧，现在您可以在应用程序可观察性中进行操作。借助&lt;a href="https://grafana.com/docs/grafana/latest/panels-visualizations/configure-data-links/"&gt;Grafana 数据链接&lt;/a&gt;，现在可以从面板导航到特定时间点的跟踪和日志。&lt;/p&gt;&lt;p&gt;让我们来看另一个示例：假设您看到服务事务的持续时间出现峰值。您想要确定哪些交易需要很长时间才能处理，以及为什么会出现这种情况。只需单击图表，您就可以直接导航到指定时间范围和过滤器内这些交易的踪迹。这可以通过快速查明有问题的痕迹来加速根本原因分析。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/app-observability-updates/application-observability-updates-incontext-nav.gif"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="在上下文导航中显示的 gif。" class="lazyload " height="541" width="1024" /&gt;&lt;noscript&gt;&lt;img alt="在上下文导航中显示的 gif。" height="541" src="https://grafana.com/media/blog/app-observability-updates/application-observability-updates-incontext-nav.gif" width="1024" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;h2 id="get-started-with-application-observability"&gt;应用程序可观察性入门&lt;/h2&gt;&lt;p&gt;如果您尚未尝试过 Grafana Cloud 中的应用程序可观察性，可以通过以下步骤轻松开始：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;选择 Grafana Cloud 指标生成（如果尚未启用）。&lt;/li&gt;&lt;li&gt;使用 OpenTelemetry 检测您的应用程序。&lt;/li&gt;&lt;li&gt;使用&lt;a href="https://grafana.com/docs/alloy/latest/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Alloy&lt;/a&gt;与 OpenTelemetry (OTLP) 集成（推荐）或&lt;a href="https://opentelemetry.io/docs/collector/" rel="noopener noreferrer" target="_blank"&gt;OpenTelemetry Collector&lt;/a&gt;将遥测数据发送到 Grafana Cloud。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;有关完整的实施细节和最佳实践，您还可以参考我们的&lt;a href="https://grafana.com/docs/grafana-cloud/monitor-applications/application-observability/?pg=application-observability&amp;amp;plcmt=resources"&gt;应用程序可观察性文档&lt;/a&gt;。&lt;/p&gt;&lt;p&gt; &lt;em&gt;&lt;a href="https://grafana.com/products/cloud/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Cloud&lt;/a&gt;是开始应用程序可观察性的最简单方法。我们有一个慷慨的永久免费套餐，其中包括每月 2232 小时的主机小时数及更多。 &lt;a href="https://grafana.com/auth/sign-up/create-user?pg=blog-application-observability-ga&amp;amp;plcmt=in-txt&amp;amp;redirectPath=application-observability"&gt;现在免费注册！&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</description><pubDate>Thu, 13 Jun 2024 00:00:00 GMT</pubDate><guid isPermaLink="true">https://grafana.com/blog/2024/06/13/improved-anomaly-detection-and-faster-root-cause-analysis-the-latest-features-in-grafana-cloud-application-observability/</guid></item><item><title>【Grafana update: Service account tokens are replacing API keys】</title><link>https://grafana.com/blog/2024/06/12/grafana-update-service-account-tokens-are-replacing-api-keys/</link><description>&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;长话短说&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;所有&lt;strong&gt;现有的 API 密钥&lt;/strong&gt;将继续无缝运行。&lt;/li&gt;&lt;li&gt; Grafana Terraform 提供程序&lt;code&gt;api_key&lt;/code&gt;资源已在 v3 中删除。&lt;/li&gt;&lt;li&gt;在 Grafana 中&lt;strong&gt;配置 API 密钥&lt;/strong&gt;的脚本或配置工具（例如 Terraform）将需要迁移其自动化以使用服务帐户令牌。&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;增强安全性和提供灵活的访问控制一直是 Grafana 核心使命的一部分。为了配合这些努力，我们在 Grafana 9.1 中普遍提供了服务帐户。&lt;/p&gt;&lt;p&gt;服务帐户本质上是模拟 Grafana 用户的机器，它们用于运行自动化工作负载 - 例如，每天计算 Grafana 中的数据源数量或使用 Terraform 配置警报。这些是在 Grafana 外部的脚本或服务中运行的任务，需要与 Grafana 的 API 进行交互。&lt;/p&gt;&lt;p&gt;推出服务帐户来对应用程序进行身份验证促使我们重新评估 API 密钥的使用，而 API 密钥长期以来一直是 Grafana API 的主要身份验证方法。&lt;/p&gt;&lt;p&gt;在评估整个 Grafana 中的机器对机器交互时，我们发现支持 API 密钥和服务帐户会增加安全范围并带来额外的运营成本。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;因此，我们将弃用 API 密钥，以便将精力集中在支持 Grafana 中的服务帐户上。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;展望未来，机器对机器的身份验证将通过服务帐户令牌 (SAT) 进行，与传统 API 密钥相比，该令牌可提供增强的安全性并提供对身份验证和数据访问更精细的控制。&lt;/p&gt;&lt;h2 id="how-to-migrate-from-api-keys-to-service-accounts"&gt;如何从 API 密钥迁移到服务帐户&lt;/h2&gt;&lt;p&gt;我们一直致力于确保开发人员能够尽可能顺利地从 API 密钥过渡到服务帐户。&lt;/p&gt;&lt;p&gt;有两种不同的用例需要考虑：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;所有&lt;strong&gt;现有的 API 密钥&lt;/strong&gt;将继续无缝运行，我们将于 2025 年 1 月将它们迁移到 SAT；使用 API 密钥进行身份验证的 API 使用者无需执行任何操作。&lt;/li&gt;&lt;li&gt;在 Grafana 中&lt;strong&gt;提供 API 密钥的&lt;/strong&gt;脚本或工具（例如 Terraform）将需要迁移其自动化以使用服务帐户令牌。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;从 Grafana 9.1 开始，有一个从 API 密钥到 SAT 的&lt;a href="https://grafana.com/docs/grafana/latest/administration/api-keys/#migrate-api-keys-to-grafana-service-accounts"&gt;详细迁移路径&lt;/a&gt;，我们鼓励开发人员在 2024 年 12 月 31 日之前完成此过渡，以避免工作流程中断。&lt;/p&gt;&lt;p&gt;以下是 Grafana 中弃用 API 密钥的详细时间表：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;到 2024 年 8 月 31 日：&lt;/strong&gt;将无法再创建新的 API 密钥。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;到 2024 年 11 月 30 日：&lt;/strong&gt;依赖&lt;strong&gt;通过自动化配置的 API 密钥&lt;/strong&gt;的开发人员应使用 Grafana 9.1 中提供的指南迁移到 SAT。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;到 2025 年 1 月 31 日：&lt;/strong&gt;我们将自动将所有剩余的 API 密钥迁移到 SAT 并删除 API 密钥端点。&lt;strong&gt;任何依赖 API 密钥配置的自动化都将停止工作。&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt; Terraform 资源&lt;code&gt;api_key&lt;/code&gt;已在 Grafana Terraform 提供程序的&lt;a href="https://github.com/grafana/terraform-provider-grafana/releases/tag/v3.0.0" rel="noopener noreferrer" target="_blank"&gt;v3.0.0&lt;/a&gt;中删除。在迁移过程中，如果您需要更多时间，我们建议您将 Terraform 版本固定为 &amp;lt;v2.19.0。&lt;/p&gt;&lt;p&gt;以下是 Grafana Terraform 资源的迁移指南：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;到版本 3.0：&lt;/strong&gt;我们将从 Grafana Terraform 提供程序中删除&lt;code&gt;api_key&lt;/code&gt;资源。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;固定到版本 2.19：&lt;/strong&gt;这遵循上述 Grafana 中弃用 API 密钥的详细时间表。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="learn-more-about-service-accounts-in-grafana"&gt;详细了解 Grafana 中的服务帐户&lt;/h2&gt;&lt;p&gt;服务帐户和 SAT 增强了 Grafana 中的安全性并使访问控制更加灵活。这是因为服务帐户（与 API 密钥不同）支持精细的、基于角色的访问控制。要了解更多信息并了解如何设置服务帐户，请查看我们的&lt;a href="https://grafana.com/docs/grafana/latest/administration/service-accounts/"&gt;服务帐户文档&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;通过 Grafana 11（我们在 GrafanaCON 2024 上发布的开源可视化工具的最新主要版本），我们还推出了在组织内&lt;a href="https://grafana.com/blog/2024/04/09/grafana-11-release-all-the-new-features/#easier-to-manage-at-scale"&gt;安全扩展&lt;/a&gt;Grafana 的新方法。如需了解所有最新功能的完整演示，请查看“ &lt;a href="https://grafana.com/about/events/grafanacon/2024/grafana-11-deep-dive/"&gt;Grafana 11 深入探讨&lt;/a&gt;”GrafanaCON 会议，该会议现已按需提供。&lt;/p&gt;&lt;p&gt;&lt;br /&gt; &lt;em&gt;&lt;a href="https://grafana.com/products/cloud/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Cloud&lt;/a&gt;是开始使用指标、日志、跟踪、仪表板等的最简单方法。我们为每个用例提供慷慨的永久免费套餐和计划。&lt;a href="https://grafana.com/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt"&gt;现在免费注册&lt;/a&gt;！&lt;/em&gt;&lt;/p&gt;</description><pubDate>Wed, 12 Jun 2024 00:00:00 GMT</pubDate><guid isPermaLink="true">https://grafana.com/blog/2024/06/12/grafana-update-service-account-tokens-are-replacing-api-keys/</guid></item><item><title>【Mobile app observability with OpenTelemetry, Embrace, and Grafana Cloud】</title><link>https://grafana.com/blog/2024/06/11/mobile-app-observability-with-opentelemetry-embrace-and-grafana-cloud/</link><description>&lt;p&gt;我们很高兴地宣布扩大与&lt;a href="http://embrace.io" rel="noopener noreferrer" target="_blank"&gt;Embrace 的&lt;/a&gt;&lt;a href="https://www.prnewswire.com/news-releases/embrace-and-grafana-labs-sign-go-to-market-agreement-to-bring-modern-observability-based-on-opentelemetry-to-mobile-apps-302168125.html" rel="noopener noreferrer" target="_blank"&gt;合作关系&lt;/a&gt;，利用 OpenTelemetry 等开放标准为我们的用户带来移动可观测性。&lt;/p&gt;&lt;p&gt;我们去年首次与 Embrace 合作，当时他们&lt;a href="https://grafana.com/blog/2023/02/13/visualize-real-time-mobile-app-data-with-the-embrace-data-source-plugin-for-grafana/"&gt;为 Grafana 创建了一个插件&lt;/a&gt;，为移动团队提供了一种直接在 Grafana 仪表板中可视化和分析实时移动指标的简单方法。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/embrace-plugin/embrace-metrics-api-dashboard-in-grafana-update.png?w=1504"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img alt="具有 Embrace 移动应用指标的 Grafana 仪表板。" class="lazyload " /&gt;&lt;noscript&gt;&lt;img alt="具有 Embrace 移动应用指标的 Grafana 仪表板。" src="https://grafana.com/media/blog/embrace-plugin/embrace-metrics-api-dashboard-in-grafana-update.png?w=1504" /&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;最近，Embrace 推出了 Grafana Cloud 的新集成，允许 Grafana 用户将来自 Embrace 的前端移动遥测数据连接到 Grafana Cloud 中的基础设施和应用程序性能数据。结果？端到端可观察性从用户的设备延伸到组织复杂的云基础设施，使 SRE 和 DevOps 团队能够全面了解移动应用程序中的技术故障如何影响最终用户、底层用户体验、业务成果等。&lt;/p&gt;&lt;blockquote&gt;&lt;h2 id="what-is-embrace"&gt;什么是拥抱？&lt;/h2&gt;&lt;p&gt; &lt;a href="https://embrace.io" rel="noopener noreferrer" target="_blank"&gt;Embrace&lt;/a&gt;提供基于 OpenTelemetry 的以用户为中心的移动应用可观测性解决方案。通过跨 DevOps 和移动工程团队提供移动遥测，Embrace 阐明了移动应用程序级别的客户影响。&lt;/p&gt;&lt;p&gt; Embrace 的&lt;a href="https://github.com/embrace-io" rel="noopener noreferrer" target="_blank"&gt;OpenTelemetry SDK&lt;/a&gt;为团队提供了现代可观测性仪器所需的透明度、可移植性和可扩展性，而 Embrace 的数据后端和分析平台则受到企业支持，可提供强大的移动性能洞察。通过将前端移动遥测与后端性能数据联系起来，Embrace 帮助公司实现可观察性实践的现代化，并提供尽可能最佳的用户体验。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="why-use-embrace-and-grafana-cloud"&gt;为什么使用 Embrace 和 Grafana Cloud？&lt;/h2&gt;&lt;p&gt; Grafana Cloud 的最新 Embrace 集成允许您使用 OpenTelemetry 协议通过 HTTP 将移动应用程序的指标和跟踪（以及很快的日志）从 Embrace 直接推送到 Grafana Cloud。然后，您将能够在 Grafana Cloud 中可视化上下文丰富的移动数据以及其他可观察性数据，从而让您在一个地方更全面地了解用户体验。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/embrace-partnership/embrace-grafana-cloud-architecture-diagram.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/embrace-partnership/embrace-grafana-cloud-architecture-diagram.png"data-srcset="/media/blog/embrace-partnership/embrace-grafana-cloud-architecture-diagram.png?w=320 320w, /media/blog/embrace-partnership/embrace-grafana-cloud-architecture-diagram.png?w=550 550w, /media/blog/embrace-partnership/embrace-grafana-cloud-architecture-diagram.png?w=750 750w, /media/blog/embrace-partnership/embrace-grafana-cloud-architecture-diagram.png?w=900 900w, /media/blog/embrace-partnership/embrace-grafana-cloud-architecture-diagram.png?w=1040 1040w, /media/blog/embrace-partnership/embrace-grafana-cloud-architecture-diagram.png?w=1240 1240w, /media/blog/embrace-partnership/embrace-grafana-cloud-architecture-diagram.png?w=1920 1920w"
data-sizes="auto"alt="带有 Grafana Cloud 指标和跟踪徽标的架构图"
width="1688"
height="932"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/embrace-partnership/embrace-grafana-cloud-architecture-diagram.png"
alt="带有 Grafana Cloud 指标和跟踪徽标的架构图"
width="1688"
height="932"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;然后，团队可以将移动可观测性数据与基础设施和应用程序性能可观测性以及来自我们庞大的 Grafana 生态系统（有超过 100 个数据源并且还在不断增加）中的任何数据源的遥测数据关联起来，以更好地了解性能问题如何影响 SLO 和用户体验。您的团队还能够在如何实时识别和解决移动应用程序性能问题方面从被动实践转变为更加主动的实践。&lt;/p&gt;&lt;h2 id="how-to-connect-embrace-to-grafana"&gt;如何将 Embrace 连接到 Grafana&lt;/h2&gt;&lt;p&gt; SRE 和 DevOps 用户可以通过三种方式通过 Grafana 开源和 Grafana Cloud 在日常工作流程中利用 Embrace 数据：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;使用 PromQL 直接在&lt;a href="/grafana/plugins/embraceio-metric-app/"&gt;Grafana OSS&lt;/a&gt;中查询移动指标（默认或自定义）&lt;/li&gt;&lt;li&gt;自动&lt;a href="https://embrace.io/docs/data-destinations/grafana-cloud-setup/" target="_blank" rel="noopener noreferrer"&gt;将移动指标&lt;/a&gt;（默认或&lt;a href="https://embrace.io/docs/custom-metrics-api/custom-metrics-grafana/" target="_blank" rel="noopener noreferrer"&gt;自定义&lt;/a&gt;）直接转发到 Grafana Cloud Metrics 进行分析和警报&lt;/li&gt;&lt;li&gt;自动将移动&lt;a href="https://embrace.io/docs/product/network-spans-forwarding/" target="_blank" rel="noopener noreferrer"&gt;网络呼叫数据&lt;/a&gt;（作为跨度）直接转发到 Grafana Cloud Traces 进行分析和警报&lt;/li&gt;&lt;/ol&gt;&lt;h2 id="learn-more-about-embrace-and-grafana-cloud"&gt;了解有关 Embrace 和 Grafana Cloud 的更多信息&lt;/h2&gt;&lt;p&gt;我们一直在寻找与组织合作的方式，以帮助增强 Grafana 体验并支持我们不断发展的社区。我们很高兴看到我们的共享用户如何利用&lt;a href="https://embrace.io/partners/grafana-labs/" target="_blank" rel="noopener noreferrer"&gt;Embrace 和 Grafana Cloud&lt;/a&gt;之间的深度集成来提高他们的移动可观察性。&lt;/p&gt;&lt;p&gt;要了解有关 Grafana Cloud 的 Embrace 集成的更多信息，请查看&lt;a href="https://embrace.io/docs/data-destinations/grafana-cloud-setup/" target="_blank" rel="noopener noreferrer"&gt;Embrace 文档&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;有疑问或反馈吗？我们很乐意通过&lt;a href="mailto:integrations@grafana.com"&gt;Integrations@grafana.com&lt;/a&gt;收到您的来信。&lt;/p&gt;&lt;p&gt; &lt;em&gt;&lt;a href="/products/cloud/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Cloud&lt;/a&gt;是开始使用指标、日志、跟踪、仪表板等的最简单方法。我们为每个用例提供慷慨的永久免费套餐和计划。&lt;a href="/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt"&gt;现在免费注册&lt;/a&gt;！&lt;/em&gt;&lt;/p&gt;</description><pubDate>Tue, 11 Jun 2024 00:00:00 GMT</pubDate><guid isPermaLink="true">https://grafana.com/blog/2024/06/11/mobile-app-observability-with-opentelemetry-embrace-and-grafana-cloud/</guid></item><item><title>【A guide to Grafana OnCall SMS and call routing】</title><link>https://grafana.com/blog/2024/06/10/a-guide-to-grafana-oncall-sms-and-call-routing/</link><description>&lt;p&gt;许多组织使用事件响应设置，使他们能够通过呼叫电话号码或向电话号码发送消息来寻呼待命人员。在本指南中，您将学习如何使用&lt;a href="https://grafana.com/products/cloud/oncall/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana OnCall&lt;/a&gt;配置此类系统。&lt;/p&gt;&lt;p&gt;出于实际目的，我们将其与 Twilio 配对，但相同的基本工作流程应该适用于其他平台。我们将从基本设置开始，使用 Twilio 中的电话号码呼叫 Grafana OnCall 中的 Webhook 集成并向其发送 SMS 消息。然后，我们将添加一条路由和一条升级链，以演示如何将不同的警报从短信和语音呼叫发送到不同的升级链。让我们深入了解一下。&lt;/p&gt;&lt;h2 id="prerequisites"&gt;先决条件&lt;/h2&gt;&lt;p&gt;为了在您自己的系统中实施本指南中概述的步骤，您需要访问以下内容：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;格拉法纳云。&lt;/strong&gt;如果您还没有帐户，您可以立即注册一个&lt;a href="https://grafana.com/auth/sign-up/create-user?pg=blog&amp;amp;plcmt=body-txt"&gt;永久免费帐户&lt;/a&gt;。&lt;/li&gt;&lt;li&gt; &lt;strong&gt;Grafana OnCall&lt;/strong&gt; ，我们的待命管理系统。要了解更多信息，请查看我们的&lt;a href="https://grafana.com/docs/oncall/latest/set-up/get-started/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana OnCall 入门&lt;/a&gt;文档&lt;/li&gt;&lt;li&gt;您还需要是具有管理员权限和配置通知设置的 Grafana OnCall 用户。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;特威利奥&lt;/strong&gt;。您可以&lt;a href="https://www.twilio.com/try-twilio" rel="noopener noreferrer" target="_blank"&gt;在这里&lt;/a&gt;注册一个帐户。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="basic-setup"&gt;基本设置&lt;/h2&gt;&lt;p&gt;首先，我们将在 Twilio 中配置一个电话号码，并在 Grafana OnCall 中进行集成，这将使我们能够接收来自 SMS 消息或拨打/发送到某个电话号码的电话的警报。我们将随时扩展此设置。&lt;/p&gt;&lt;h3 id="grafana-oncall-setup"&gt; Grafana OnCall 设置&lt;/h3&gt;&lt;p&gt;同样，请确保设置了具有管理员权限的 Grafana OnCall 用户帐户，并配置了一些通知设置，以便用户在此过程中测试功能。如果您需要先进行这些设置，请参阅&lt;a href="https://grafana.com/docs/oncall/latest/"&gt;Grafana OnCall 文档&lt;/a&gt;。&lt;/p&gt;&lt;h4 id="set-up-your-integration"&gt;设置您的集成&lt;/h4&gt;&lt;p&gt;Grafana OnCall 中的集成是一个接收警报并将其连接到路由和升级链的端点。在这里，我们将使用可以接受任何负载的通用 Webhook 集成。然后，我们可以自定义在 Grafana OnCall 中处理此负载的方式。首先让我们创建集成：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;在 Grafana 中，导航到&lt;strong&gt;Alerts &amp;amp; IRM&lt;/strong&gt; -&amp;gt; &lt;strong&gt;OnCall&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Integrations&lt;/strong&gt; 。&lt;/li&gt;&lt;li&gt;按&lt;strong&gt;+ 新集成&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;选择“Webhook（通用）”作为集成类型。&lt;/li&gt;&lt;li&gt;为集成指定名称和描述，并将其分配给团队（可选）。&lt;/li&gt;&lt;li&gt;您现在将在屏幕上进行集成。记下 URL。这是我们将用来从 Twilio 向此集成发送警报的地址。&lt;/li&gt;&lt;/ol&gt;&lt;h4 id="set-up-the-escalation-chain"&gt;设置升级链&lt;/h4&gt;&lt;p&gt;升级链允许我们创建一系列步骤来在收到警报后处理通知和其他操作。在这种情况下，我们将创建最简单的升级链进行测试，包括直接通知您的用户。稍后可以对其进行自定义以与计划或其他操作交互。让我们创建升级链：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;在 Grafana 中，导航到&lt;strong&gt;Alerts &amp;amp; IRM&lt;/strong&gt; -&amp;gt; &lt;strong&gt;OnCall&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Escalation Chain&lt;/strong&gt; 。&lt;/li&gt;&lt;li&gt;按&lt;strong&gt;+ 新升级链&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;为升级链命名并按“&lt;strong&gt;创建升级链”&lt;/strong&gt; 。&lt;/li&gt;&lt;li&gt;对于升级的第一步，选择“通知用户”并选择您的用户作为收件人。&lt;/li&gt;&lt;li&gt;稍后，您可以自定义&lt;a href="https://grafana.com/docs/oncall/latest/configure/escalation-chains-and-routes/"&gt;升级链&lt;/a&gt;以满足您的需求。&lt;/li&gt;&lt;/ol&gt;&lt;h4 id="connect-escalation-chain-and-test"&gt;连接升级链并测试&lt;/h4&gt;&lt;p&gt;在 Twilio 中进行设置之前，让我们将升级链连接到集成，然后测试设置是否正常工作。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;导航回我们之前创建的 Webhook 集成。&lt;/li&gt;&lt;li&gt;在“集成”列表中，单击您之前创建的集成名称以转到集成详细信息。&lt;/li&gt;&lt;li&gt;在“路由”部分中，展开“默认”路由部分。&lt;/li&gt;&lt;li&gt;在默认路由的第三步，使用下拉列表选择您创建的升级链。&lt;/li&gt;&lt;li&gt;按屏幕右上角的&lt;strong&gt;发送演示&lt;/strong&gt;警报按钮。&lt;/li&gt;&lt;li&gt;您应该通过为用户配置的方法收到通知。&lt;/li&gt;&lt;li&gt;解决您的演示警报。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;现在让我们切换到 Twilio 来设置集成的另一端。&lt;/p&gt;&lt;h3 id="twilio-setup"&gt; Twilio 设置&lt;/h3&gt;&lt;p&gt;我们将设置一个电话号码和一些&lt;a href="https://www.twilio.com/docs/studio" rel="noopener noreferrer" target="_blank"&gt;Studio&lt;/a&gt;流程，Twilio 在收到电话或短信时将触发这些流程。这些 Studio 流将用于将信息作为警报发送到 Grafana OnCall。&lt;/p&gt;&lt;h4 id="set-up-studio-flow"&gt;设置 Studio 流程&lt;/h4&gt;&lt;p&gt;我们将设置一个 Studio 流程来处理 SMS 消息和处理电话。每个的目标都是捕获警报信息并将其以我们可以使用的格式发送到 Grafana OnCall。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;在“开发”选项卡上，导航到&lt;strong&gt;Studio&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Flows&lt;/strong&gt; 。 （如果您没有看到“Studio”，请选择&lt;strong&gt;“浏览产品&lt;/strong&gt;”，然后在“开发人员工具”部分下选择&lt;strong&gt;Studio&lt;/strong&gt; 。另外，将其固定以便稍后访问。）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在 Studio -&amp;gt; Flows 页面上，选择&lt;strong&gt;Create new Flow&lt;/strong&gt; 。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;输入流名称并按&lt;strong&gt;下一步&lt;/strong&gt;。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;选择“从 JSON 导入”并按&lt;strong&gt;下一步&lt;/strong&gt;。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;将以下 JSON 粘贴到对话框中，并将第 54 行和第 156 行的&lt;code&gt;&amp;lt;YOUR_INTEGRATION_URL&amp;gt;&lt;/code&gt;替换为我们之前在 Grafana OnCall 中创建的 Webhook 集成的 URL。然后按&lt;strong&gt;下一步&lt;/strong&gt;。&lt;/p&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;json&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button&gt;&lt;img alt="将代码复制到剪贴板" class="code-clipboard__icon" height="13" src="https://grafana.com/media/images/icons/icon-copy-small-2.svg" width="14" /&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre&gt; &lt;code class="language-json"&gt;{ &amp;quot;description&amp;quot;: &amp;quot;Basic SMS and Call escalation&amp;quot;, &amp;quot;states&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;Trigger&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;trigger&amp;quot;, &amp;quot;transitions&amp;quot;: [ { &amp;quot;next&amp;quot;: &amp;quot;send_alert_from_sms&amp;quot;, &amp;quot;event&amp;quot;: &amp;quot;incomingMessage&amp;quot; }, { &amp;quot;next&amp;quot;: &amp;quot;describe_alert_from_call&amp;quot;, &amp;quot;event&amp;quot;: &amp;quot;incomingCall&amp;quot; }, { &amp;quot;event&amp;quot;: &amp;quot;incomingConversationMessage&amp;quot; }, { &amp;quot;event&amp;quot;: &amp;quot;incomingRequest&amp;quot; }, { &amp;quot;event&amp;quot;: &amp;quot;incomingParent&amp;quot; } ], &amp;quot;properties&amp;quot;: { &amp;quot;offset&amp;quot;: { &amp;quot;x&amp;quot;: 0, &amp;quot;y&amp;quot;: 0 } } }, { &amp;quot;name&amp;quot;: &amp;quot;send_alert_from_sms&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;make-http-request&amp;quot;, &amp;quot;transitions&amp;quot;: [ { &amp;quot;next&amp;quot;: &amp;quot;send_alert_from_sms_success&amp;quot;, &amp;quot;event&amp;quot;: &amp;quot;success&amp;quot; }, { &amp;quot;next&amp;quot;: &amp;quot;send_alert_from_sms_fail&amp;quot;, &amp;quot;event&amp;quot;: &amp;quot;failed&amp;quot; } ], &amp;quot;properties&amp;quot;: { &amp;quot;offset&amp;quot;: { &amp;quot;x&amp;quot;: -180, &amp;quot;y&amp;quot;: 250 }, &amp;quot;method&amp;quot;: &amp;quot;POST&amp;quot;, &amp;quot;content_type&amp;quot;: &amp;quot;application/json;charset=utf-8&amp;quot;, &amp;quot;body&amp;quot;: &amp;quot;{\&amp;quot;from\&amp;quot;:\&amp;quot;{{trigger.message.From}}\&amp;quot;,\&amp;quot;message\&amp;quot;:\&amp;quot;{{trigger.message.Body}}\&amp;quot;}&amp;quot;, &amp;quot;url&amp;quot;: &amp;quot;&amp;lt;YOUR_INTEGRATION_URL&amp;gt;&amp;quot; } }, { &amp;quot;name&amp;quot;: &amp;quot;send_alert_from_sms_success&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;send-message&amp;quot;, &amp;quot;transitions&amp;quot;: [ { &amp;quot;event&amp;quot;: &amp;quot;sent&amp;quot; }, { &amp;quot;event&amp;quot;: &amp;quot;failed&amp;quot; } ], &amp;quot;properties&amp;quot;: { &amp;quot;offset&amp;quot;: { &amp;quot;x&amp;quot;: -410, &amp;quot;y&amp;quot;: 590 }, &amp;quot;service&amp;quot;: &amp;quot;{{trigger.message.InstanceSid}}&amp;quot;, &amp;quot;channel&amp;quot;: &amp;quot;{{trigger.message.ChannelSid}}&amp;quot;, &amp;quot;from&amp;quot;: &amp;quot;{{flow.channel.address}}&amp;quot;, &amp;quot;message_type&amp;quot;: &amp;quot;custom&amp;quot;, &amp;quot;to&amp;quot;: &amp;quot;{{contact.channel.address}}&amp;quot;, &amp;quot;body&amp;quot;: &amp;quot;Alert sent successfully&amp;quot; } }, { &amp;quot;name&amp;quot;: &amp;quot;send_alert_from_sms_fail&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;send-message&amp;quot;, &amp;quot;transitions&amp;quot;: [ { &amp;quot;event&amp;quot;: &amp;quot;sent&amp;quot; }, { &amp;quot;event&amp;quot;: &amp;quot;failed&amp;quot; } ], &amp;quot;properties&amp;quot;: { &amp;quot;offset&amp;quot;: { &amp;quot;x&amp;quot;: -60, &amp;quot;y&amp;quot;: 590 }, &amp;quot;service&amp;quot;: &amp;quot;{{trigger.message.InstanceSid}}&amp;quot;, &amp;quot;channel&amp;quot;: &amp;quot;{{trigger.message.ChannelSid}}&amp;quot;, &amp;quot;from&amp;quot;: &amp;quot;{{flow.channel.address}}&amp;quot;, &amp;quot;message_type&amp;quot;: &amp;quot;custom&amp;quot;, &amp;quot;to&amp;quot;: &amp;quot;{{contact.channel.address}}&amp;quot;, &amp;quot;body&amp;quot;: &amp;quot;Failed to send alert: Status({{widgets.send_escalation.status_code}})&amp;quot; } }, { &amp;quot;name&amp;quot;: &amp;quot;describe_alert_from_call&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;gather-input-on-call&amp;quot;, &amp;quot;transitions&amp;quot;: [ { &amp;quot;event&amp;quot;: &amp;quot;keypress&amp;quot; }, { &amp;quot;next&amp;quot;: &amp;quot;send_alert_from_call&amp;quot;, &amp;quot;event&amp;quot;: &amp;quot;speech&amp;quot; }, { &amp;quot;event&amp;quot;: &amp;quot;timeout&amp;quot; } ], &amp;quot;properties&amp;quot;: { &amp;quot;speech_timeout&amp;quot;: &amp;quot;auto&amp;quot;, &amp;quot;offset&amp;quot;: { &amp;quot;x&amp;quot;: 350, &amp;quot;y&amp;quot;: 240 }, &amp;quot;loop&amp;quot;: 1, &amp;quot;finish_on_key&amp;quot;: &amp;quot;#&amp;quot;, &amp;quot;say&amp;quot;: &amp;quot;Describe the alert to send. Press pound when finished.&amp;quot;, &amp;quot;stop_gather&amp;quot;: true, &amp;quot;gather_language&amp;quot;: &amp;quot;en&amp;quot;, &amp;quot;profanity_filter&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;timeout&amp;quot;: 60 } }, { &amp;quot;name&amp;quot;: &amp;quot;send_alert_from_call&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;make-http-request&amp;quot;, &amp;quot;transitions&amp;quot;: [ { &amp;quot;next&amp;quot;: &amp;quot;send_alert_from_call_success&amp;quot;, &amp;quot;event&amp;quot;: &amp;quot;success&amp;quot; }, { &amp;quot;next&amp;quot;: &amp;quot;send_alert_from_call_fail&amp;quot;, &amp;quot;event&amp;quot;: &amp;quot;failed&amp;quot; } ], &amp;quot;properties&amp;quot;: { &amp;quot;offset&amp;quot;: { &amp;quot;x&amp;quot;: 360, &amp;quot;y&amp;quot;: 590 }, &amp;quot;method&amp;quot;: &amp;quot;POST&amp;quot;, &amp;quot;content_type&amp;quot;: &amp;quot;application/json;charset=utf-8&amp;quot;, &amp;quot;body&amp;quot;: &amp;quot;{\&amp;quot;from\&amp;quot;:\&amp;quot;{{trigger.call.From}}\&amp;quot;, \&amp;quot;message\&amp;quot;:\&amp;quot;{{widgets.describe_alert_from_call.SpeechResult}} \&amp;quot;}&amp;quot;, &amp;quot;url&amp;quot;: &amp;quot;&amp;lt;YOUR_INTEGRATION_URL&amp;gt;&amp;quot; } }, { &amp;quot;name&amp;quot;: &amp;quot;send_alert_from_call_success&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;say-play&amp;quot;, &amp;quot;transitions&amp;quot;: [ { &amp;quot;event&amp;quot;: &amp;quot;audioComplete&amp;quot; } ], &amp;quot;properties&amp;quot;: { &amp;quot;offset&amp;quot;: { &amp;quot;x&amp;quot;: 90, &amp;quot;y&amp;quot;: 900 }, &amp;quot;loop&amp;quot;: 1, &amp;quot;say&amp;quot;: &amp;quot;Alert sent successfully&amp;quot; } }, { &amp;quot;name&amp;quot;: &amp;quot;send_alert_from_call_fail&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;say-play&amp;quot;, &amp;quot;transitions&amp;quot;: [ { &amp;quot;event&amp;quot;: &amp;quot;audioComplete&amp;quot; } ], &amp;quot;properties&amp;quot;: { &amp;quot;offset&amp;quot;: { &amp;quot;x&amp;quot;: 520, &amp;quot;y&amp;quot;: 900 }, &amp;quot;loop&amp;quot;: 1, &amp;quot;say&amp;quot;: &amp;quot;Failed to send alert: Status ({{widgets.send_alert_from_call.status_code}})&amp;quot; } } ], &amp;quot;initial_state&amp;quot;: &amp;quot;Trigger&amp;quot;, &amp;quot;flags&amp;quot;: { &amp;quot;allow_concurrent_calls&amp;quot;: true } }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;导入后你应该看到类似这样的内容：&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/oncall-sms-call-routing/studio-flow.png"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/oncall-sms-call-routing/studio-flow.png"data-srcset="/media/blog/oncall-sms-call-routing/studio-flow.png?w=320 320w, /media/blog/oncall-sms-call-routing/studio-flow.png?w=550 550w, /media/blog/oncall-sms-call-routing/studio-flow.png?w=750 750w, /media/blog/oncall-sms-call-routing/studio-flow.png?w=900 900w, /media/blog/oncall-sms-call-routing/studio-flow.png?w=1040 1040w, /media/blog/oncall-sms-call-routing/studio-flow.png?w=1240 1240w, /media/blog/oncall-sms-call-routing/studio-flow.png?w=1920 1920w"
data-sizes="auto"alt="工作室流程工作流程"
width="1257"
height="1056"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/oncall-sms-call-routing/studio-flow.png"
alt="工作室流程工作流程"
width="1257"
height="1056"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;该流程有两条路径。第一条路径接受 SMS 消息并将其内容转发到我们创建的 Webhook 集成上的 Grafana OnCall。消息的内容将作为消息字段以及发送消息的电话号码一起传递。当向 Grafana OnCall 发出请求时，无论成功还是失败，都会传达回发送者。&lt;/p&gt;&lt;p&gt;语音呼叫路径类似 - 呼叫者描述警报，它将转换为文本并发送到 Grafana OnCall 中的集成。&lt;/p&gt;&lt;ol start="7"&gt;&lt;li&gt;现在按&lt;strong&gt;“发布”&lt;/strong&gt;以使流程可连接到电话号码。&lt;/li&gt;&lt;/ol&gt;&lt;h4 id="buying-a-phone-number"&gt;购买电话号码&lt;/h4&gt;&lt;p&gt;在 Twilio 的控制台中，我们需要设置一个电话号码，用于接收呼叫和消息，并将其转发到 Grafana OnCall。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;在“开发”选项卡上导航至&lt;strong&gt;# Phone Numbers&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Manage&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Buy a number&lt;/strong&gt; 。 （如果您没有看到“#电话号码”，请选择&lt;strong&gt;“浏览产品&lt;/strong&gt;”，然后选择“超级网络”部分下的&lt;strong&gt;电话号码&lt;/strong&gt;；另外，将其固定以便稍后访问。）&lt;/li&gt;&lt;li&gt;在“购买号码”屏幕上，搜索包含所需国家/地区代码的电话号码，选择一个并选择&lt;strong&gt;“购买”&lt;/strong&gt; 。&lt;/li&gt;&lt;li&gt;根据国家或地区的不同，您可能需要填写一些附加信息（地址、联系人等）。&lt;/li&gt;&lt;li&gt;购买后，该号码将在“活跃号码”中显示。&lt;/li&gt;&lt;/ol&gt;&lt;h4 id="configuring-a-phone-number"&gt;配置电话号码&lt;/h4&gt;&lt;p&gt;在这里，我们将把我们的电话号码与我们创建的流程连接起来。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;在“开发”选项卡上，导航至&lt;strong&gt;# Phone Numbers&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Manage&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Active Numbers&lt;/strong&gt; 。&lt;/li&gt;&lt;li&gt;从列表中选择购买的电话号码。&lt;/li&gt;&lt;li&gt;在“语音配置”部分中，使用“来电”下拉列表并选择“Studio Flow”。将流程设置为我们创建的流程。&lt;/li&gt;&lt;li&gt;在“消息配置”部分中，使用“收到消息”下拉列表并选择“Studio Flow”。将流程设置为我们创建的流程。&lt;/li&gt;&lt;li&gt;按&lt;strong&gt;保存配置&lt;/strong&gt;。&lt;/li&gt;&lt;/ol&gt;&lt;h3 id="testing-and-troubleshooting"&gt;测试和故障排除&lt;/h3&gt;&lt;p&gt;首先，我们将通过短信发送警报来测试我们的设置。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;使用您的手机向我们在 Twilio 中购买的电话号码发送短信。&lt;/li&gt;&lt;li&gt;您应该收到“警报发送成功”的响应消息。&lt;/li&gt;&lt;li&gt;此后不久，您应该通过为用户配置的任何方法收到来自 Grafana OnCall 的通知。&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;如果您没有收到“警报发送成功”消息，您应该会收到一条带有状态代码的消息。检查并确保您在流程中配置了正确的 URL。&lt;/li&gt;&lt;li&gt;检查电话号码的“收到消息”配置是否正确。&lt;/li&gt;&lt;li&gt;在流程右侧&lt;strong&gt;菜单&lt;/strong&gt;的&lt;strong&gt;Studio&lt;/strong&gt; -&amp;gt; 流程中，您可以查看“用于故障排除的执行日志”。&lt;/li&gt;&lt;li&gt;如果您尚未在 Grafana OnCall 中收到通知，请检查警报组以查看是否已创建警报组。从警报组中，您可以查看升级日志以了解发生了什么。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;接下来，测试通过呼叫发送警报。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;使用您的手机拨打我们在 Twilio 中购买的号码&lt;/li&gt;&lt;li&gt;您应该听到描述您的警报的说明，然后按&lt;strong&gt;#&lt;/strong&gt; 。&lt;/li&gt;&lt;li&gt;接下来您应该听到一条消息，表明警报已成功发送。&lt;/li&gt;&lt;li&gt;此后不久，您应该通过为用户配置的任何方法收到来自 Grafana OnCall 的通知&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;要进行故障排除，请遵循上一节中概述的相同步骤。&lt;/p&gt;&lt;h4 id="basic-setup-complete"&gt;基本设置完成&lt;/h4&gt;&lt;p&gt;现在，我们有了一个基本设置，可以通过短信或语音呼叫向 Grafana OnCall 发送警报。接下来，我们可以在此基础上添加将警报路由到不同升级链的功能。&lt;/p&gt;&lt;h2 id="adding-routes"&gt;添加路线&lt;/h2&gt;&lt;p&gt;在本节中，我们将设置一个选项列表，以便我们可以选择要将警报发送到的路由，并在 Grafana OnCall 中适当地路由它。为了在 Grafana OnCall 中实现这一目标，我们将设置另一个路由和升级链，并将它们附加到集成中。然后，我们将扩展 Twilio 中的 Studio 流程，以向调用者呈现该选项。此设置可以轻松扩展以处理更多路线。&lt;/p&gt;&lt;h3 id="grafana-oncall-setup-1"&gt; Grafana OnCall 设置&lt;/h3&gt;&lt;h4 id="adding-another-escalation-chain"&gt;添加另一个升级链&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;在 Grafana 中，导航到&lt;strong&gt;Alerts &amp;amp; IRM&lt;/strong&gt; -&amp;gt; &lt;strong&gt;OnCall&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Escalation Chain&lt;/strong&gt; 。&lt;/li&gt;&lt;li&gt;按&lt;strong&gt;+ 新升级链&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;为升级链命名并按“&lt;strong&gt;创建升级链”&lt;/strong&gt; 。&lt;/li&gt;&lt;li&gt;对于升级的第一步，选择“通知用户”并选择您的用户作为收件人。您可以选择“重要”而不是“默认”，这样与之前的不同。&lt;/li&gt;&lt;li&gt;稍后您可以自定义&lt;a href="/docs/oncall/latest/configure/escalation-chains-and-routes/?pg=blog&amp;amp;plcmt=body-txt"&gt;升级链&lt;/a&gt;以满足您的需求。&lt;/li&gt;&lt;/ol&gt;&lt;h4 id="adding-a-route"&gt;添加路线&lt;/h4&gt;&lt;p&gt;路线是集成的一部分。路由是定义为 Jinja2 的顺序匹配规则。第一个评估为&lt;code&gt;true&lt;/code&gt;的规则是为传入警报负载选择的路由。我们将保留创建的现有升级链作为默认路由，并将新创建的升级链添加到新路由。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;导航回我们创建的 Webhook 集成。&lt;/li&gt;&lt;li&gt;通过单击其名称来选择集成。&lt;/li&gt;&lt;li&gt;按&lt;strong&gt;添加路线&lt;/strong&gt;按钮。&lt;/li&gt;&lt;li&gt;在路线的第一步，按&lt;strong&gt;编辑模板&lt;/strong&gt;按钮打开模板编辑器。&lt;/li&gt;&lt;li&gt;输入&lt;code&gt;{{ &amp;quot;abc&amp;quot; in payload.target.lower()}}&lt;/code&gt;作为模板，然后按“保存”。此模板意味着，如果从 Twilio 发送的警报有效负载包含目标字段且值为“abc”，则将选择此路由。稍后可以对其进行自定义，以更好地表示您希望如何路由警报的逻辑（团队、服务、区域等）。&lt;/li&gt;&lt;li&gt;在该路线的第三步，从下拉列表中选择您在上一步中创建的升级链。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;现在我们已经有了所需的东西，因此 Grafana OnCall 可以根据 Twilio 的有效负载内容向不同的升级链发送警报。&lt;/p&gt;&lt;h3 id="twilio-setup-1"&gt; Twilio 设置&lt;/h3&gt;&lt;h4 id="adding-another-studio-flow"&gt;添加另一个 Studio 流程&lt;/h4&gt;&lt;p&gt;在这里，我们需要设置一个比“基本设置”部分中的流程更复杂的 Studio 流程。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;在“开发”选项卡中，导航至&lt;strong&gt;Studio&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Flows&lt;/strong&gt; 。 （如果您没有看到 Studio，请选择&lt;strong&gt;“浏览产品”&lt;/strong&gt; ，然后在“开发人员工具”部分下选择&lt;strong&gt;Studio&lt;/strong&gt; ；另外，将其固定以便稍后访问。）&lt;/li&gt;&lt;li&gt;在&lt;strong&gt;Studio&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Flows&lt;/strong&gt;页面上，选择创建新流。&lt;/li&gt;&lt;li&gt;输入流名称并按&lt;strong&gt;下一步&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;选择“从 JSON 导入”并按&lt;strong&gt;下一步&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;将以下 JSON 粘贴到对话框中，并将第 54 行和第 156 行的&lt;code&gt;&amp;lt;YOUR_INTEGRATION_URL&amp;gt;&lt;/code&gt;替换为我们之前在 Grafana OnCall 中创建的 Webhook 集成的 URL。然后按&lt;strong&gt;下一步&lt;/strong&gt;。&lt;/li&gt;&lt;/ol&gt;&lt;div class="code-snippet "&gt;&lt;div class="lang-toolbar"&gt; &lt;span class="lang-toolbar__item"&gt;json&lt;/span&gt; &lt;span class="code-clipboard"&gt;&lt;button x-data="app_code_snippet()" x-init="init()" @click="copy()"&gt;&lt;img class="code-clipboard__icon" src="/media/images/icons/icon-copy-small-2.svg" alt="将代码复制到剪贴板" width="14" height="13"&gt;&lt;span&gt;复制&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;div class="lang-toolbar__border"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="code-snippet "&gt;&lt;pre data-expanded="false"&gt;&lt;code class="language-json"&gt;{ &amp;quot;description&amp;quot;: &amp;quot;Added Routes SMS and Call escalation&amp;quot;, &amp;quot;states&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;Trigger&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;trigger&amp;quot;, &amp;quot;transitions&amp;quot;: [ { &amp;quot;next&amp;quot;: &amp;quot;sms_select_target&amp;quot;, &amp;quot;event&amp;quot;: &amp;quot;incomingMessage&amp;quot; }, { &amp;quot;next&amp;quot;: &amp;quot;call_select_target&amp;quot;, &amp;quot;event&amp;quot;: &amp;quot;incomingCall&amp;quot; }, { &amp;quot;event&amp;quot;: &amp;quot;incomingConversationMessage&amp;quot; }, { &amp;quot;event&amp;quot;: &amp;quot;incomingRequest&amp;quot; }, { &amp;quot;event&amp;quot;: &amp;quot;incomingParent&amp;quot; } ], &amp;quot;properties&amp;quot;: { &amp;quot;offset&amp;quot;: { &amp;quot;x&amp;quot;: 80, &amp;quot;y&amp;quot;: -200 } } }, { &amp;quot;name&amp;quot;: &amp;quot;send_alert_from_sms&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;make-http-request&amp;quot;, &amp;quot;transitions&amp;quot;: [ { &amp;quot;next&amp;quot;: &amp;quot;send_alert_from_sms_success&amp;quot;, &amp;quot;event&amp;quot;: &amp;quot;success&amp;quot; }, { &amp;quot;next&amp;quot;: &amp;quot;send_alert_from_sms_fail&amp;quot;, &amp;quot;event&amp;quot;: &amp;quot;failed&amp;quot; } ], &amp;quot;properties&amp;quot;: { &amp;quot;offset&amp;quot;: { &amp;quot;x&amp;quot;: -370, &amp;quot;y&amp;quot;: 500 }, &amp;quot;method&amp;quot;: &amp;quot;POST&amp;quot;, &amp;quot;content_type&amp;quot;: &amp;quot;application/json;charset=utf-8&amp;quot;, &amp;quot;body&amp;quot;: &amp;quot;{\&amp;quot;from\&amp;quot;:\&amp;quot;{{trigger.message.From}}\&amp;quot;,\&amp;quot;message\&amp;quot;:\&amp;quot;{{trigger.message.Body}}\&amp;quot;,\&amp;quot;target\&amp;quot;:\&amp;quot;{{widgets.sms_select_target.inbound.Body}}\&amp;quot;}&amp;quot;, &amp;quot;url&amp;quot;: &amp;quot;&amp;lt;YOUR_INTEGRATION_URL&amp;gt;&amp;quot; } }, { &amp;quot;name&amp;quot;: &amp;quot;send_alert_from_sms_success&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;send-message&amp;quot;, &amp;quot;transitions&amp;quot;: [ { &amp;quot;event&amp;quot;: &amp;quot;sent&amp;quot; }, { &amp;quot;event&amp;quot;: &amp;quot;failed&amp;quot; } ], &amp;quot;properties&amp;quot;: { &amp;quot;offset&amp;quot;: { &amp;quot;x&amp;quot;: -700, &amp;quot;y&amp;quot;: 780 }, &amp;quot;service&amp;quot;: &amp;quot;{{trigger.message.InstanceSid}}&amp;quot;, &amp;quot;channel&amp;quot;: &amp;quot;{{trigger.message.ChannelSid}}&amp;quot;, &amp;quot;from&amp;quot;: &amp;quot;{{flow.channel.address}}&amp;quot;, &amp;quot;message_type&amp;quot;: &amp;quot;custom&amp;quot;, &amp;quot;to&amp;quot;: &amp;quot;{{contact.channel.address}}&amp;quot;, &amp;quot;body&amp;quot;: &amp;quot;Alert sent successfully&amp;quot; } }, { &amp;quot;name&amp;quot;: &amp;quot;send_alert_from_sms_fail&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;send-message&amp;quot;, &amp;quot;transitions&amp;quot;: [ { &amp;quot;event&amp;quot;: &amp;quot;sent&amp;quot; }, { &amp;quot;event&amp;quot;: &amp;quot;failed&amp;quot; } ], &amp;quot;properties&amp;quot;: { &amp;quot;offset&amp;quot;: { &amp;quot;x&amp;quot;: -340, &amp;quot;y&amp;quot;: 780 }, &amp;quot;service&amp;quot;: &amp;quot;{{trigger.message.InstanceSid}}&amp;quot;, &amp;quot;channel&amp;quot;: &amp;quot;{{trigger.message.ChannelSid}}&amp;quot;, &amp;quot;from&amp;quot;: &amp;quot;{{flow.channel.address}}&amp;quot;, &amp;quot;message_type&amp;quot;: &amp;quot;custom&amp;quot;, &amp;quot;to&amp;quot;: &amp;quot;{{contact.channel.address}}&amp;quot;, &amp;quot;body&amp;quot;: &amp;quot;Failed to send alert: Status({{widgets.send_escalation.status_code}})&amp;quot; } }, { &amp;quot;name&amp;quot;: &amp;quot;describe_alert_from_call&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;gather-input-on-call&amp;quot;, &amp;quot;transitions&amp;quot;: [ { &amp;quot;event&amp;quot;: &amp;quot;keypress&amp;quot; }, { &amp;quot;next&amp;quot;: &amp;quot;send_alert_from_call&amp;quot;, &amp;quot;event&amp;quot;: &amp;quot;speech&amp;quot; }, { &amp;quot;event&amp;quot;: &amp;quot;timeout&amp;quot; } ], &amp;quot;properties&amp;quot;: { &amp;quot;speech_timeout&amp;quot;: &amp;quot;auto&amp;quot;, &amp;quot;offset&amp;quot;: { &amp;quot;x&amp;quot;: 350, &amp;quot;y&amp;quot;: 310 }, &amp;quot;loop&amp;quot;: 1, &amp;quot;finish_on_key&amp;quot;: &amp;quot;#&amp;quot;, &amp;quot;say&amp;quot;: &amp;quot;Describe the alert to send. Press pound when finished.&amp;quot;, &amp;quot;stop_gather&amp;quot;: true, &amp;quot;gather_language&amp;quot;: &amp;quot;en&amp;quot;, &amp;quot;profanity_filter&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;timeout&amp;quot;: 60 } }, { &amp;quot;name&amp;quot;: &amp;quot;send_alert_from_call&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;make-http-request&amp;quot;, &amp;quot;transitions&amp;quot;: [ { &amp;quot;next&amp;quot;: &amp;quot;send_alert_from_call_success&amp;quot;, &amp;quot;event&amp;quot;: &amp;quot;success&amp;quot; }, { &amp;quot;next&amp;quot;: &amp;quot;send_alert_from_call_fail&amp;quot;, &amp;quot;event&amp;quot;: &amp;quot;failed&amp;quot; } ], &amp;quot;properties&amp;quot;: { &amp;quot;offset&amp;quot;: { &amp;quot;x&amp;quot;: 350, &amp;quot;y&amp;quot;: 580 }, &amp;quot;method&amp;quot;: &amp;quot;POST&amp;quot;, &amp;quot;content_type&amp;quot;: &amp;quot;application/json;charset=utf-8&amp;quot;, &amp;quot;body&amp;quot;: &amp;quot;{\&amp;quot;from\&amp;quot;:\&amp;quot;{{trigger.call.From}}\&amp;quot;, \&amp;quot;message\&amp;quot;:\&amp;quot;{{widgets.describe_alert_from_call.SpeechResult}} \&amp;quot;,\&amp;quot;target\&amp;quot;:\&amp;quot;{{widgets.call_set_target.target}}\&amp;quot;}&amp;quot;, &amp;quot;url&amp;quot;: &amp;quot;&amp;lt;YOUR_INTEGRATION_URL&amp;gt;&amp;quot; } }, { &amp;quot;name&amp;quot;: &amp;quot;send_alert_from_call_success&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;say-play&amp;quot;, &amp;quot;transitions&amp;quot;: [ { &amp;quot;event&amp;quot;: &amp;quot;audioComplete&amp;quot; } ], &amp;quot;properties&amp;quot;: { &amp;quot;offset&amp;quot;: { &amp;quot;x&amp;quot;: 200, &amp;quot;y&amp;quot;: 950 }, &amp;quot;loop&amp;quot;: 1, &amp;quot;say&amp;quot;: &amp;quot;Alert sent successfully&amp;quot; } }, { &amp;quot;name&amp;quot;: &amp;quot;send_alert_from_call_fail&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;say-play&amp;quot;, &amp;quot;transitions&amp;quot;: [ { &amp;quot;event&amp;quot;: &amp;quot;audioComplete&amp;quot; } ], &amp;quot;properties&amp;quot;: { &amp;quot;offset&amp;quot;: { &amp;quot;x&amp;quot;: 630, &amp;quot;y&amp;quot;: 950 }, &amp;quot;loop&amp;quot;: 1, &amp;quot;say&amp;quot;: &amp;quot;Failed to send alert: Status ({{widgets.send_alert_from_call.status_code}})&amp;quot; } }, { &amp;quot;name&amp;quot;: &amp;quot;sms_select_target&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;send-and-wait-for-reply&amp;quot;, &amp;quot;transitions&amp;quot;: [ { &amp;quot;next&amp;quot;: &amp;quot;sms_validate_target&amp;quot;, &amp;quot;event&amp;quot;: &amp;quot;incomingMessage&amp;quot; }, { &amp;quot;next&amp;quot;: &amp;quot;sms_select_target_timeout&amp;quot;, &amp;quot;event&amp;quot;: &amp;quot;timeout&amp;quot; }, { &amp;quot;event&amp;quot;: &amp;quot;deliveryFailure&amp;quot; } ], &amp;quot;properties&amp;quot;: { &amp;quot;offset&amp;quot;: { &amp;quot;x&amp;quot;: -330, &amp;quot;y&amp;quot;: -50 }, &amp;quot;service&amp;quot;: &amp;quot;{{trigger.message.InstanceSid}}&amp;quot;, &amp;quot;channel&amp;quot;: &amp;quot;{{trigger.message.ChannelSid}}&amp;quot;, &amp;quot;from&amp;quot;: &amp;quot;{{flow.channel.address}}&amp;quot;, &amp;quot;message_type&amp;quot;: &amp;quot;custom&amp;quot;, &amp;quot;body&amp;quot;: &amp;quot;Which target do you want to send the alert to?\nabc \ndefault&amp;quot;, &amp;quot;timeout&amp;quot;: &amp;quot;300&amp;quot; } }, { &amp;quot;name&amp;quot;: &amp;quot;sms_select_target_timeout&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;send-message&amp;quot;, &amp;quot;transitions&amp;quot;: [ { &amp;quot;event&amp;quot;: &amp;quot;sent&amp;quot; }, { &amp;quot;event&amp;quot;: &amp;quot;failed&amp;quot; } ], &amp;quot;properties&amp;quot;: { &amp;quot;offset&amp;quot;: { &amp;quot;x&amp;quot;: -80, &amp;quot;y&amp;quot;: 210 }, &amp;quot;service&amp;quot;: &amp;quot;{{trigger.message.InstanceSid}}&amp;quot;, &amp;quot;channel&amp;quot;: &amp;quot;{{trigger.message.ChannelSid}}&amp;quot;, &amp;quot;from&amp;quot;: &amp;quot;{{flow.channel.address}}&amp;quot;, &amp;quot;message_type&amp;quot;: &amp;quot;custom&amp;quot;, &amp;quot;to&amp;quot;: &amp;quot;{{contact.channel.address}}&amp;quot;, &amp;quot;body&amp;quot;: &amp;quot;Target select timed out, send the alert again to start over.&amp;quot; } }, { &amp;quot;name&amp;quot;: &amp;quot;sms_validate_target&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;split-based-on&amp;quot;, &amp;quot;transitions&amp;quot;: [ { &amp;quot;next&amp;quot;: &amp;quot;sms_validate_target_fail&amp;quot;, &amp;quot;event&amp;quot;: &amp;quot;noMatch&amp;quot; }, { &amp;quot;next&amp;quot;: &amp;quot;send_alert_from_sms&amp;quot;, &amp;quot;event&amp;quot;: &amp;quot;match&amp;quot;, &amp;quot;conditions&amp;quot;: [ { &amp;quot;friendly_name&amp;quot;: &amp;quot;If value equal_to abc&amp;quot;, &amp;quot;arguments&amp;quot;: [ &amp;quot;{{widgets.sms_select_target.inbound.Body}}&amp;quot; ], &amp;quot;type&amp;quot;: &amp;quot;matches_any_of&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;abc,default&amp;quot; } ] } ], &amp;quot;properties&amp;quot;: { &amp;quot;input&amp;quot;: &amp;quot;{{widgets.sms_select_target.inbound.Body}}&amp;quot;, &amp;quot;offset&amp;quot;: { &amp;quot;x&amp;quot;: -590, &amp;quot;y&amp;quot;: 210 } } }, { &amp;quot;name&amp;quot;: &amp;quot;sms_validate_target_fail&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;send-message&amp;quot;, &amp;quot;transitions&amp;quot;: [ { &amp;quot;event&amp;quot;: &amp;quot;sent&amp;quot; }, { &amp;quot;event&amp;quot;: &amp;quot;failed&amp;quot; } ], &amp;quot;properties&amp;quot;: { &amp;quot;offset&amp;quot;: { &amp;quot;x&amp;quot;: -700, &amp;quot;y&amp;quot;: 500 }, &amp;quot;service&amp;quot;: &amp;quot;{{trigger.message.InstanceSid}}&amp;quot;, &amp;quot;channel&amp;quot;: &amp;quot;{{trigger.message.ChannelSid}}&amp;quot;, &amp;quot;from&amp;quot;: &amp;quot;{{flow.channel.address}}&amp;quot;, &amp;quot;message_type&amp;quot;: &amp;quot;custom&amp;quot;, &amp;quot;to&amp;quot;: &amp;quot;{{contact.channel.address}}&amp;quot;, &amp;quot;body&amp;quot;: &amp;quot;{{widgets.sms_select_target.inbound.Body}} is not a valid target.&amp;quot; } }, { &amp;quot;name&amp;quot;: &amp;quot;call_select_target&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;gather-input-on-call&amp;quot;, &amp;quot;transitions&amp;quot;: [ { &amp;quot;next&amp;quot;: &amp;quot;call_select_validate&amp;quot;, &amp;quot;event&amp;quot;: &amp;quot;keypress&amp;quot; }, { &amp;quot;event&amp;quot;: &amp;quot;speech&amp;quot; }, { &amp;quot;event&amp;quot;: &amp;quot;timeout&amp;quot; } ], &amp;quot;properties&amp;quot;: { &amp;quot;number_of_digits&amp;quot;: 1, &amp;quot;speech_timeout&amp;quot;: &amp;quot;auto&amp;quot;, &amp;quot;offset&amp;quot;: { &amp;quot;x&amp;quot;: 350, &amp;quot;y&amp;quot;: 50 }, &amp;quot;loop&amp;quot;: 1, &amp;quot;finish_on_key&amp;quot;: &amp;quot;#&amp;quot;, &amp;quot;say&amp;quot;: &amp;quot;Which target do you want to send to? Press 1 for ABC. \nPress 2 for default.&amp;quot;, &amp;quot;stop_gather&amp;quot;: true, &amp;quot;gather_language&amp;quot;: &amp;quot;en&amp;quot;, &amp;quot;profanity_filter&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;timeout&amp;quot;: 5 } }, { &amp;quot;name&amp;quot;: &amp;quot;call_select_validate&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;split-based-on&amp;quot;, &amp;quot;transitions&amp;quot;: [ { &amp;quot;next&amp;quot;: &amp;quot;call_select_target&amp;quot;, &amp;quot;event&amp;quot;: &amp;quot;noMatch&amp;quot; }, { &amp;quot;next&amp;quot;: &amp;quot;call_set_target&amp;quot;, &amp;quot;event&amp;quot;: &amp;quot;match&amp;quot;, &amp;quot;conditions&amp;quot;: [ { &amp;quot;friendly_name&amp;quot;: &amp;quot;If value matches_any_of 1,2&amp;quot;, &amp;quot;arguments&amp;quot;: [ &amp;quot;{{widgets.call_select_target.Digits}}&amp;quot; ], &amp;quot;type&amp;quot;: &amp;quot;matches_any_of&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;1,2&amp;quot; } ] } ], &amp;quot;properties&amp;quot;: { &amp;quot;input&amp;quot;: &amp;quot;{{widgets.call_select_target.Digits}}&amp;quot;, &amp;quot;offset&amp;quot;: { &amp;quot;x&amp;quot;: 760, &amp;quot;y&amp;quot;: 50 } } }, { &amp;quot;name&amp;quot;: &amp;quot;call_set_target&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;set-variables&amp;quot;, &amp;quot;transitions&amp;quot;: [ { &amp;quot;next&amp;quot;: &amp;quot;describe_alert_from_call&amp;quot;, &amp;quot;event&amp;quot;: &amp;quot;next&amp;quot; } ], &amp;quot;properties&amp;quot;: { &amp;quot;variables&amp;quot;: [ { &amp;quot;value&amp;quot;: &amp;quot;{% if widgets.call_select_target.Digits == \&amp;quot;1\&amp;quot; %}abc{% elsif widgets.call_select_target.Digits == \&amp;quot;2\&amp;quot; %}default{% endif %}&amp;quot;, &amp;quot;key&amp;quot;: &amp;quot;target&amp;quot; } ], &amp;quot;offset&amp;quot;: { &amp;quot;x&amp;quot;: 760, &amp;quot;y&amp;quot;: 300 } } } ], &amp;quot;initial_state&amp;quot;: &amp;quot;Trigger&amp;quot;, &amp;quot;flags&amp;quot;: { &amp;quot;allow_concurrent_calls&amp;quot;: true } }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol start="6"&gt;&lt;li&gt;导入后你应该看到类似这样的内容： &lt;/li&gt;&lt;/ol&gt;&lt;figure
class="figure-wrapper figure-wrapper__lightbox w-100p "
style="max-width: 1716px;"
itemprop="associatedMedia"
itemscope=""
itemtype="http://schema.org/ImageObject"
&gt; &lt;a
class="lightbox-link"
href="/media/blog/oncall-sms-call-routing/twilio-add-route.png"
itemprop="contentUrl"
&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/oncall-sms-call-routing/twilio-add-route.png"data-srcset="/media/blog/oncall-sms-call-routing/twilio-add-route.png?w=320 320w, /media/blog/oncall-sms-call-routing/twilio-add-route.png?w=550 550w, /media/blog/oncall-sms-call-routing/twilio-add-route.png?w=750 750w, /media/blog/oncall-sms-call-routing/twilio-add-route.png?w=900 900w, /media/blog/oncall-sms-call-routing/twilio-add-route.png?w=1040 1040w, /media/blog/oncall-sms-call-routing/twilio-add-route.png?w=1240 1240w, /media/blog/oncall-sms-call-routing/twilio-add-route.png?w=1920 1920w"
data-sizes="auto"alt="路由添加工作流程"
width="1716"
height="1374"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/oncall-sms-call-routing/twilio-add-route.png"
alt="路由添加工作流程"
width="1716"
height="1374"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;在这里，我们添加了提示用户决定要将警报发送到哪个目标的步骤以及验证步骤以确保值正确。&lt;/p&gt;&lt;h4 id="reconfiguring-the-phone-number"&gt;重新配置电话号码&lt;/h4&gt;&lt;p&gt;我们现在可以更改手机配置使用的流程。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;在“开发”选项卡上，导航至&lt;strong&gt;# Phone Numbers&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Manage&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Active Numbers&lt;/strong&gt; 。&lt;/li&gt;&lt;li&gt;从列表中选择购买的电话号码。&lt;/li&gt;&lt;li&gt;在“语音配置”部分中，使用“来电”下拉列表并选择“Studio Flow”。将流程设置为我们创建的新流程。&lt;/li&gt;&lt;li&gt;在“消息配置”部分中，使用“收到消息”下拉列表并选择“Studio Flow”。将流程设置为我们创建的新流程。&lt;/li&gt;&lt;li&gt;按&lt;strong&gt;保存配置&lt;/strong&gt;，&lt;/li&gt;&lt;/ol&gt;&lt;h3 id="testing-and-troubleshooting-1"&gt;测试和故障排除&lt;/h3&gt;&lt;p&gt;测试和故障排除遵循与以前相同的过程。练习短信和语音呼叫路径以测试您是否收到来自 Grafana OnCall 的通知。&lt;/p&gt;&lt;h2 id="next-steps"&gt;下一步&lt;/h2&gt;&lt;p&gt;现在您已将所有内容连接起来，您可以进一步编辑和自定义 Grafana OnCall&lt;a href="/docs/oncall/latest/configure/escalation-chains-and-routes/?pg=blog&amp;amp;plcmt=body-txt"&gt;路线和升级链&lt;/a&gt;。通过使用&lt;a href="https://www.twilio.com/docs/studio/user-guide" target="_blank" rel="noopener noreferrer"&gt;Studio flow&lt;/a&gt;的图形编辑器，您可以更改 SMS 和语音呼叫的处理方式。使用这些工具，您可以设置 Grafana OnCall，以与您的团队结构相匹配的方式使用短信和语音通话作为警报来源向用户发送通知。&lt;/p&gt;&lt;p&gt; &lt;em&gt;&lt;a href="/products/cloud/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Cloud&lt;/a&gt;是开始使用指标、日志、跟踪、仪表板等的最简单方法。我们为每个用例提供慷慨的永久免费套餐和计划。&lt;a href="/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt"&gt;现在免费注册&lt;/a&gt;！&lt;/em&gt;&lt;/p&gt;</description><pubDate>Mon, 10 Jun 2024 00:00:00 GMT</pubDate><guid isPermaLink="true">https://grafana.com/blog/2024/06/10/a-guide-to-grafana-oncall-sms-and-call-routing/</guid></item><item><title>【Streamlining runtime diagnostics with on-demand profiling: Inside Roblox's observability stack】</title><link>https://grafana.com/blog/2024/06/07/streamlining-runtime-diagnostics-with-on-demand-profiling-inside-robloxs-observability-stack/</link><description>&lt;p&gt;每天，超过 7000 万活跃用户登录 Roblox，通过虚拟体验进行创作、玩耍和互动。无论这些体验具体是什么——领养宠物、完成障碍训练，或者在虚拟披萨店完成订单——Roblox 可观察性团队都致力于让它们变得无缝。&lt;/p&gt;&lt;p&gt; “如果您或您的孩子可以在 Roblox 上与朋友一起出去玩，并且不受任何干扰，有多少人会感到非常高兴？”最近在旧金山湾区举行的&lt;a href="https://grafana.com/events/observabilitycon-on-the-road/"&gt;ObservabilityCON on the Road&lt;/a&gt;活动上，该社交和游戏平台的可观测性负责人晓峰韩 (Xiaofeng Han) 问道。&lt;/p&gt;&lt;p&gt;当房间里的与会者举手回应时，韩点了点头。 “对，”他说。 “可靠性非常重要。”&lt;/p&gt;&lt;p&gt;在他们的演讲中，Han 和他的同事、Roblox 首席工程师兼工程经理 Jialin Jiao 探讨了他们的团队在生产调试时面临的挑战，以及他们如何构建按需分析工作流程&lt;em&gt;&lt;a href="https://grafana.com/events/observabilitycon-on-the-road/2024/san-francisco-bay-area/scaling-robloxs-runtime-diagnosis-system-with-grafana-pyroscope/?pg=blog&amp;amp;plcmt=body-txt"&gt;。&lt;/a&gt;&lt;/em&gt; &lt;a href="https://grafana.com/oss/pyroscope/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Pyrscope&lt;/a&gt;帮助他们克服了这些挑战，为 Roblox 的全球用户群提供持续、不间断的体验。&lt;/p&gt;&lt;p&gt;&lt;em&gt;注意：Roblox 在 ObservabilityCON on the Road 2024 上的会议现已可供点播观看。您可以在下面的 YouTube 上查看完整的会议内容。&lt;/em&gt;&lt;/p&gt;&lt;div class="shortcode youtube"&gt;&lt;/div&gt;&lt;h2 id="the-challenge-debugging-at-scale"&gt;挑战：大规模调试&lt;/h2&gt;&lt;p&gt;说 Roblox 很受欢迎是轻描淡写的。&lt;/p&gt;&lt;p&gt;除了 7150 万日常用户之外，Roblox 还拥有 240 万开发者，他们总共构建了 440 万种数字体验，使其成为全球最大的社交和元宇宙平台之一。&lt;/p&gt;&lt;p&gt;也许并不奇怪，支撑所有这些交互体验的是相当复杂的 IT 基础设施。&lt;/p&gt;&lt;figure class="figure-wrapper figure-wrapper__lightbox w-100p "&gt; &lt;a class="lightbox-link" href="https://grafana.com/media/blog/roblox-OCR2024/roblox-ocr2024-infrastructure-slide.jpg"&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/roblox-OCR2024/roblox-ocr2024-infrastructure-slide.jpg"data-srcset="/media/blog/roblox-OCR2024/roblox-ocr2024-infrastructure-slide.jpg?w=320 320w, /media/blog/roblox-OCR2024/roblox-ocr2024-infrastructure-slide.jpg?w=550 550w, /media/blog/roblox-OCR2024/roblox-ocr2024-infrastructure-slide.jpg?w=750 750w, /media/blog/roblox-OCR2024/roblox-ocr2024-infrastructure-slide.jpg?w=900 900w, /media/blog/roblox-OCR2024/roblox-ocr2024-infrastructure-slide.jpg?w=1040 1040w, /media/blog/roblox-OCR2024/roblox-ocr2024-infrastructure-slide.jpg?w=1240 1240w, /media/blog/roblox-OCR2024/roblox-ocr2024-infrastructure-slide.jpg?w=1920 1920w"
data-sizes="auto"alt="显示 Roblox 的 IT 基础设施的图表。"
width="960"
height="540"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/roblox-OCR2024/roblox-ocr2024-infrastructure-slide.jpg"
alt="显示 Roblox 的 IT 基础设施的图表。"
width="960"
height="540"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt; “Roblox 仍然主要在本地运行，”Han 解释道。 “我们的主要数据中心位于美国，我们的边缘数据中心分布在全球。我们总共有 1,000 多个微服务在数十万台机器上运行。因此，正如您可以想象的那样，我们如何监控调试并保持系统正常运行存在很多挑战。”&lt;/p&gt;&lt;p&gt;特别是，团队处理运行时诊断的方式充满了挑战。以分析为例，Jiao 带领与会者完成了之前（且乏味）的过程。&lt;/p&gt;&lt;p&gt;首先，当发生服务中断时，工程师必须请求临时访问生产环境，这需要管理员批准，然后登录到生产实例。接下来，工程师将安装并运行分析工具，下载分析数据，然后在本地可视化和分析该数据。最后，在工程师找到他们需要的信息后，管理员必须撤销他们的生产访问权限。对于任何新的干扰，这个循环都会重复。&lt;/p&gt;&lt;p&gt; “痛点太多了，”焦说。 “这是手动的，效率低下，而且当人们登录生产服务器时实际上存在安全和隐私问题。”&lt;/p&gt;&lt;h2 id="the-solution-on-demand-profiling-with-grafana-pyroscope"&gt;解决方案：使用 Grafana Pyrscope 进行按需分析&lt;/h2&gt;&lt;p&gt;面对这些挑战，Roblox 可观测性团队开始寻找一种方法来扩展和简化其运行时诊断流程。&lt;/p&gt;&lt;p&gt;去年，在对 .NET 和 Go 进行一些概念验证和性能评估后，该团队决定使用 Grafana Pyrscope 构建端到端的按需分析工作流程。&lt;/p&gt;&lt;p&gt; “我们对 Pyrscope 进行了全面的性能评估，测量了性能影响，结果证明我们非常可以接受，”焦告诉与会者。&lt;/p&gt;&lt;p&gt;然后，随着 Grafana Pyrscope 添加到他们的工具链中，Roblox 工程师开始改变他们在生产中调试的方式。&lt;/p&gt;&lt;p&gt; “我们将 Profiler 融入到基于容器的镜像中。我们的服务框架持续监控我们的运行时配置服务，以监听我们何时需要提供哪些实例多长时间，或者何时关闭它们，”Jiao 说。 “一旦他们收到信号，他们实际上会调用 Pyrscope SDK 来动态控制 Profiler。”&lt;/p&gt;&lt;p&gt; Jiao 补充道，Roblox 工程师使用基于 Web 的内部 UI 来更新运行时配置，所有分析数据都会上传到 Grafana Cloud Profiles 中。&lt;/p&gt;&lt;p&gt;展望未来，该团队计划通过采用焦所说的&lt;em&gt;基于事件的分析&lt;/em&gt;来进一步推进该系统。在此模型中，服务关键事件（例如新部署、CPU 或内存问题）会立即自动触发分析。 &lt;/p&gt;&lt;figure
class="figure-wrapper figure-wrapper__lightbox w-100p "
style="max-width: 1280px;"
itemprop="associatedMedia"
itemscope=""
itemtype="http://schema.org/ImageObject"
&gt; &lt;a
class="lightbox-link"
href="/media/blog/roblox-OCR2024/roblox-ocr2024-diagnostic-system.png"
itemprop="contentUrl"
&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/roblox-OCR2024/roblox-ocr2024-diagnostic-system.png"data-srcset="/media/blog/roblox-OCR2024/roblox-ocr2024-diagnostic-system.png?w=320 320w, /media/blog/roblox-OCR2024/roblox-ocr2024-diagnostic-system.png?w=550 550w, /media/blog/roblox-OCR2024/roblox-ocr2024-diagnostic-system.png?w=750 750w, /media/blog/roblox-OCR2024/roblox-ocr2024-diagnostic-system.png?w=900 900w, /media/blog/roblox-OCR2024/roblox-ocr2024-diagnostic-system.png?w=1040 1040w, /media/blog/roblox-OCR2024/roblox-ocr2024-diagnostic-system.png?w=1240 1240w, /media/blog/roblox-OCR2024/roblox-ocr2024-diagnostic-system.png?w=1920 1920w"
data-sizes="auto"alt="Roblox 的运行时诊断系统图。"
width="1280"
height="720"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/roblox-OCR2024/roblox-ocr2024-diagnostic-system.png"
alt="Roblox 的运行时诊断系统图。"
width="1280"
height="720"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt; Jiao 表示，他将 Roblox 当前的按需分析系统以及基于事件的分析视为最终实现&lt;em&gt;连续分析的&lt;/em&gt;“垫脚石”——连续分析是一种适用于生产环境的现代且高度可扩展的分析方法。&lt;/p&gt;&lt;p&gt; “Pyrscope 从一开始就是为了连续分析而构建的，”Jiao 说。 “这就是为什么我们实际上需要一些深入的技术支持，以及 SDK 中的新 API，[以实现按需分析]。幸运的是，我们在 Grafana Labs 团队中有一位出色的合作伙伴；他们的技术支持非常棒。”&lt;/p&gt;&lt;h2 id="the-results-so-far-identifying-and-eliminating-bottlenecks"&gt;结果（到目前为止）：识别并消除瓶颈&lt;/h2&gt;&lt;p&gt;即使长期目标是持续分析，Roblox 也已经从转向 Grafana Pyrscope 中获益匪浅。 Jiao 表示，自从实施按需分析和改进的诊断系统以来，他们收到了工程师的“压倒性的积极反馈”。&lt;/p&gt;&lt;p&gt;特别是，这些工程师意识到他们现在可以更快、更高效地发现和解决瓶颈。举个例子，一组工程师能够识别并替换性能不佳的 JSON 库，从而使 CPU 使用率降低了 36%。同样，按需分析使团队用简单的数组查找替换了正则表达式匹配模式——这是另一个相当简单的更改，导致 CPU 使用率降低了 40%。&lt;/p&gt;&lt;p&gt;在另一个示例中，Roblox 工程师团队在优化和强化新服务时使用按需分析来发现性能问题的根本原因，并将吞吐量提高 10 倍。 &lt;/p&gt;&lt;figure
class="figure-wrapper figure-wrapper__lightbox w-100p "
style="max-width: 960px;"
itemprop="associatedMedia"
itemscope=""
itemtype="http://schema.org/ImageObject"
&gt; &lt;a
class="lightbox-link"
href="/media/blog/roblox-OCR2024/roblox-ocr2024-success-stories-slide.jpg"
itemprop="contentUrl"
&gt;&lt;div class="img-wrapper w-100p h-auto"&gt;&lt;img
class="lazyload "
data-src="/media/blog/roblox-OCR2024/roblox-ocr2024-success-stories-slide.jpg"data-srcset="/media/blog/roblox-OCR2024/roblox-ocr2024-success-stories-slide.jpg?w=320 320w, /media/blog/roblox-OCR2024/roblox-ocr2024-success-stories-slide.jpg?w=550 550w, /media/blog/roblox-OCR2024/roblox-ocr2024-success-stories-slide.jpg?w=750 750w, /media/blog/roblox-OCR2024/roblox-ocr2024-success-stories-slide.jpg?w=900 900w, /media/blog/roblox-OCR2024/roblox-ocr2024-success-stories-slide.jpg?w=1040 1040w, /media/blog/roblox-OCR2024/roblox-ocr2024-success-stories-slide.jpg?w=1240 1240w, /media/blog/roblox-OCR2024/roblox-ocr2024-success-stories-slide.jpg?w=1920 1920w"
data-sizes="auto"alt="幻灯片展示了 Roblox 与 Grafana Pyrscope 的成功故事。"
width="960"
height="540"
/&gt; &lt;noscript&gt;&lt;img
src="/media/blog/roblox-OCR2024/roblox-ocr2024-success-stories-slide.jpg"
alt="幻灯片展示了 Roblox 与 Grafana Pyrscope 的成功故事。"
width="960"
height="540"
/&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt; Han 在 ObservabilityCON on the Road 演讲结束时指出，传统上，日志、指标和痕迹被认为是可观察性的三大支柱。但通过 Grafana Pyrscope 以及他们与 Grafana Labs 团队的合作，Roblox 已经能够拥抱第四个（也是关键的）支柱：通过分析进行运行时诊断。&lt;/p&gt;&lt;p&gt; “我们共同努力利用我们拥有的所有数据来继续提高 Roblox 系统的可靠性、生产力和效率，并希望为我们的客户提供持续、不间断、无停机的体验，”他说。&lt;/p&gt;&lt;p&gt; &lt;em&gt;&lt;a href="/products/cloud/?pg=blog&amp;amp;plcmt=body-txt"&gt;Grafana Cloud&lt;/a&gt;是开始连续分析、指标、日志、跟踪和仪表板的最简单方法。我们为每个用例提供慷慨的永久免费套餐和计划。&lt;a href="/auth/sign-up/create-user/?pg=blog&amp;amp;plcmt=body-txt"&gt;现在免费注册&lt;/a&gt;！&lt;/em&gt;&lt;/p&gt;</description><pubDate>Fri, 07 Jun 2024 14:46:00 GMT</pubDate><guid isPermaLink="true">https://grafana.com/blog/2024/06/07/streamlining-runtime-diagnostics-with-on-demand-profiling-inside-robloxs-observability-stack/</guid></item></channel></rss>